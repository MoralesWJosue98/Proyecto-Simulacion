<?xml version="1.0" encoding="utf-8"?><!-- -*- coding: utf-8; mode: SGML -*- -->

<!-- *********************************************************************
This XML tree defines all the data (conditions, materials, gendata,
... of the problem)

Introduction

the XML tree below contains the definition of all the data (except the geometry),
necessary for a computer simulation analysis. It contains all the data that must be
filled by the user in order to perform the analysis.
*********************************************************************** -->

<lsdyna_data version='1.1'>
  <groups/>
  <groups_types editable='0'>
    <group_type pn='normal' default='1'/>
    <group_type pn='BC' auto_from_bc='1'/>
  </groups_types>
  <units>
    <unit_mesh n='m'/>
    <units_system n='SI' dict='SI,Int. system (SI)' active='1'/>
    <units_system n='imperial' dict='imperial,Imperial system' active='0'/>
    <unit_magnitude n='L' pn='Length' default='m' active='m'>
      <unit n='m' units_system='SI' factor='1.0'/>
      <unit n='cm' units_system='SI' factor='1.0e-2'/>
      <unit n='mm' units_system='SI' factor='1.0e-3'/>
      <unit n='km' units_system='SI' factor='1.0e+3'/>
      <unit n='in' units_system='imperial' factor='25.4e-3'/>
    </unit_magnitude>
    <unit_magnitude n='Rotation' pn='Rotation' default='rad' active='rad'>
      <unit n='rad' units_system='SI' factor='1.0'/>
      <unit n='deg' units_system='SI' factor='0.017453292519943'/>
      <unit n='rad' units_system='imperial' factor='1.0'/>
      <unit n='deg' units_system='imperial' factor='0.017453292519943'/>
    </unit_magnitude>
    <unit_magnitude n='M' pn='Mass' default='kg' active='kg'>
      <unit n='kg' units_system='SI' factor='1.0'/>
      <unit n='g' units_system='SI' factor='1.0e-3'/>
      <unit n='ton' units_system='SI' factor='1.0e+3'/>
      <unit n='lb' units_system='imperial' factor='0.45359237'/>
    </unit_magnitude>
    <unit_magnitude n='F' pn='Force' default='N' active='N'>
      <unit n='N' units_system='SI' factor='1.0'/>
      <unit n='kp' units_system='SI' factor='9.8'/>
      <unit n='kN' units_system='SI' factor='1.0e3'/>
      <unit n='Tmf' units_system='SI' factor='9.8e3'/>
      <unit n='lb-f' units_system='imperial' factor='4.4482216152605'/>
    </unit_magnitude>
    <unit_magnitude n='T' pn='Time' default='s' active='s'>
      <unit n='s' units_system='SI' factor='1.0'/>
      <unit n='min' units_system='SI' factor='60'/>
      <unit n='hour' units_system='SI' factor='3600'/>
      <unit n='s' units_system='imperial' factor='1'/>
      <unit n='min' units_system='imperial' factor='60'/>
      <unit n='hour' units_system='imperial' factor='3600'/>
    </unit_magnitude>
    <unit_magnitude n='DeltaTemp' pn='ΔT' default='Δ°C' active='Δ°C'>
      <unit n='Δ°C' units_system='SI' factor='1.0'/>
      <unit n='Δ°K' units_system='SI' factor='1.0'/>
      <unit n='Δ°F' units_system='imperial' factor='0.5555555555555556'/>
    </unit_magnitude>    
    <unit_magnitude n='Temp' pn='T' default='K' active='K'>
      <!--     TEMP UNITS MANAGEMENT SHOULD BE IMPLEMENTED IN THE FUTURE -->
    <!--       <unit n='ºF (Not available)' units_system='imperial' factor='1.0'/> -->
    <!--       <unit n='ºC (not available)' units_system='SI' factor='1.0'/> -->
      <unit n='K' units_system='SI' factor='1.0'/>
      <unit n='Kelvin' units_system='imperial' factor='1.0'/>
    </unit_magnitude>
    <unit_magnitude n='Adimensional' pn='Adimensional' default='Scalar' active='Scalar'>
      <unit n='Scalar' units_system='SI' factor='1.0'/>
      <unit n='Scalar' units_system='imperial' factor='1.0'/>
    </unit_magnitude>
    <unit_magnitude n='Amount_of_substance' pn='Amount of substance' default='mol' active='mol'>
      <unit n='mol' units_system='SI' factor='1.0'/>
      <unit n='mol' units_system='imperial' factor='1.0'/>
    </unit_magnitude>
    <unit_magnitude n='Energy' pn='Energy' default='J' active='J'>
      <unit n='J' units_system='SI' factor='1.0'/>
      <unit n='kJ' units_system='SI' factor='1000'/>
      <unit n='cal' units_system='SI' factor='4.184'/>
      <unit n='Btu' units_system='imperial' factor='0.000947'/>
    </unit_magnitude>
  </units>
  <blockdata n="General data" pn="General data" icon="prdata16">
    <!-- HIDDEN IN THIS LS-DYNA VERSION -->
    <container n="Analysis" pn="Analysis" icon="prdata16" state="hidden">     
      <value n="Problem_type" pn= "Problem type" v="Beams_and_shells" values="Beams_and_shells,Beams,Shells,Solids,Plane_strain,Plane_stress,Plates"
	dict='Beams_and_shells,Beams &amp; shells,Beams,Beams,Shells,Shells,Solids,Solids,Plane_strain,Plane strain,Plane_stress,Plane stress,Plates,Plates'
	help="'Plane stress' and 'Plates' are particular cases of 'Beams and shells'. Its only advantage is that they are faster. Input data and results are equal than 'Beams and shells'. 'Plane strain' substitutes the stress case for the strain case. In 'Plane strain', the Thickness of the shell is not considered"
      actualize_tree='1' />
      <value n="Analysis_Type" pn="Analysis type" v="Non-Linear_Dynamic" values="Linear_Static,Linear_Dynamic,Non-Linear_Static,Non-Linear_Dynamic"
	dict='Linear_Static,Linear static,Linear_Dynamic,Linear dynamic,Non-Linear_Static,Non-Linear static,Non-Linear_Dynamic,Non-Linear dynamic'
	help="Define the type of analysis to perform">
	<dependencies node="../../blockdata[@n='Linear_Dynamic' or @n='Non-Linear_Static' or @n='Non-Linear_Dynamic']" actualize="1"/>
      </value>
      <value n="Solution_procedure" pn="Solution Procedure" v="0" values="0,1,2,4,5"               
	dict='0,Structural analisys only,1,Thermal analisys only,2,Coupled structural thermal,4,Incompressible/low Mach CFD,5,Coupled Incompressible FSI' 
      help="Specify the analisys solution procedure" actualize_tree='1'/>
      <!-- NOT USED IN THIS VERSION OF LSDYNA -->
      <value n="Consider_beam_P-Delta" pn="Beam P-Delta" v="0" values="0,1" state="hidden" help="When activated, P-Delta analysis is performed. This analysis considers the second order effects in the beams"/>
    </container>
    <container n="Naval" pn="Naval Settings" state="[check_state {Naval}]" icon="prdata16">
      <value n="Ship_balance" pn="Ship balance" v="no" values="yes,no" help="Indicate if the automatic ship equilibration is to be performed"/>
      <value n="Perturb" pn="Perturbation" v="1.0e-10" />
      <value n="Num_it_eq" pn="Num. iterations" v="20" />
      <value n="Tol_eq" pn="Equil. tolerance" v="1.0e-5" />
    </container>
    <blockdata n="Linear_Dynamic" pn="Linear dynamic" state="[analysis_types_state Linear_Dynamic]" icon="dynamic_analysis16">
      <container n="General" pn="General">
	<value n="Dynamic_Analysis_Type" pn="Type" v="Modal_Analysis" values="Modal_Analysis,Direct_Integration,Spectrum_Analysis"
	  dict="Modal_Analysis,Modal analysis,Direct_Integration,Direct integration,Spectrum_Analysis,Spectrum analysis"
	  help="Choose the type of Dynamic Analysis that lsdyna will perform">
	  <dependencies node="../value[@n='Number_of_Modes']" att1="state" v1="hidden" value="Direct_Integration"/>
	  <dependencies node="../value[@n='Damping_Type']" att1="state" v1="hidden"  att2="v" v2="Rayleigh_Damping" value="Direct_Integration"/>
	  <dependencies node="../value[@n='Matrix_storage']" att1="state" v1="normal" value="Direct_Integration"/>
	  <dependencies node="../value[@n='Gamma']" att1="state" v1="normal" value="Direct_Integration"/>
	  <dependencies node="../value[@n='Beta']" att1="state" v1="normal" value="Direct_Integration"/>
	  <dependencies node="../value[@n='DeltaT']" att1="state" v1="normal" value="Direct_Integration"/>
	  <dependencies node="../value[@n='Number_of_steps']" att1="state" v1="normal" value="Direct_Integration"/>
	  <dependencies node="../value[@n='Spectrum_Analysis_type']" att1="state" v1="hidden" value="Direct_Integration"/>
	  <dependencies node="../../container[@n='Seismic_data']" att1="state" v1="hidden" value="Direct_Integration"/>
	  <dependencies node="../../container[@n='U.D._spectrum']" att1="state" v1="hidden" value="Direct_Integration"/>
	  <!--           <dependencies node="../value[@n='Initial_Conditions']" att1="state" v1="normal" value="Direct_Integration"/> -->
	  
	  <dependencies node="../value[@n='Number_of_Modes']" att1="state" v1="normal" value="Modal_Analysis"/>
	  <dependencies node="../value[@n='Gamma']" att1="state" v1="hidden" value="Modal_Analysis"/>
	  <dependencies node="../value[@n='Beta']" att1="state" v1="hidden" value="Modal_Analysis"/>
	  <dependencies node="../value[@n='Matrix_storage']" att1="state" v1="normal" value="Modal_Analysis"/>
	  <dependencies node="../value[@n='Damping_Type']" att1="state" v1="normal" value="Modal_Analysis" att2="v" v2="Modal_Damping"/>
	  <dependencies node="../value[@n='DeltaT']" att1="state" v1="normal" value="Modal_Analysis"/>
	  <dependencies node="../value[@n='Number_of_steps']" att1="state" v1="normal" value="Modal_Analysis"/>
	  <dependencies node="../value[@n='Spectrum_Analysis_type']" att1="state" v1="hidden" value="Modal_Analysis"/>
	  <dependencies node="../../container[@n='Seismic_data']" att1="state" v1="hidden" value="Modal_Analysis"/>
	  <dependencies node="../../container[@n='U.D._spectrum']" att1="state" v1="hidden" value="Modal_Analysis"/>
	  <!--           <dependencies node="../value[@n='Initial_Conditions']" att1="state" v1="normal" value="Modal_Analysis"/> -->
	  
	  <dependencies node="../value[@n='Number_of_Modes']" att1="state" v1="normal" value="Spectrum_Analysis"/>
	  <dependencies node="../value[@n='Gamma']" att1="state" v1="hidden" value="Spectrum_Analysis"/>
	  <dependencies node="../value[@n='Beta']" att1="state" v1="hidden" value="Spectrum_Analysis"/>
	  <dependencies node="../value[@n='Matrix_storage']" att1="state" v1="normal" value="Spectrum_Analysis"/>
	  <dependencies node="../value[@n='Damping_Type']" att1="state" v1="hidden" value="Spectrum_Analysis" att2="v" v2="Modal_Damping"/>
	  <dependencies node="../value[@n='DeltaT']" att1="state" v1="hidden" value="Spectrum_Analysis"/>
	  <dependencies node="../value[@n='Number_of_steps']" att1="state" v1="hidden" value="Spectrum_Analysis"/>
	  <dependencies node="../value[@n='Spectrum_Analysis_type']" att1="state" v1="normal" value="Spectrum_Analysis" att2="v" v2="Seismic_codes"/>
	  <!--           <dependencies node="../value[@n='Initial_Conditions']" att1="state" v1="hidden" value="Spectrum_Analysis"/> -->
	</value>
	<value n="Number_of_Modes" pn="Number of modes" v="1" help="Choose the number of modes to consider in the Modal Analysis" state="normal"/>
	<value n="DeltaT" pn="Δt" v="0.01" unit_magnitude="T" units="s" help="Time increment for the dynamic analysis" state="normal"/>
	<value n="Number_of_steps" pn="Number of steps" v="10" help="Number of steps of the dynamic analysis.\nTotal physical time will be Number_of_Steps X ΔT." state="normal"/>
	<value n="Gamma" pn="Gamma (γ)" v="0.5" help="Parameter for the direct integration" state="hidden"/>
	<value n="Beta" pn="Beta (β)" v="0.25" help="Parameter for the direct integration" state="hidden"/>
	<value n="Matrix_storage" pn="Matrix storage" v="Lumped" values="Lumped,Consistent"
	  dict="Lumped,Lumped,Consistent,Consistent"
	  help="Choose the type of storage for the Mass and Damping Matrix. If Lumped Matrix storage is choose, the  part of the Damping Matrix related with the stiffness matrix is neglected  (αK=0)." state="normal">
	  <dependencies node="../value[@n='Alpha_K']" att1="state" v1="disabled" value="Lumped" att2="v" v2="0.0"/>
	  <dependencies node="../value[@n='Alpha_K']" att1="state" v1="normal" value="Consistent"/>
	</value>
	<value n="Damping_Type" pn="Damping type" v="Rayleigh_Damping" values="Modal_Damping,Rayleigh_Damping"
	  dict="Modal_Damping,Modal damping,Rayleigh_Damping,Rayleigh damping"
	  help="Express the damping as a ratio of the critical damping ratio" state="normal">
	  <dependencies node="../value[@n='Damping_ratio']" att1="state" v1="normal" value="Modal_Damping"/>
	  <dependencies node="../value[@n='Alpha_M']" att1="state" v1="hidden" value="Modal_Damping"/>
	  <dependencies node="../value[@n='Alpha_K']" att1="state" v1="hidden" value="Modal_Damping"/>
	  <dependencies node="../value[@n='Damping_ratio']" att1="state" v1="hidden" value="Rayleigh_Damping"/>
	  <dependencies node="../value[@n='Alpha_M']" att1="state" v1="normal" value="Rayleigh_Damping"/>
	  <dependencies node="../value[@n='Alpha_K']" att1="state" v1="normal" value="Rayleigh_Damping"/>
	</value>
	<value n="Damping_ratio" pn="Damping ratio" v="0.05"/>
	<value n="Alpha_M" pn="αM" v="0.1" help="Coefficient of the Mass Matrix in the Rayleigh Damping"/>
	<value n="Alpha_K" pn="αK" v="0.0"  state="disabled" help="Coefficient of the Stiffness Matrix in the Rayleigh Damping">
	</value>
	<value n="Spectrum_Analysis_type" pn="Spectrum analysis" v="Seismic_codes" values="Seismic_codes,User_defined_spectrum"
	  dict="Seismic_codes,Seismic codes,User_defined_spectrum,User defined spectrum"
	  help="Choose the type of Spectrum Analysis used in the analysis. There are two types available: Seismic codes and User define spectrum." state="hidden">
	  <dependencies node="../../container[@n='Seismic_data']" att1="state" v1="normal" value="Seismic_codes"/>
	  <dependencies node="../../container[@n='U.D._spectrum']" att1="state" v1="hidden" value="Seismic_codes"/>
	  <dependencies node="../../container[@n='Seismic_data']" att1="state" v1="hidden" value="User_defined_spectrum"/>
	  <dependencies node="../../container[@n='U.D._spectrum']" att1="state" v1="normal" value="User_defined_spectrum"/>
	</value>
	<value n="Initial_Conditions" pn="Initial conanalysis_types_stateditions" v="None" values="None,Comb._Load_1,User_Defined"
	  dict="None,None,Comb._Load_1,Comb. load 1,User_Defined,User defined"
	  help="None: No assign any intial conditions \n\Comb. load 1: Assign like initial conditions an static combinated load case \nUser defined: Assign initial conditions defined by the user" state="normal">
	  <!--           <dependencies node="/*/*/condition[@n='Initial_Conditions']" actualize="1"/> -->
	</value>
      </container>
      <container n="Seismic_data" pn="Seismic data" state="hidden">
	<value n="Code_type" pn="Code type" v="NCSE-94_Spain_Code" values="NCSE-94_Spain_Code,Other"
	dict="NCSE-94_Spain_Code,94 Spain code,Other,Other"/>
	<value n="Design_Seismic_Acceleration" pn="Design acceleration" v="5.0" unit_magnitude="L/T^2" units="m/s^2"
	help="Indicate de the design seismic acceleration proposed in the code"/>
	<value n="Seismic_direction_nx" pn="Seismic Nx" v="1.0" help="Indicate the component of the seismic in the x global direction"/>
	<value n="Seismic_direction_ny" pn="Seismic Ny" v="0.0" help="Indicate the component of the seismic in the y global direction"/>
	<value n="Seismic_direction_nz" pn="Seismic Nz" v="0.0" help="Indicate the component of the seismic in the z global direction"/>
	<value n="Soil_coefficient" pn="Soil coefficient" v="1.0" help="Soil coefficient defined in the code"/>
	<value n="Contribution_coefficient" pn="Contribution coefficient" v="1.0" help="Contribution coefficient defined in the code"/>
	<value n="Ductility" pn="Ductility" v="2.0" help="Structure ductility defined in the code"/>
      </container>
      <container n="U.D._spectrum" pn="U.D. spectrum" state="hidden" help="User defined spectrum">
	<value n="Spectrum_Table" pn="Spectrum table"
	  function="interpolator_func t t T"
	help="Function to multiply to the spectrum vector"/>
	<value n="Spectrum_direction_nx" pn="Spectrum Nx" v="1.0" unit_magnitude="L/T^2" units="m/s^2" help="Indicate the component of the spectrum in the x global direction"/>
	<value n="Spectrum_direction_ny" pn="Spectrum Ny" v="0.0" unit_magnitude="L/T^2" units="m/s^2" help="Indicate the component of the spectrum in the y global direction"/>
	<value n="Spectrum_direction_nz" pn="Spectrum Nz" v="0.0" unit_magnitude="L/T^2" units="m/s^2" help="Indicate the component of the spectrum in the z global direction"/>
      </container>
    </blockdata>
    <blockdata n="Non-Linear_Static" pn="Non-Linear static" state="[analysis_types_state Non-Linear_Static]" icon="dynamic_analysis16">
      <container n="General" pn="General">
	<value n="Delta_Fac" pn="ΔF" v="6.0" help="Is the initial value of the incremental load factor or displacement factor. If the arc-length method is to be adopted\nand the desired length,ΔLd, for the first increment is input as zero, then ΔP is automatically converted to a length"/>
	<value n="Num_inc" pn="Num increments" v="10" help="Is the desired number of increments"/>
	<value n="Automatic_inc" pn="Automatic increment" v="Yes" values="Yes,No" help="If this parameter is set to 'Yes', automatic increment sizes are computed. \nSuch automatic increments must be used with the arc-length method. \nIf is set to 'No', equal increments of magnitude ΔP are adopted">
	  <dependencies node="../../container[@n='Automatic_inc_c']" att1="state" v1="hidden" value="No"/>
	  <dependencies node="../../container[@n='Automatic_inc_c']" att1="state" v1="normal" value="Yes"/>
	</value>
	<value n="Control" pn="Control" v="Load_Control" values="Load_Control,Disp._Control,Arc-length_Control" 
	  dict="Load_Control,Load control,Disp._Control,Disp. control,Arc-length_Control,Arc-length control"
	  help="Define the type of control for the non linear analysis.">
	  <dependencies node="../../container[@n='Arc-Length']" att1="state" v1="normal" value="Arc-length_Control"/>
	  <dependencies node="../../container[@n='Arc-Length']" att1="state" v1="hidden" value="Load_Control"/>
	  <dependencies node="../../container[@n='Arc-Length']" att1="state" v1="hidden" value="Disp._Control"/>
	</value>
	<value n="Conv._tolerance_static" pn="Conv. tolerance" v="0.001" help="Convergence tolerance factor."/>
	<value n="Iteration_type" pn="Iteration type" v="Full_N-R" values="Full_N-R,Modified_N-R"
	  dict="Full_N-R,Full N-R,Modified_N-R,Modified N-R"
	help="Indicate if the full or modified Newton Raphson method is chosen."/>
	<value n="Max_iter" pn="Max iterations" v="10" help="Define the maximum number of iterations"/>
	<value n="Line-Search" pn="Line-search" v="No" values="Yes,No" help="Define if line search method is required">
	  <dependencies node="../../container[@n='Line-Search_c']" att1="state" v1="hidden" value="No"/>
	  <dependencies node="../../container[@n='Line-Search_c']" att1="state" v1="normal" value="Yes"/>
	</value>
	<value n="Auto-ARC-switch" pn="Auto arc switch" v="No" values="Yes,No" help="Automatic switch to the arc-length method.">
	  <dependencies node="../../container[@n='Auto-ARC-switch_c']" att1="state" v1="hidden" value="No"/>
	  <dependencies node="../../container[@n='Auto-ARC-switch_c']" att1="state" v1="normal" value="Yes"/>
	</value>
      </container>
      <container n="Line-Search_c" pn="Line-Search" state="hidden">
	<value n="LS-loops" pn="Ls loops" v="10" help="Define the maximum number of Line-Search loops."/>
	<value n="LS-toler" pn="Ls toler" v="0.8" help="Tolerance on ratio."/>
	<value n="LS-min" pn="Ls min" v="0.1" help="Define the minimum step-length of Line-Search."/>
	<value n="LS-max" pn="Ls max" v="1.5" help="Define the maximum step-length of Line-Search."/>
	<value n="Amp-max" pn="Amp max" v="1.5" help="Define the maximum amplitude of any step."/>
      </container>
      <container n="Automatic_inc_c" pn="Automatic increment" state="normal">
	<value n="Num_Iter_d" pn="Num iterations" v="3" help="Number of iteration desired."/>
	<value n="DeltaP_max" pn="ΔP max" v="1.0" help="Maximum load increment."/>
	<value n="DeltaP_min" pn="ΔP min" v="1.0" help="Minimum load increment."/>
      </container>
      <container n="Auto-ARC-switch_c" pn="Auto ARC switch" state="hidden">
	<value n="C_Stiff" pn="C stiff" v="0.3" help="The desired current stiffness parameter for swithching."/>
      </container>
      <container n="Arc-Length" pn="Arc-Length" state="hidden">
	<value n="DeltaL_d" pn="ΔL d" v="0.05" help="Desired length increment."/>
	<value n="DeltaL_max" pn="ΔL max" v="0.05" help="Maximum length increment."/>
	<value n="DeltaL_min" pn="ΔL min" v="0.05" help="Minimum length increment."/>
      </container>
    </blockdata>
    <!-- HIDDEN IN THIS LS-DYNA VERSION -->
    <blockdata n="Non-Linear_Dynamic" pn="Non-Linear dynamic" state="hidden" icon="dynamic_analysis16">
      <container n="General" pn="General">
	<!-- HIDDEN IN THIS LS-DYNA VERSION -->
	<value n="Integration_method" pn="Integr. method" v="Explicit" state="hidden" values="Implicit,Explicit"
	  dict="Implicit,Implicit,Explicit,Explicit"
	  help="Algorithm of temporal integration">
	  <dependencies node="../../container[@n='Integration_Data']" att1="state" v1="normal" value="Implicit"/>
	  <dependencies node="../../container[@n='Non-Linear']" att1="state" v1="normal" value="Implicit"/>
	  <dependencies node="../value[@n='Delta_T']" att1="state" v1="hidden" value="Implicit"/>
	  <dependencies node="../value[@n='Number-of-steps']" att1="state" v1="hidden" value="Implicit"/>
	  <dependencies node="../value[@n='DeltaT_variation']" att1="state" v1="!hidden" value="Implicit"/>
	  <dependencies node="../../container[@n='Integration_Data']" att1="state" v1="hidden" value="Explicit"/>
	  <dependencies node="../../container[@n='Non-Linear']" att1="state" v1="hidden" value="Explicit"/>
	  <dependencies node="../value[@n='Matrix_storage_NL']" att1="state" v1="normal" value="Explicit" att2="v" v2="Lumped"/>
	  <dependencies node="../value[@n='Delta_T']" att1="state" v1="!hidden" value="Explicit"/>
	  <dependencies node="../value[@n='Number-of-steps']" att1="state" v1="normal" value="Explicit"/>
	  <dependencies node="../value[@n='DeltaT_variation']" att1="state" v1="hidden" value="Explicit"/>
	</value>
	<value n="T_0" pn="T0" v="0.0" unit_magnitude="T" units="s" help="Initial time for the dynamic analysis."/>
	<value n="Delta_T" pn="Δt" v="0.01" unit_magnitude="T" units="s" help="Time increment for the dynamic analysis" state="hidden"/>
	<value n="Number-of-steps" pn="Number of steps" v="10" help="Number of steps of the dynamic analysis.\nTotal physical time will be Number of steps X ΔT." state="hidden"/>
	<value n="DeltaT_variation" pn="Δt variation" unit_magnitude="T" units="s" v="0.01"
	  function="interpolator_func ΔSteps ΔSteps integer" pn_function="Δt"
	  help="Time increment variation for certain number of step." state="normal"/>
	  <value n="Matrix_storage_NL" pn="Matrix storage" v="Lumped" values="Lumped,Consistent"
	    dict="Lumped,Lumped,Consistent,Consistent"
	    help="Choose the type of storage for the Mass and Damping Matrix. If Lumped Matrix storage is choose, the  part of the Damping Matrix related with the stiffness matrix is neglected  (Alpha K=0)." state="normal">
	  </value>
	  <value n="Initial_Conditions_NL" pn="Initial conditions" v="None" values="None,Comb._Load_1,User_Defined"
	    dict="None,None,Comb._Load_1,Comb. load 1,User_Defined,User defined"
	    help="None: No assign any intial conditions \n\Comb. load 1: Assign like initial conditions an static combinated load case \nUser defined: Assign initial conditions defined by the user" state="normal">
	    <dependencies node="../value[@n='Comb_Load_1_data']" att1="state" v1="hidden" value="None"/>
	    <dependencies node="../value[@n='Comb_Load_1_data']" att1="state" v1="normal" value="Comb._Load_1"/>
	    <dependencies node="../value[@n='Comb_Load_1_data']" att1="state" v1="hidden" value="User_Defined"/>
	    <!--               <dependencies node="/*/*/condition[@n='Initial_Conditions']" actualize="1"/> -->
	  </value>
	  <value n="Comb_Load_1_data" pn="Comb. load 1 data" v="Disp_and_load" values="Only_disp,Disp_and_load"
	    dict="Only_disp,Only displacement,Disp_and_load,Displacement and load"
	    help="This question indicate wich data are pass like initial condition in the Non linear dynamic analysis" state="hidden"/>
	  </container>
	  <container n="Integration_Data" pn="Integration Data" state="normal">
	    <value n="Gamma_NL" pn="Gamma (γ)" v="0.5" help="Parameter for the direct integration"/>
	    <value n="Beta_NL" pn="Beta (β)" v="0.25" help="Parameter for the direct integration"/>
	  </container>
	  <container n="Damping" pn="Damping">
	    <value n="Alpha_M_NL" pn="αM" v="0.1" help="Coefficient of the Mass Matrix in the Rayleigh Damping"/>
	    <value n="Alpha_K_NL" pn="αK" v="0.1" help="Coefficient of the Stiffness Matrix in the Rayleigh Damping"/>
	  </container>
	  <container n="Non-Linear" pn="Non linear" state="normal">
	    <value n="Conv._tolerance_dynamic" pn="Conv. tolerance" v="0.001" help="Convergence tolerance factor."/>
	    <value n="Iteration_type_NL" pn="Iteration type" v="Full_N-R" values="Full_N-R,Modif_1_N-R,Modif_2_N-R,Initial_N-R"
	      dict="Full_N-R,Full N-R,Modif_1_N-R,Modif 1 N-R,Modif_2_N-R,Modif 2 N-R,Initial_N-R,Initial N-R"
	      help="Indicate the Newton Raphson method chosen."/>
	      <value n="Max_iter_NL" pn="Max iterations" v="10" help="Define the maximun number of iterations"/>
	    </container>
	  </blockdata>
	  <container n='units' pn='Units' icon="prdata16">
	    <value n='units_mesh' pn='Mesh units' editable='0'
	      values='{/lsdyna_data/units/unit_magnitude[@n="L"]/unit[not(@units_system) or @units_system=//value[@n="units_system"]/@v]}'
	v='{/lsdyna_data/units/unit_magnitude[@n="L"]/@default}'>
	<dependencies node="/*/units/unit_mesh" att1="n" v1="{//value[@n='units_mesh']/@v}"/>
      </value>
      <value n='units_system' pn='Units system' editable='0' dict='{/lsdyna_data/units/units_system/@dict}' 
	values='{/lsdyna_data/units/units_system}' v='SI'>
	<dependencies node="../value[@n='units_mesh']"/>
	<dependencies node="..//container[@n='basic_units']/value"/>
	<dependencies node="/*/units/units_system[@n=//value[@n='units_system']/@v]" att1="active" v1="1"/>
	<dependencies node="/*/units/units_system[@n!=//value[@n='units_system']/@v]" att1="active" v1="0"/>
	
	<dependencies node="/*/units/unit_magnitude[@n='L']" att1="default" v1="{/*/units/unit_magnitude[@n='L']/unit[@units_system=//value[@n='units_system']/@v][1]/@n}"/>
	<dependencies node="/*/units/unit_magnitude[@n='Rotation']" att1="default" v1="{/*/units/unit_magnitude[@n='Rotation']/unit[@units_system=//value[@n='units_system']/@v][1]/@n}"/>
	<dependencies node="/*/units/unit_magnitude[@n='M']" att1="default" v1="{/*/units/unit_magnitude[@n='M']/unit[@units_system=//value[@n='units_system']/@v][1]/@n}"/>
	<dependencies node="/*/units/unit_magnitude[@n='F']" att1="default" v1="{/*/units/unit_magnitude[@n='F']/unit[@units_system=//value[@n='units_system']/@v][1]/@n}"/>
	<dependencies node="/*/units/unit_magnitude[@n='T']" att1="default" v1="{/*/units/unit_magnitude[@n='T']/unit[@units_system=//value[@n='units_system']/@v][1]/@n}"/>
	<dependencies node="/*/units/unit_magnitude[@n='DeltaTemp']" att1="default" v1="{/*/units/unit_magnitude[@n='DeltaTemp']/unit[@units_system=//value[@n='units_system']/@v][1]/@n}"/>
	<dependencies node="/*/units/unit_magnitude[@n='Temp']" att1="default" v1="{/*/units/unit_magnitude[@n='Temp']/unit[@units_system=//value[@n='units_system']/@v][1]/@n}"/>
      </value>
      <container n='basic_units' pn='Basic units' icon="prdata16">
	<value n='units_length' pn='Length' editable='0'
	  values='{/lsdyna_data/units/unit_magnitude[@n="L"]/unit[not(@units_system) or @units_system=//value[@n="units_system"]/@v]}'
	  v='{/lsdyna_data/units/unit_magnitude[@n="L"]/@default}'>
	  <dependencies node="/*/units/unit_magnitude[@n='L']" att1="active" v1="{../@v}"/>
	</value>
	<value n='units_rotation' pn='Rotation' editable='0'
	  values='{/lsdyna_data/units/unit_magnitude[@n="Rotation"]/unit[not(@units_system) or @units_system=//value[@n="units_system"]/@v]}'
	  v='{/lsdyna_data/units/unit_magnitude[@n="Rotation"]/@default}'>
	  <dependencies node="/*/units/unit_magnitude[@n='Rotation']" att1="active" v1="{../@v}"/>
	</value>
	<value n='units_mass' pn='Mass' editable='0'
	  values='{/lsdyna_data/units/unit_magnitude[@n="M"]/unit[not(@units_system) or @units_system=//value[@n="units_system"]/@v]}'
	  v='{/lsdyna_data/units/unit_magnitude[@n="M"]/@default}'>
	  <dependencies node="/*/units/unit_magnitude[@n='M']" att1="active" v1="{../@v}"/>
	</value>
	<value n='units_force' pn='Force' editable='0'
	  values='{/lsdyna_data/units/unit_magnitude[@n="F"]/unit[not(@units_system) or @units_system=//value[@n="units_system"]/@v]}'
	  v='{/lsdyna_data/units/unit_magnitude[@n="F"]/@default}'>
	  <dependencies node="/*/units/unit_magnitude[@n='F']" att1="active" v1="{../@v}"/>
	</value>
	<value n='units_time' pn='Time' editable='0'
	  values='{/lsdyna_data/units/unit_magnitude[@n="T"]/unit[not(@units_system) or @units_system=//value[@n="units_system"]/@v]}'
	  v='{/lsdyna_data/units/unit_magnitude[@n="T"]/@default}'>
	  <dependencies node="/*/units/unit_magnitude[@n='T']" att1="active" v1="{../@v}"/>
	</value>
	<!--         HIDDEN AT THE MOMENT IN THIS LS-DYNA VERSION -->
	<value n='units_temperature' pn='Temperature' state="hidden" editable='0'
	  values='{/lsdyna_data/units/unit_magnitude[@n="Temp"]/unit[not(@units_system) or @units_system=//value[@n="units_system"]/@v]}'
	  v='{/lsdyna_data/units/unit_magnitude[@n="Temp"]/@default}'>
	  <dependencies node="/*/units/unit_magnitude[@n='Temp']" att1="active" v1="{../@v}"/>
	</value>
      </container>
    </container>
    <container n="Gravity" pn="Gravity" icon="prdata16" help="Choose both magnitude and direction of gravity">
      <!-- GRAVITY VECTOR, HIDDEN IN THIS LSDYNA VERSION -->
      <value n="Gravity_X" pn="X" v="[give_gravity_vector X]" state="hidden"/>
      <value n="Gravity_Y" pn="Y" v="[give_gravity_vector Y]" state="hidden"/>
      <value n="Gravity_Z" pn="Z" v="[give_gravity_vector Z]" state="hidden"/>
      <value n="Active_gravity" pn="Activate Gravity" v="0" values="1,0" actualize_tree='1'>
	<dependencies node="../value[@n='Gravity_Magnitude']" att1="state" v1="normal" value="1" />
	<dependencies node="../value[@n='Gravity_Magnitude']" att1="state" v1="disabled" value="0"/>                
	<dependencies node="../value[@n='Gravity_Direction']" att1="state" v1="normal" value="1"/>
	<dependencies node="../value[@n='Gravity_Direction']" att1="state" v1="disabled" value="0"/>
      </value>
      <value n="Gravity_Magnitude" pn="Magnitude" v="9.81" editable="1" unit_magnitude="L/T^2" units="m/s^2" state="disabled" actualize_tree='1'/>
      <value n="Gravity_Direction" pn="Direction" v="Z-" editable="0" values="Z-,Z+,Y-,Y+,X-,X+" dict="Z-,Z-,Z+,Z+,Y-,Y-,Y+,Y+,X-,X-,X+,X+" state="disabled" actualize_tree='1'/>
    </container>
    <!-- HIDDEN IN THIS LS-DYNA VERSION -->
    <container n="Results" pn="Results" icon="prdata16" state="hidden">
      <container n="Beam_results" pn="Beams" icon="prdata16" state="[check_state {Naval Beams_and_shells Beams}]">
	<value n="Beam_Res_granularity" pn="Granularity" v="20" help="Results graphics for beams will have this number of segments precision for displaying the results"/>
	<value n="Output_beams_maximums" pn="Output maximums" v="Automatic" values="Automatic,Never,Always" help="When there are more than one loadcase, it is possible to output a special loadcase containing the maximums for beams. Option 'Automatic', outputs it only if there are steel sections. Option 'Always', output it if there are more than one loadcase."/>
      </container>
      <container n="Shells_results" pn="Shells" icon="prdata16" state="[check_state {Naval Beams_and_shells Shells Plane_strain Plane_stress Plates}]">
	<value n="Shell_Res_axes" pn="Results axes" v="Both" values="Both,Local_axes,Main_axes" 
	  dict='Both,Both,Local_axes,Local axes,Main_axes,Main axes'
	  help="Results for shells can be given in:\n   Local Axes: the ones defined in the\n     preprocess in the shell condition\n   Main Axes: the main axes calculated for axial\n     strengths and the main axes calculated\n     for momentus"/>
	  <value n="Output_shell_stresses" pn="Output stresses" v="no" values="yes,no" help="If this option is set, program will output the stresses and Von-Misses stress for the superior and inferior faces of the shell."/>
	  <value n="Shell_Internal_6-noded_elem" pn="Int 6Node elem" v="yes" values="yes,no" help="3-noded triangle shell elements are calculated internally as 6-noded elements."/>
	  <value n="Shell_Smooth_Res" pn="Smooth Results" v="yes" values="yes,no" help="If Smooth results is set, strengths are smoothed by zones"/>
	</container>
	<container n="Solid_results" pn="Solids" icon="prdata16" state="[check_state Solids]">
	  <value n="yield_criterion" pn="Yield criterion" v="von_misses" values="von_misses,rankine" dict="von_misses,Von Misses,rankine,Rankine"
	  help="This will be the result to be visualized in the postprocessing part"/>
	</container>
      </container>
      <container n="Solver" pn="Solver" icon="prdata16">
      <value n="CPU_time" pn="CPU Time" v="0.0" unit_magnitude="T" units="s" help="Seconds of CPU time (0.0 means that no cpu time limit is set)"/>
	<value n="End_time" pn="End Time" v="0.10" unit_magnitude="T" units="s" help="Stop the job at introduced time"/>
	<value n="End_cycles" pn="End Cycles" v="0" help="Stop the job at introduced cycles"/>
      <value n="Dt_Min" pn="dt min" v="0.0" help="Reduction (or scale) factor for initial time step size to determine minimum time step, TSMIN. Indeed, TSMIN=(dt min)*DTSART, where DTSART is the initial step size determined by LSDYNA"/> 
      <value n="Dt_Comp" pn="dt comp" v="0.0" help="Reduction (or scale) factor for computed time step. Default=0.9, but if explosions are used is lowered to 0.67"/>
      <value n="Time_mass_scaled" pn="Time mass scaled" v="0.0" unit_magnitude="T" units="s" help="Time step size for mass scaled solutions (default set to 0.0)."/>
      <value n="End_Energy_ratio" pn="End Energy Ratio" v="0.0" help="Percent change in Energy Ratio for termination of calculation"/>
      <value n="End_Total_Mass" pn="End Total Mass" v="0.0" help="Percent change in total mass for the termination of calculation"/>
      <!-- NOT USED IN THIS LSDYNA VERSION -->
      <container n="Equations_solver" pn="Equations solver" icon="prdata16" state="hidden">
	<value n="Solver_type" pn="Solver type" v="Automatic" values="Automatic,SkyLine,Sparse"
	  dict="Automatic,Automatic,SkyLine,SkyLine,Sparse,Sparse"
	  help="Permmits to choose the solver to be used:\nAtomatic: Runs a direct solver for small problems and an iterative for big ones.\nSkyLine: Direct solver. It has no convergence problems but needs more RAM memory.\nSparse: Iterative solver. they take much less memory but may not converge. User can choose desired parameters.">
	  <dependencies node="../value[@n='Solver_tolerance']" att1="state" v1="normal" value="Sparse"/>
	  <dependencies node="../value[@n='Solver_tolerance_minimum']" att1="state" v1="normal" value="Sparse"/>
	  <dependencies node="../value[@n='Solver_max_iterations']" att1="state" v1="normal" value="Sparse"/>
	  <dependencies node="../value[@n='Solver_tolerance']" att1="state" v1="hidden" default="1"/>
	  <dependencies node="../value[@n='Solver_tolerance_minimum']" att1="state" v1="hidden" default="1"/>
	  <dependencies node="../value[@n='Solver_max_iterations']" att1="state" v1="hidden" default="1"/>
	</value>
	<value n="Solver_tolerance" pn="Solver tolerance" v="1.0e-5" help="Tolerance accepted to finish iterations" state="hidden"/>
	<value n="Solver_tolerance_minimum" pn="Solver tolerance min" v="1.0e-1" help="If solver arrives to Max iterations, then this tolerance is used to accept or not the result." state="hidden"/>
	<value n="Solver_max_iterations" pn="Solver max iterations" v="20000" help="Maximum number of iterations permmited to the solver." state="hidden"/>
      </container>
      <!-- NOT USED IN THIS LSDYNA VERSION -->
      <container n="Eigen_Solver" pn="Eigen solver" icon="prdata16" state="hidden">
	<value n="Eigen_max_iter" pn="Eigensolver max iterations" v="16" help="Maximum number of iterations permmited to the eigensolver."/>
      </container>
    </container>
    <container n="Bulk_viscosity" pn="Hourglass and Bulk Viscosity" icon="prdata16">
      <value n="Activation" pn="Define default hourglass and bulk viscosity" v="0" values="1,0" help="Please specify if bulk viscosity data is defined">
	<dependencies node="../value[@n='Default_linear_bulk']" att1="state" v1="disabled" value="0" actualize="1"/>
	<dependencies node="../value[@n='Default_linear_bulk']" att1="state" v1="normal" not_value="0" actualize="1"/>
	<dependencies node="../value[@n='Default_linear_bulk']" att1="state" v1="normal" default="0" actualize="1"/>
	<dependencies node="../value[@n='Default_quadratic_bulk']" att1="state" v1="disabled" value="0" actualize="1"/>
	<dependencies node="../value[@n='Default_quadratic_bulk']" att1="state" v1="normal" not_value="0" actualize="1"/>
	<dependencies node="../value[@n='Default_quadratic_bulk']" att1="state" v1="normal" default="0" actualize="1"/>
	<dependencies node="../value[@n='Default_hourglass_type']" att1="state" v1="disabled" value="0" actualize="1"/>
	<dependencies node="../value[@n='Default_hourglass_type']" att1="state" v1="normal" not_value="0" actualize="1"/>
	<dependencies node="../value[@n='Default_hourglass_type']" att1="state" v1="normal" default="0" actualize="1"/>
	<dependencies node="../value[@n='Default_hourglass_coefficient']" att1="state" v1="disabled" value="0" actualize="1"/>
	<dependencies node="../value[@n='Default_hourglass_coefficient']" att1="state" v1="normal" not_value="0" actualize="1"/>
	<dependencies node="../value[@n='Default_hourglass_coefficient']" att1="state" v1="normal" default="0" actualize="1"/>
      </value>
      <value n="Default_hourglass_type" pn="Default hourglass viscosity type" v="1" values="1,2,3,4,5,6" dict='1,Standard LS-DYNA,2,Flanagan-Belytschko integration,3,Flanagan-Belytschko with exact volume integration,4,Stiffness form of type 2 (Flanagan-Belytschko),5,Stiffness form of type 3 (Flanagan-Belytschko),6,Belytschko-Bindeman assumed strain co-rotational stiffness' help="Default hourglass viscosity type"/>
      <value n="Default_hourglass_coefficient" pn="Default hourglass coefficient" v="0.1" help="Default hourglass coefficient. Values that exceed 0.15 may cause instabilities"/>
      <value n="Default_linear_bulk" pn="Default linear bulk viscosity coefficient" v="1.5" help="Default linear bulk viscosity coefficient"/>
      <value n="Default_quadratic_bulk" pn="Default quadratic bulk viscosity coefficient" v="0.06" help="Default quadratic bulk viscosity coefficient"/>
    </container>
    <container n="Dynamic_relaxation" pn="Dynamic Relaxation" icon="prdata16" help="Define dynamic relaxation behaviour">
      <value n="Activation" pn="Define dynamic relaxation data" v="0" values="1,0" help="Choose if dynamic relaxation data is defined">
	<dependencies node="../value[@n='Check_iterations']" att1="state" v1="disabled" value="0" actualize="1"/>
	<dependencies node="../value[@n='Check_iterations']" att1="state" v1="normal" not_value="0" actualize="1"/>
	<dependencies node="../value[@n='Check_iterations']" att1="state" v1="normal" default="0" actualize="1"/>
	<dependencies node="../value[@n='Tolerance']" att1="state" v1="disabled" value="0" actualize="1"/>
	<dependencies node="../value[@n='Tolerance']" att1="state" v1="normal" not_value="0" actualize="1"/>
	<dependencies node="../value[@n='Tolerance']" att1="state" v1="normal" default="0" actualize="1"/>
	<dependencies node="../value[@n='Relaxation_factor']" att1="state" v1="disabled" value="0" actualize="1"/>
	<dependencies node="../value[@n='Relaxation_factor']" att1="state" v1="normal" not_value="0" actualize="1"/>
	<dependencies node="../value[@n='Relaxation_factor']" att1="state" v1="normal" default="0" actualize="1"/>
	<dependencies node="../value[@n='Timestep_factor']" att1="state" v1="disabled" value="0" actualize="1"/>
	<dependencies node="../value[@n='Timestep_factor']" att1="state" v1="normal" not_value="0" actualize="1"/>
	<dependencies node="../value[@n='Timestep_factor']" att1="state" v1="normal" default="0" actualize="1"/>
      </value>
      <value n="Check_iterations" pn="Check iterations" v="250" help="Number of iterations between convergence checks, for dynamic relaxation option"/>
      <value n="Tolerance" pn="Tolerance" v="0.001" help="Convergence tolerance for dynamic relaxation option"/>
      <value pn="Relaxation factor" n="Relaxation_factor" v="0.995" help="Dynamic relaxation factor"/>
      <value n="Timestep_factor" pn="Time step factor" v="0" help="Scale factor for computed time step during dynamic relaxation. If 0, time step factor is set to the dt comp value entered in the Solver menu"/>
    </container>
    <container n="Shell_preferences" pn="Shell preferences" icon="prdata16" help="Define data related with default shells behaviour">
      <value n="Warpage_angle" pn="Warpage_angle" v="20" unit_magnitude="Rotation" units="deg" help="Shell element warpage angle. If a warpage greater than this angle is found, a warning message is printed"/>
      <value n="Element_sorting" pn="Element Sorting" v="0" values="0,1,2" dict='0,No sorting,1,Sort C0 triangular elements,2,Sort DKT triangular elements' help="Automatic sorting of triangular shell elements to treat degenerate quadrilateral shell elements as C0 or DKT triangular shells."/>
      </container>
    <!-- NOT USED IN THIS LSDYNA VERSION -->
    <container n='Tdyn_coupling' pn='Tdyn coupling' icon="prdata16" state="hidden">
      <edit_command n="Tdyn_coupling_win" proc='Tdyn_coupling_win' edit_type='exclusive'/>
      <value n="Tdyn_filename" pn="Filename" v="" help="Tdyn results file"/>
      <value n="Tdyn_analysis" pn="Analysis" v="" help="Tdyn analysis name in results file"/>
      <value n="Tdyn_result" pn="Result" v="" help="Tdyn result name in results file"/>
      <value n="Tdyn_timesteps" pn="Time steps" v="" help="A comma separated list of timesteps"/>
    </container>
    <!-- HIDDEN IN THIS LS-DYNA VERSION -->
    <condition n="Detailed_results" pn="Detailed results" state="hidden" ov="point,line,surface,volume" ovm="node" help="If this condition is applied to points, an additional file is created: PROJECT.detailed.xml with detailed result information in the selected nodes">
      <symbol proc='gid_groups_conds::draw_symbol_text D' orientation='global'/>
    </condition>
  </blockdata>
  <container n="Constraints" pn="Constraints" icon="constraints16">
    <condition n="Fixed_constraints" pn="Fixed constraints" ov="point,line,surface,volume" ovm="node"  icon="constraints16" 
      help="Use this condition to prescribe translational or rotational displacements, velocities or accelerations to points.\nEvery marked flag will prescribe the movement for that degree of freedom (you can fix it setting all its parameters to zero).">
      <symbol proc='lsdyna::draw_symbol_constraints fixed' orientation='global'/>
      <container n="Activation" pn="Fixation">
	<value n="X_Constraint" pn="X Constraint" v="1" values="1,0" state="[check_state_inv Plates]">
	  <dependencies node="../../container[@n='Value']/value[@n='X_Value']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Value']/value[@n='X_Value']" att1="state" v1="normal" default="1"/>
	  <dependencies node="../../container[@n='Velocity']/value[@n='X_Velocity']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Velocity']/value[@n='X_Velocity']" att1="state" v1="normal" default="1"/>
	  <dependencies node="../../container[@n='Acceleration']/value[@n='X_Acceleration']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Acceleration']/value[@n='X_Acceleration']" att1="state" v1="normal" default="1"/>
	</value>
	<value n="Y_Constraint" pn="Y Constraint" v="1" values="1,0" state="[check_state_inv Plates]">
	  <dependencies node="../../container[@n='Value']/value[@n='Y_Value']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Value']/value[@n='Y_Value']" att1="state" v1="normal" default="1"/>
	  <dependencies node="../../container[@n='Velocity']/value[@n='Y_Velocity']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Velocity']/value[@n='Y_Velocity']" att1="state" v1="normal" default="1"/>
	  <dependencies node="../../container[@n='Acceleration']/value[@n='Y_Acceleration']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Acceleration']/value[@n='Y_Acceleration']" att1="state" v1="normal" default="1"/>
	</value>
	<value n="Z_Constraint" pn="Z Constraint" v="1" values="1,0" state="[check_state_inv {Plane_strain Plane_stress}]">
	  <dependencies node="../../container[@n='Value']/value[@n='Z_Value']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Value']/value[@n='Z_Value']" att1="state" v1="normal" default="1"/>
	  <dependencies node="../../container[@n='Velocity']/value[@n='Z_Velocity']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Velocity']/value[@n='Z_Velocity']" att1="state" v1="normal" default="1"/>
	  <dependencies node="../../container[@n='Acceleration']/value[@n='Z_Acceleration']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Acceleration']/value[@n='Z_Acceleration']" att1="state" v1="normal" default="1"/>
	</value>
	<value n="theta_x_Constraint" pn="θx Constraint" v="1" values="1,0" state="[check_state_inv {Plane_strain Plane_stress Plates Solids}]">
	  <dependencies node="../../container[@n='Value']/value[@n='theta_x_Value']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Value']/value[@n='theta_x_Value']" att1="state" v1="normal" default="1"/>
	  <dependencies node="../../container[@n='Velocity']/value[@n='theta_x_Velocity']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Velocity']/value[@n='theta_x_Velocity']" att1="state" v1="normal" default="1"/>
	  <dependencies node="../../container[@n='Acceleration']/value[@n='theta_x_Acceleration']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Acceleration']/value[@n='theta_x_Acceleration']" att1="state" v1="normal" default="1"/>
	</value>
	<value n="theta_y_Constraint" pn="θy Constraint" v="1" values="1,0" state="[check_state_inv {Plane_strain Plane_stress Solids}]">
	  <dependencies node="../../container[@n='Value']/value[@n='theta_y_Value']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Value']/value[@n='theta_y_Value']" att1="state" v1="normal" default="1"/>
	  <dependencies node="../../container[@n='Velocity']/value[@n='theta_y_Velocity']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Velocity']/value[@n='theta_y_Velocity']" att1="state" v1="normal" default="1"/>
	  <dependencies node="../../container[@n='Acceleration']/value[@n='theta_y_Acceleration']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Acceleration']/value[@n='theta_y_Acceleration']" att1="state" v1="normal" default="1"/>
	</value>
	<value n="theta_z_Constraint" pn="θz Constraint" v="1" values="1,0" state="[check_state_inv {Plane_strain Plane_stress Solids}]">
	  <dependencies node="../../container[@n='Value']/value[@n='theta_z_Value']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Value']/value[@n='theta_z_Value']" att1="state" v1="normal" default="1"/>
	  <dependencies node="../../container[@n='Velocity']/value[@n='theta_z_Velocity']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Velocity']/value[@n='theta_z_Velocity']" att1="state" v1="normal" default="1"/>
	  <dependencies node="../../container[@n='Acceleration']/value[@n='theta_z_Acceleration']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Acceleration']/value[@n='theta_z_Acceleration']" att1="state" v1="normal" default="1"/>
	</value>
	<!--   HIIDEN IN THIS LS-DYNA VERSION -->
	<value n="Local_axes" pn="Local axes" v="0" values="0,1" state="hidden" editable='0'
	help="If the direction to prescribe is not coincident with the global axes, it is possible to define a set of local axes and prescribe the displacements related to that local axes"/>
      </container>
      <container n="Value" pn="Motion">
	<value n="Factor_Value" pn="Factor" v="1.0" help="This factor, that can be a number or a formula, multiplies all motion values"
	function="[loads_function Fixed_constraints]" function_func="lsdyna::function_loads"/>
	<value n="X_Value" pn="X value" v="0.0"
	unit_magnitude="L" state="normal"/>
	<value n="Y_Value" pn="Y value" v="0.0"
	unit_magnitude="L" state="normal"/>
	<value n="Z_Value" pn="Z value" v="0.0"
	unit_magnitude="L" state="normal"/>
	<value n="theta_x_Value" pn="θx value" v="0.0"
	unit_magnitude="Rotation" state="normal"/>
	<value n="theta_y_Value" pn="θy value" v="0.0"
	unit_magnitude="Rotation" state="normal"/>
	<value n="theta_z_Value" pn="θz value" v="0.0"
	unit_magnitude="Rotation" state="normal"/>
      </container>
      <container n="Velocity" pn="Velocity">
	<value n="Factor_Velocity" pn="Factor" v="1.0" help="This factor, that can be a number or a formula, multiplies all velocity values"
	function="[loads_function Fixed_constraints]" function_func="lsdyna::function_loads"/>
	<value n="X_Velocity" pn="vx value" v="0.0"
	unit_magnitude="L/T" state="normal"/>
	<value n="Y_Velocity" pn="vy value" v="0.0"
	unit_magnitude="L/T" state="normal"/>
	<value n="Z_Velocity" pn="vz value" v="0.0"
	unit_magnitude="L/T" state="normal"/>
	<value n="theta_x_Velocity" pn="ωx value" v="0.0"
	unit_magnitude="Rotation/T" state="normal"/>
	<value n="theta_y_Velocity" pn="ωy value" v="0.0"
	unit_magnitude="Rotation/T" state="normal"/>
	<value n="theta_z_Velocity" pn="ωz value" v="0.0"
	unit_magnitude="Rotation/T" state="normal"/>
      </container>
      <container n="Acceleration" pn="Acceleration">
	<value n="Factor_Acceleration" pn="Factor" v="1.0" help="This factor, that can be a number or a formula, multiplies all acceleration values"
	function="[loads_function Fixed_constraints]" function_func="lsdyna::function_loads"/>
	<value n="X_Acceleration" pn="ax value" v="0.0"
	unit_magnitude="L/T^2" state="normal"/>
	<value n="Y_Acceleration" pn="ay value" v="0.0"
	unit_magnitude="L/T^2" state="normal"/>
	<value n="Z_Acceleration" pn="az value" v="0.0"
	unit_magnitude="L/T^2" state="normal"/>
	<value n="theta_x_Acceleration" pn="αx value" v="0.0"
	unit_magnitude="Rotation/T^2" state="normal"/>
	<value n="theta_y_Acceleration" pn="αy value" v="0.0"
	unit_magnitude="Rotation/T^2" state="normal"/>
	<value n="theta_z_Acceleration" pn="αz value" v="0.0"
	unit_magnitude="Rotation/T^2" state="normal"/>
      </container>
    </condition>
    <!-- HIDDEN IN THIS LS-DYNA VERSION -->
    <condition n="Elastic_constraints" pn="Elastic constraints" ov="point,line,surface" ovm="node"  icon="constraints16" state="hidden"
      help="Use this condition to apply an elastic spring to the displacement or rotation of points.\nEvery marked flag will prescribe the spring for that degree of freedom.\nEnter the stiffness constant for every actived degree of freedom in the values fields">
      <symbol proc='lsdyna::draw_symbol_constraints elastic' orientation='localLA Local_axes 1'/>
      <container n="Activation" pn="Activation">
	<value n="X_Constraint" pn="X Constraint" v="1" values="1,0" state="[check_state_inv Plates]">
	  <dependencies node="../../container[@n='Values']/value[@n='X_Value']" att1="state" v1="disabled" condition="boolean(function)"/>
	  <dependencies node="../../container[@n='Values']/value[@n='X_Value']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Values']/value[@n='X_Value']" att1="state" v1="[check_state_inv Plates]" default="1"/>
	</value>
	<value n="Y_Constraint" pn="Y Constraint" v="1" values="1,0" state="[check_state_inv Plates]">
	  <dependencies node="../../container[@n='Values']/value[@n='Y_Value']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Values']/value[@n='Y_Value']" att1="state" v1="[check_state_inv Plates]" default="1"/>
	</value>
	<value n="Z_Constraint" pn="Z Constraint" v="1" values="1,0" state="[check_state_inv {Plane_strain Plane_stress}]">
	  <dependencies node="../../container[@n='Values']/value[@n='Z_Value']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Values']/value[@n='Z_Value']" att1="state" v1="[check_state_inv {Plane_strain Plane_stress}]" default="1"/>
	</value>
	<value n="theta_x_Constraint" pn="θx Constraint" v="1" values="1,0" state="[check_state_inv {Plane_strain Plane_stress Plates Solids}]">
	  <dependencies node="../../container[@n='Values']/value[@n='theta_x_Value']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Values']/value[@n='theta_x_Value']" att1="state" v1="[check_state_inv {Plane_strain Plane_stress Plates Solids}]" default="1"/>
	</value>
	<value n="theta_y_Constraint" pn="θy Constraint" v="1" values="1,0" state="[check_state_inv {Plane_strain Plane_stress Solids}]">
	  <dependencies node="../../container[@n='Values']/value[@n='theta_y_Value']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Values']/value[@n='theta_y_Value']" att1="state" v1="[check_state_inv {Plane_strain Plane_stress Solids}]" default="1"/>
	</value>
	<value n="theta_z_Constraint" pn="θz Constraint" v="1" values="1,0" state="[check_state_inv {Plane_strain Plane_stress Solids}]">
	  <dependencies node="../../container[@n='Values']/value[@n='theta_z_Value']" att1="state" v1="disabled" value="0" att2="v" v2="0.0"/>
	  <dependencies node="../../container[@n='Values']/value[@n='theta_z_Value']" att1="state" v1="[check_state_inv {Plane_strain Plane_stress Solids}]" default="1"/>
	</value>
	<value n="Local_axes" pn="Local axes" v="0" values="0,1" editable='0'
	help="If the direction to prescribe is not coincident with the global axes, it is possible to define a set of local axes and prescribe the displacements related to that local axes"/>
      </container>
      <container n="Values" pn="Values">
	<value n="X_Value" pn="X stiffness" v="0.0"
	  unit_magnitude="point,F/L,line,F/L^2,surface,F/L^3" state="[check_state_inv Plates]"
	function="[constraints_NL_function X_Value Δx L]" pn_function="Kx" function_func="lsdyna::function_non_linear_elastic_constraints"/>
	<value n="Y_Value" pn="Y stiffness" v="0.0"
	  unit_magnitude="point,F/L,line,F/L^2,surface,F/L^3" state="[check_state_inv Plates]"
	  function="[constraints_NL_function Y_Value Δy L]" pn_function="Ky" function_func="lsdyna::function_non_linear_elastic_constraints"/>
	  <value n="Z_Value" pn="Z stiffness" v="0.0"
	    unit_magnitude="point,F/L,line,F/L^2,surface,F/L^3" state="[check_state_inv {Plane_strain Plane_stress}]"
	    function="[constraints_NL_function Z_Value Δz L]" pn_function="Kz" function_func="lsdyna::function_non_linear_elastic_constraints"/>
	    <value n="theta_x_Value" pn="θx stiffness" v="0.0"
	      unit_magnitude="point,F*L/Rotation,line,F*L/(Rotation*L),surface,F*L/(Rotation*L^2)" 
	      state="[check_state_inv {Plane_strain Plane_stress Plates Solids}]"
	      function="[constraints_NL_function theta_x_Value Δθx Rotation]" pn_function="Kθx" function_func="lsdyna::function_non_linear_elastic_constraints"/>
	      <value n="theta_y_Value" pn="θy stiffness" v="0.0"
		unit_magnitude="point,F*L/Rotation,line,F*L/(Rotation*L),surface,F*L/(Rotation*L^2)"
		state="[check_state_inv {Plane_strain Plane_stress Solids}]"
		function="[constraints_NL_function theta_y_Value Δθy Rotation]" pn_function="Kθy" function_func="lsdyna::function_non_linear_elastic_constraints"/>
		<value n="theta_z_Value" pn="θz stiffness" v="0.0"
		  unit_magnitude="point,F*L/Rotation,line,F*L/(Rotation*L),surface,F*L/(Rotation*L^2)"
		  state="[check_state_inv {Plane_strain Plane_stress Solids}]"
		  function="[constraints_NL_function theta_z_Value Δθz Rotation]" pn_function="Kθz" function_func="lsdyna::function_non_linear_elastic_constraints"/>
		</container>
	      </condition>
	<condition n="Connections_rigid" pn="Connections" ov1="line,surface,volume" ov2="line,surface,volume" ovm1="face_element,element" ovm2="face_element,element" ov1p="Master Rigid Body (1D),Master Rigid Body (2D),Master Rigid Body (3D)" ov2p="Slave Rigid Body (1D),Slave Rigid Body  (2D),Slave Rigid Body  (3D)" icon="connections16"
      help="Use this condition to merge rigid bodies. One rigid body, called slave rigid body, is merged to the other one called master rigid body">
      <symbol pos='1' proc='gid_groups_conds::draw_symbol_image connections_rigid' orientation='global'/>
      <symbol pos='2' proc='gid_groups_conds::draw_symbol_image connections_rigid' orientation='global'/>
      </condition>
	      <!-- HIDDEN IN THIS LS-DYNA VERSION --> 
	 <container n="Connections" pn="Connections" icon="connections16" state="hidden">
		<condition n="Disconnect_degrees_all" pn="Disconnect all" ov="point,line"
		  ovm="node" icon="connections16" state="hidden"
		  help="To disconnect some degrees in one point or line, select the degrees to disconnect. All beams or shell elements that contain that point will permmit the relative displacement or rotatation relative to any other element in that point">
		  <symbol proc='gid_groups_conds::draw_symbol_image connections_white16A' orientation='global'/>
		  <value n="X_Constraint" pn="X Constraint" v="0" values="1,0" state="[check_state_inv Plates]">
		  </value>
		  <value n="Y_Constraint" pn="Y Constraint" v="0" values="1,0" state="[check_state_inv Plates]">
		  </value>
		  <value n="Z_Constraint" pn="Z Constraint" v="0" values="1,0" state="[check_state_inv {Plane_strain Plane_stress}]">
		  </value>
		  <value n="theta_x_Constraint" pn="θx Constraint" v="0" values="1,0" state="[check_state_inv {Plane_strain Plane_stress Plates Solids}]">
		  </value>
		  <value n="theta_y_Constraint" pn="θy Constraint" v="0" values="1,0" state="[check_state_inv {Plane_strain Plane_stress Solids}]">
		  </value>
		  <value n="theta_z_Constraint" pn="θz Constraint" v="0" values="1,0" state="[check_state_inv {Plane_strain Plane_stress Solids}]">
		  </value>
		  <value n="Local_axes" pn="Local axes" v="0" values="0,1" editable='0'
		  help="If the direction to disconnect is not coincident with the global axes, it is possible to define a set of local axes and disconnect the degrees related to that local axes"/>
		</condition>
		<condition n="Disconnect_degrees" pn="Disconnect group" ov1="point,line" ov2="line,surface"
		  ov1p="Disconnect point,Disconnect line" 
		  ov2p="Lines group,Surfaces group" ovm1="node" ovm2="element" icon="connections16" state="hidden"
		  help="To disconnect some degrees in one point or line, select the degrees to disconnect ans select a group of beams or shell elements that must form a rigid group disconnected from the rest of the entities attached to that point or line.\nExample: if the 3 rotations are marked in one node and several beam elements are selected that are over this node then, these beams will be rigid between them and will rotate freely related to the rest or beams or shell elements in that node.">
		  <symbol pos='1' proc='gid_groups_conds::draw_symbol_image connections_white16' orientation='global'/>
		  <symbol pos='2' proc='gid_groups_conds::draw_symbol_image connections_white16L' orientation='global'/>
		  <value n="X_Constraint" pn="X Constraint" v="0" values="1,0" state="[check_state_inv Plates]">
		  </value>
		  <value n="Y_Constraint" pn="Y Constraint" v="0" values="1,0" state="[check_state_inv Plates]">
		  </value>
		  <value n="Z_Constraint" pn="Z Constraint" v="0" values="1,0" state="[check_state_inv {Plane_strain Plane_stress}]">
		  </value>
		  <value n="theta_x_Constraint" pn="θx Constraint" v="0" values="1,0" state="[check_state_inv {Plane_strain Plane_stress Plates Solids}]">
		  </value>
		  <value n="theta_y_Constraint" pn="θy Constraint" v="0" values="1,0" state="[check_state_inv {Plane_strain Plane_stress Solids}]">
		  </value>
		  <value n="theta_z_Constraint" pn="θz Constraint" v="0" values="1,0" state="[check_state_inv {Plane_strain Plane_stress Solids}]">
		  </value>
		  <value n="Local_axes" pn="Local axes" v="0" values="0,1" editable='0'
		  help="If the direction to disconnect is not coincident with the global axes, it is possible to define a set of local axes and disconnect the degrees related to that local axes"/>
		</condition>      
      </container>
	      <!--  <condition n="Contacts" pn="Contacts" ov="surface" ovm="element" help="Use this condition to prescribe the contact between selected entities" icon="connections16"> -->
    <!--  <symbol proc='gid_groups_conds::draw_symbol_text Contact' orientation='global'/> -->
    <container pn="Contacts" n="Contacts" icon="connections16" help="Here you can prescribe contacts between different entities">
      <container n="Control" pn="Control" icon="prdata16" help="Choose Control contact Options">
	<value n="Orientation" pn="Orientation" v="1" editable="0" values="1,2,3,4" dict='1,Part input only,2,Part and segment input,3,Inactive (non-forming contact),4,Inactive (forming contact)' help="Optional automatic reorientation of contact interface segments during initialization"/>
	<value n="Maximum_penetration" pn="Maximum penetration" v="4.0" help="Contact surface maximum penetration check multiplier. If small penetration is turned on in contacts, then nodes whose penetration exceeds the product of maximum penetration and the element thickness are set free"/>
	<value n="Penalty_factor" pn="Penalty Factor" v="0.1" help="Scale factor for sliding interface penalties"/>
	<value n="Penalty_stiffness" pn="Penalty stiffness" v="1" values="1,2,3,4,5" dict='1,Minimum of master segment and slave node,2,Use master segment stiffness,3,Use slave node value,4,Slave node value (area or mass weighted),5,Slave node value weighted (inversely proportional to the shell thickness)' help="Penalty stiffness value option"/>
	<value n="Contact_cycles" pn="Contact cycles" v="0" help="Number of cycles between contact searching. Values between 10-100 recommended. 0= set the default value"/>
      </container>
      <blockdata n="Contact_all" pn="All" icon="connections16" help="Apply contact of all defined property groups">
	<value n="Contact_type" pn="Contact all groups" v="No" editable='0' values="No,Automatic_single_surface" dict='No,No,Automatic_single_surface,As an automatic single surface' help="Please specify if you want to contact all entities and in which way (no contact by default)">
	  <dependencies node="../value[@n='Static_friction']" att1="state" v1="disabled" value="No" />
	  <dependencies node="../value[@n='Static_friction']" att1="state" v1="normal" default="1"/>                
	  <dependencies node="../value[@n='Dynamic_friction']" att1="state" v1="disabled" value="No"/>
	  <dependencies node="../value[@n='Dynamic_friction']" att1="state" v1="normal" default="1"/>
	  <dependencies node="../value[@n='Viscous_damping']" att1="state" v1="disabled" value="No" />
	  <dependencies node="../value[@n='Viscous_damping']" att1="state" v1="normal" default="1"/>                
	  <dependencies node="../value[@n='Small_penetration']" att1="state" v1="disabled" value="No"/>
	  <dependencies node="../value[@n='Small_penetration']" att1="state" v1="normal" default="1"/>
	  <dependencies node="../value[@n='Slave_penalty']" att1="state" v1="disabled" value="No" />
	  <dependencies node="../value[@n='Slave_penalty']" att1="state" v1="normal" default="1"/>                
	  <dependencies node="../value[@n='Master_penalty']" att1="state" v1="disabled" value="No"/>
	  <dependencies node="../value[@n='Master_penalty']" att1="state" v1="normal" default="1"/>
	</value>
	<value n="Static_friction" pn="Static Friction" v="0" state="disabled" help="Static coefficient of friction (> 0 and not equal to 2)"/>
	<value n="Dynamic_friction" pn="Dynamic Friction" v="0" state="disabled" help="Dynamic coefficient of friction. The frictional coefficient is assumed to be dependent on the relative velocity v-rel of the surfaces in contact"/>
	<value n="Viscous_damping" pn="Viscous Damping" v="0" state="disabled" help="Viscous damping coefficient in percent of critical. In order to avoid undesirable oscillation in contact, e.g., for sheet forming simulation, a contact damping perpendicular to the contacting surfaces is applied"/>
	<value n="Small_penetration" pn="Small Penetration Search" v="0" values="0,1,2" state="disabled" dict='0,Check turned off,1,Check turned on,2,Check on (shortest diagonal)' help="Small penetration in contact search option"/>
	<value n="Slave_penalty" pn="Slave Penalty" v="1.0" state="disabled" help="Scale factor on default slave penalty stiffness, see also Control Data"/>
	<value n="Master_penalty" pn="Master Penalty" v="1.0" state="disabled" help="Scale factor on default master penalty stiffness, see also Control Data"/>
      </blockdata>
      <!-- OVER CHANGED ONLY TO SYMBOL PRINTING -->
      <container pn="Single" n="Single_contacts" help="Use this condition to prescribe single contact between selected entities. You must select them by Property Group (partID)" icon="connections16"> 
	<blockdata pn="Automatic Contact" n="Automatic_contact" name="Contact 1" sequence='1' sequence_type='non_void_deactivated' active='0' editable_name='unique' icon="connections16"> 
	  <value n="Contact_type" pn="Type" v="Automatic_single_surface" values="Automatic_single_surface" dict='Automatic_single_surface,Automatic single surface' editable="0" state="normal"/>
	  <value n="Static_friction" pn="Static Friction" v="0" help="Static coefficient of friction (> 0 and not equal to 2)"/>
	  <value n="Dynamic_friction" pn="Dynamic Friction" v="0" help="Dynamic coefficient of friction. The frictional coefficient is assumed to be dependent on the relative velocity v-rel of the surfaces in contact"/>
	  <value n="Viscous_damping" pn="Viscous Damping" v="0" help="Viscous damping coefficient in percent of critical. In order to avoid undesirable oscillation in contact, e.g., for sheet forming simulation, a contact damping perpendicular to the contacting surfaces is applied"/>
	  <value n="Small_penetration" pn="Small Penetration Search" v="0" values="0,1,2" dict='0,Check turned off,1,Check turned on,2,Check on (shortest diagonal)' help="Small penetration in contact search option"/>
	  <value n="Slave_penalty" pn="Slave Penalty" v="1.0" help="Scale factor on default slave penalty stiffness, see also Control Data"/>
	  <value n="Master_penalty" pn="Master Penalty" v="1.0" help="Scale factor on default master penalty stiffness, see also Control Data"/>
	  <condition n="Groups" pn="Groups" ov="line,surface,volume" ovm="face_element,element" icon="connections16">
	    <symbol proc='gid_groups_conds::draw_symbol_image connections_single16' orientation='global'/>  
	  </condition>
	</blockdata>
      </container>
      <!--                 <container pn="Contacts" n="Contacts" help="Use this condition to prescribe the contact between selected entities. Yo can select them by geometry or mesh, as well as by an existing Property Group" icon="connections16">  -->
      <!--                     <blockdata pn="Contact" n="Contact" name="Contact 1" sequence='1' sequence_type='non_void_deactivated' active='0' editable_name='unique' icon="connections16">  -->
      <!-- THERE'S A PROBLEM UPDATING VALUES OF CONTACT TYPE SECTION --> 
      <!--                       <value n="Contact_type" pn="Contact type" v="Surface_to_surface" values="Surface_to_surface,Nodes_to_surface" dict='Surface_to_surface,Surface to Surface,Nodes_to_surface,Nodes to Surface' editable="0" state="normal" actualize_tree='1'/> -->
      <!--HIDDEN AT THE MOMENT IN THIS LSDYNA VERSION--> 
      <!--                       <value n="Penalty" pn="Penalty" v="1.0e10" unit_magnitude="F/L" units="N/m" state="hidden"/> -->
      <!--                       <condition n="Master_entity" pn="Master Entity" ov="[check_contact_type_over ov]" ovm="[check_contact_type_over ovm]" icon="connections16" actualize_tree='1'> -->
      <!--                       <symbol proc='gid_groups_conds::draw_symbol_text Contact' orientation='global'/>   -->
      <!--                       <value n="Criteria" pn="Writing Criteria" v="Surface" values="Surface,Nodes" dict='Surface,Surface,Nodes,Nodes' state="[check_contact_type_criteria]" actualize_tree='1'/> -->
      <!--                       </condition> -->
      <!--                       <condition n="Slave_entity" pn="Slave Entity" ov="[check_contact_type_over ov]" ovm="[check_contact_type_over ovm]" icon="connections16" actualize_tree='1'> -->
      <!--                       <value n="Criteria" pn="Writing Criteria" v="Nodes" values="Surface,Nodes" dict='Surface,Surface,Nodes,Nodes' state="[check_contact_type_criteria]" actualize_tree='1'/> -->
      <!--                       <symbol proc='gid_groups_conds::draw_symbol_text Contact' orientation='global'/>  -->
      <!--                       </condition>  -->
      <!--                     </blockdata> -->
      <!--                   </container> -->
      <condition n="Contacts" pn="Master Slave" ov1="point,line,surface,volume" ov2="surface,surface,surface,surface" ovm1="node,face_element,element" ovm2="face_element,element,element"
	ov1p="Slave (point/node),Slave (line/1D element),Slave (surface/2D element),Slave (volume/3D element)" ov2p="Master (surface/2D element),Master (surface/2D element),Master (surface/2D element),Master (surface/2D element)" icon="connections16"
	help="Use this condition to prescribe Master Slave contacts between selected entities. Yo can select them by geometry or mesh, as well as by an existing Property Group">
	<symbol pos='1' proc='gid_groups_conds::draw_symbol_image connections_white16L' orientation='global'/>
	<symbol pos='2' proc='gid_groups_conds::draw_symbol_image connections_white16' orientation='global'/>
	<value n="Contact_type" pn="Contact type" v="Surface_to_surface" values="Surface_to_surface,Nodes_to_surface,Automatic_nodes_to_surface,Automatic_surface_to_surface,Rigid_body_one_way" dict='Surface_to_surface,Surface to Surface,Nodes_to_surface,Nodes to Surface,Automatic_nodes_to_surface,Automatic Nodes to Surface,Automatic_surface_to_surface,Automatic Surface to Surface,Rigid_body_one_way,Rigid Body one way to Rigid Body' editable="0" state="normal">
	  <dependencies node="../value[@n='Factor']" att1="state" v1="normal" value="Rigid_body_one_way"/>
	  <dependencies node="../value[@n='Factor']" att1="state" v1="hidden" default="1"/>
	  <dependencies node="../value[@n='Force_method']" att1="state" v1="normal" value="Rigid_body_one_way"/>
	  <dependencies node="../value[@n='Force_method']" att1="state" v1="hidden" default="1"/>
	  <dependencies node="../value[@n='Unloading_stiffness']" att1="state" v1="normal" value="Rigid_body_one_way"/>
	  <dependencies node="../value[@n='Unloading_stiffness']" att1="state" v1="hidden" default="1"/>
	</value>
	<value n="Static_friction" pn="Static Friction" v="0" help="Static coefficient of friction (> 0 and not equal to 2)"/>
	<value n="Dynamic_friction" pn="Dynamic Friction" v="0" help="Dynamic coefficient of friction. The frictional coefficient is assumed to be dependent on the relative velocity v-rel of the surfaces in contact"/>
	<value n="Viscous_damping" pn="Viscous Damping" v="0" help="Viscous damping coefficient in percent of critical. In order to avoid undesirable oscillation in contact, e.g., for sheet forming simulation, a contact damping perpendicular to the contacting surfaces is applied"/>
	<value n="Small_penetration" pn="Small Penetration Search" v="0" values="0,1,2" dict='0,Check turned off,1,Check turned on,2,Check on (shortest diagonal)' help="Small penetration in contact search option"/>
	<value n="Slave_penalty" pn="Slave Penalty" v="1.0" help="Scale factor on default slave penalty stiffness, see also Control Data"/>
	<value n="Master_penalty" pn="Master Penalty" v="1.0" help="Scale factor on default master penalty stiffness, see also Control Data"/>
	<!-- RIGID BODY TO RIGID BODY PARAMETERS -->
	<value n="Factor" pn="Curve" v="" pn_function="F/P" help="Please edit a curve giving force versus penetration behavior"
	function="[loads_function Rigid]" function_func="lsdyna::function_loads"/>
	<value n="Force_method" pn="Force calc. method" v="1" values="1,2,3,4" dict='1,Force (surface) vs penetration,2,Force (node) vs penetration,3,Pressure vs penetration,4,Normal force vs soft penetration' 
	help="Please select a force calculation method:\n1)Curve=total normal force on surface versus maximum penetration of any node\n2)Curve=normal force on each node versus penetration of node through the surface\n3)Curve=normal pressure versus penetration of node through the surface\n4)Curve=total normal force versus maximum soft penetration"/>
	<value n="Unloading_stiffness" pn="Unloading Stiffness" v="" help="Unloading stiffness. The default (leave it blank) is to unload along the defined curve. This should not be larger than the maximum value used in the defined curve."/>
      </condition>
    </container>
    <!--                   HIDDEN BECAUSE IT COULD BE USEFUL IN THE FUTURE -->
    <condition n="Extra_nodes" pn="Extra nodes" state="hidden" ov1="point,line,surface,volume" ov2="point,line,surface,volume" ovm1="node,face_element,element" ovm2="node,face_element,element"
      ov1p="Rigid Body,Rigid Body,Rigid Body,Rigid Body" ov2p="Nodes,Nodes,Nodes,Nodes" icon="connections16"
      help="Use this condition to prescribe Master Slave contacts between selected entities. Yo can select them by geometry or mesh, as well as by an existing Property Group">
      <symbol pos='1' proc='gid_groups_conds::draw_symbol_text Contact' orientation='global'/>
      <symbol pos='2' proc='gid_groups_conds::draw_symbol_text Contact' orientation='global'/>
    </condition>
    <!--         OVER CHANGED ONLY TO SYMBOL PRINTING (ancient code) -->
    <!--   <condition n="Joints" pn="Joints" ov1="point" ov2="point" ovm1="node" ovm2="node" ov1p="First Entity" ov2p="Second Entity" icon="connections16" -->
    <!--       help="Use this condition to define joints between different property groups"> -->

    <condition n="Joints" pn="Joints" ov1="line,surface,volume" ov2="line,surface,volume" ovm1="face_element,element" ovm2="face_element,element" ov1p="First Entity (1D),First Entity (2D),First Entity (3D)" ov2p="Second Entity (1D),Second Entity (2D),Second Entity (3D)" icon="connections16"
      help="Use this condition to define joints between different property groups">
      <symbol pos='1' proc='gid_groups_conds::draw_symbol_image spherical16' orientation='global'/>
      <symbol pos='2' proc='gid_groups_conds::draw_symbol_image spherical16' orientation='global'/>
      <edit_command n="draw_points" pn="Draw Joint Points" proc="draw_points" help="Click to draw joint points. Please press ESC when finished" actualize="1" actualize_tree='1'/>   
      <container n="Data" pn="Data" icon="connections16" help="Please specify joint general data">
	<value n="Joint_type" pn="Joint type" v="Spherical" values="Spherical,Revolute,Translational" dict='Spherical,Spherical,Revolute,Revolute,Translational,Translational' editable="0" state="normal"
	  help="Spherical Joint: Free rotation around first point\n\nRevolute Joint: Rotation around the axis defined by first and second point\n\nTranslational Joint: Allows one part to only translate along a vector (defined by first and second point) with respect to another part. Third node is required off the axis to supply rotational constraint. The only force active between these three nodes acts in the direction normal to the plane that they define"  
	  actualize="1" actualize_tree='1'>
	  <dependencies node="../../container[@n='Second']/value[@n='x_2']" att1="state" v1="disabled" value="Spherical" actualize="1"/>
	  <dependencies node="../../container[@n='Second']/value[@n='x_2']" att1="state" v1="normal" not_value="Spherical" actualize="1"/>
	  <dependencies node="../../container[@n='Second']/value[@n='x_2']" att1="state" v1="normal" default="1" actualize="1"/>

	  <dependencies node="../../container[@n='Second']/value[@n='y_2']" att1="state" v1="disabled" value="Spherical" actualize="1"/>
	  <dependencies node="../../container[@n='Second']/value[@n='y_2']" att1="state" v1="normal" not_value="Spherical" actualize="1"/>
	  <dependencies node="../../container[@n='Second']/value[@n='y_2']" att1="state" v1="normal" default="1" actualize="1"/>

	  <dependencies node="../../container[@n='Second']/value[@n='z_2']" att1="state" v1="disabled" value="Spherical" actualize="1"/>
	  <dependencies node="../../container[@n='Second']/value[@n='z_2']" att1="state" v1="normal" not_value="Spherical" actualize="1"/>
	  <dependencies node="../../container[@n='Second']/value[@n='z_2']" att1="state" v1="normal" default="1" actualize="1"/>

	  <dependencies node="../../container[@n='Second']/value[@n='Automatic_2']" att1="state" v1="disabled" value="Spherical" actualize="1"/>
	  <dependencies node="../../container[@n='Second']/value[@n='Automatic_2']" att1="state" v1="normal" not_value="Spherical" actualize="1"/>
	  <dependencies node="../../container[@n='Second']/value[@n='Automatic_2']" att1="state" v1="normal" default="1" actualize="1"/>


	  <dependencies node="../../container[@n='Third']/value[@n='x_3']" att1="state" v1="normal" value="Translational" actualize="1"/>
	  <dependencies node="../../container[@n='Third']/value[@n='x_3']" att1="state" v1="disabled" not_value="Translational" actualize="1"/>
	  <dependencies node="../../container[@n='Third']/value[@n='x_3']" att1="state" v1="disabled" default="1" actualize="1"/>

	  <dependencies node="../../container[@n='Third']/value[@n='y_3']" att1="state" v1="normal" value="Translational" actualize="1"/>
	  <dependencies node="../../container[@n='Third']/value[@n='y_3']" att1="state" v1="disabled" not_value="Translational" actualize="1"/>
	  <dependencies node="../../container[@n='Third']/value[@n='y_3']" att1="state" v1="disabled" default="1" actualize="1"/>

	  <dependencies node="../../container[@n='Third']/value[@n='z_3']" att1="state" v1="normal" value="Translational" actualize="1"/>
	  <dependencies node="../../container[@n='Third']/value[@n='z_3']" att1="state" v1="disabled" not_value="Translational" actualize="1"/>
	  <dependencies node="../../container[@n='Third']/value[@n='z_3']" att1="state" v1="disabled" default="1" actualize="1"/>

	  <dependencies node="../../container[@n='Third']/value[@n='Automatic_3']" att1="state" v1="normal" value="Translational" actualize="1"/>
	  <dependencies node="../../container[@n='Third']/value[@n='Automatic_3']" att1="state" v1="disabled" not_value="Translational" actualize="1"/>
	  <dependencies node="../../container[@n='Third']/value[@n='Automatic_3']" att1="state" v1="disabled" default="1" actualize="1"/>
	</value>
	<value n='Relative_penalty' pn='Relative penalty' v='1.0' editable='1' state="normal" help='Relative penalty stiffness'/>
	<value n='Damping_factor' pn='Damping factor' v='0.0' editable='1' state="normal" help='Damping Scale factor on default damping value'/>
	<value n="Define_stiffness" pn="Stiffness Joint" v="0" values="1,0" actualize="1" actualize_tree='1' help="Define optional rotational and translational joint stiffness">
	  <dependencies node="../value[@n='Axes_system_1']" att1="state" v1="normal" value="1" actualize="1"/> 
	  <dependencies node="../value[@n='Axes_system_1']" att1="state" v1="hidden" default="1" actualize="1"/>
	  <dependencies node="../value[@n='Axes_system_2']" att1="state" v1="normal" value="1" actualize="1"/> 
	  <dependencies node="../value[@n='Axes_system_2']" att1="state" v1="hidden" default="1" actualize="1"/> 

	  <dependencies node="../../container[@n='Stiffness_curves']/value[@n='Factor_Mx']" att1="state" v1="normal" value="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stiffness_curves']/value[@n='Factor_Mx']" att1="state" v1="disabled" default="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stiffness_curves']/value[@n='Factor_My']" att1="state" v1="normal" value="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stiffness_curves']/value[@n='Factor_My']" att1="state" v1="disabled" default="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stiffness_curves']/value[@n='Factor_Mz']" att1="state" v1="normal" value="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stiffness_curves']/value[@n='Factor_Mz']" att1="state" v1="disabled" default="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stiffness_curves']/value[@n='Factor_Mdx']" att1="state" v1="normal" value="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stiffness_curves']/value[@n='Factor_Mdx']" att1="state" v1="disabled" default="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stiffness_curves']/value[@n='Factor_Mdy']" att1="state" v1="normal" value="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stiffness_curves']/value[@n='Factor_Mdy']" att1="state" v1="disabled" default="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stiffness_curves']/value[@n='Factor_Mdz']" att1="state" v1="normal" value="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stiffness_curves']/value[@n='Factor_Mdz']" att1="state" v1="disabled" default="1" actualize="1"/>

	  <dependencies node="../../container[@n='Stiffness_limits']/value[@n='Mx_friction']" att1="state" v1="normal" value="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stiffness_limits']/value[@n='Mx_friction']" att1="state" v1="disabled" default="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stiffness_limits']/value[@n='My_friction']" att1="state" v1="normal" value="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stiffness_limits']/value[@n='My_friction']" att1="state" v1="disabled" default="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stiffness_limits']/value[@n='Mz_friction']" att1="state" v1="normal" value="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stiffness_limits']/value[@n='Mz_friction']" att1="state" v1="disabled" default="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stiffness_limits']/value[@n='Stiffness_x']" att1="state" v1="normal" value="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stiffness_limits']/value[@n='Stiffness_x']" att1="state" v1="disabled" default="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stiffness_limits']/value[@n='Stiffness_y']" att1="state" v1="normal" value="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stiffness_limits']/value[@n='Stiffness_y']" att1="state" v1="disabled" default="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stiffness_limits']/value[@n='Stiffness_z']" att1="state" v1="normal" value="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stiffness_limits']/value[@n='Stiffness_z']" att1="state" v1="disabled" default="1" actualize="1"/>          

	  <dependencies node="../../container[@n='Stop_angles']/value[@n='Angle_x_positive']" att1="state" v1="normal" value="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stop_angles']/value[@n='Angle_x_positive']" att1="state" v1="disabled" default="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stop_angles']/value[@n='Angle_x_negative']" att1="state" v1="normal" value="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stop_angles']/value[@n='Angle_x_negative']" att1="state" v1="disabled" default="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stop_angles']/value[@n='Angle_y_positive']" att1="state" v1="normal" value="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stop_angles']/value[@n='Angle_y_positive']" att1="state" v1="disabled" default="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stop_angles']/value[@n='Angle_y_negative']" att1="state" v1="normal" value="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stop_angles']/value[@n='Angle_y_negative']" att1="state" v1="disabled" default="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stop_angles']/value[@n='Angle_z_positive']" att1="state" v1="normal" value="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stop_angles']/value[@n='Angle_z_positive']" att1="state" v1="disabled" default="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stop_angles']/value[@n='Angle_z_negative']" att1="state" v1="normal" value="1" actualize="1"/>
	  <dependencies node="../../container[@n='Stop_angles']/value[@n='Angle_z_negative']" att1="state" v1="disabled" default="1" actualize="1"/> 
	</value>
	<!-- VALUES LIST MUST BE DEFINED HERE -->
	<value n="Axes_system_1" pn="First Entity Stiffness axes" v="global" values="global,local" dict='global,global,local,local' help="Select which type of axes system will have the first selected entity. Local axes must be defined with the button placed on the right">
	  <edit_command n="coordinate_system_1" pn="Pick coordinate system 1" icon="axes_system16" proc="pick_coordinate_system 1" actualize="1" help="Select which type of axes system will have the first selected entity. Local axes must be defined with the button placed on the right" actualize_tree='1'/> 
	</value>
	<value n="Axes_system_2" pn="Second Entity Stiffness axes" v="global" values="global,local,same" dict='global,global,local,local,same,same as first entity' help="Select which type of axes system will have the second selected entity. Local axes must be defined with the button placed on the right">
	  <edit_command n="coordinate_system_2" pn="Pick coordinate system 2" icon="axes_system16" proc="pick_coordinate_system 2" actualize="1" help="Select which type of axes system will have the second selected entity. Local axes must be defined with the button placed on the right" actualize_tree='1'/> 
	</value>

	<!-- COORDINATE SYSTEM DEFINITION POINTS (NOW HIDDEN) -->
	<value n="x_center_1" pn="x center 1" v="0" unit_magnitude="L" state="hidden" editable='1' help="x coordinate of the center of coordinate system 1 (hidden)" actualize="1" actualize_tree='1'/>
	<value n="y_center_1" pn="y center 1" v="0" unit_magnitude="L" state="hidden" editable='1' help="y coordinate of the center of coordinate system 1 (hidden)" actualize="1" actualize_tree='1'/>
	<value n="z_center_1" pn="z center 1" v="0" unit_magnitude="L" state="hidden" editable='1' help="z coordinate of the center of coordinate system 1 (hidden)" actualize="1" actualize_tree='1'/>
	<value n="x_posx_1" pn="x posx 1" v="0" unit_magnitude="L" state="hidden" editable='1' help="x coordinate of the positive x point of coordinate system 1 (hidden)" actualize="1" actualize_tree='1'/>
	<value n="y_posx_1" pn="y posx 1" v="0" unit_magnitude="L" state="hidden" editable='1' help="y coordinate of the positive x point of coordinate system 1 (hidden)" actualize="1" actualize_tree='1'/>
	<value n="z_posx_1" pn="z posx 1" v="0" unit_magnitude="L" state="hidden" editable='1' help="z coordinate of the positive x point of coordinate system 1 (hidden)" actualize="1" actualize_tree='1'/>
	<value n="x_posz_1" pn="x posz 1" v="0" unit_magnitude="L" state="hidden" editable='1' help="x coordinate of the positive z point of coordinate system 1 (hidden)" actualize="1" actualize_tree='1'/>
	<value n="y_posz_1" pn="y posz 1" v="0" unit_magnitude="L" state="hidden" editable='1' help="y coordinate of the positive z point of coordinate system 1 (hidden)" actualize="1" actualize_tree='1'/>
	<value n="z_posz_1" pn="z posz 1" v="0" unit_magnitude="L" state="hidden" editable='1' help="z coordinate of the positive z point of coordinate system 1 (hidden)" actualize="1" actualize_tree='1'/>

	<value n="x_center_2" pn="x center 2" v="0" unit_magnitude="L" state="hidden" editable='1' help="x coordinate of the center of coordinate system 2 (hidden)" actualize="1" actualize_tree='1'/>
	<value n="y_center_2" pn="y center 2" v="0" unit_magnitude="L" state="hidden" editable='1' help="y coordinate of the center of coordinate system 2 (hidden)" actualize="1" actualize_tree='1'/>
	<value n="z_center_2" pn="z center 2" v="0" unit_magnitude="L" state="hidden" editable='1' help="z coordinate of the center of coordinate system 2 (hidden)" actualize="1" actualize_tree='1'/>
	<value n="x_posx_2" pn="x posx 2" v="0" unit_magnitude="L" state="hidden" editable='1' help="x coordinate of the positive x point of coordinate system 2 (hidden)" actualize="1" actualize_tree='1'/>
	<value n="y_posx_2" pn="y posx 2" v="0" unit_magnitude="L" state="hidden" editable='1' help="y coordinate of the positive x point of coordinate system 2 (hidden)" actualize="1" actualize_tree='1'/>
	<value n="z_posx_2" pn="z posx 2" v="0" unit_magnitude="L" state="hidden" editable='1' help="z coordinate of the positive x point of coordinate system 2 (hidden)" actualize="1" actualize_tree='1'/>
	<value n="x_posz_2" pn="x posz 2" v="0" unit_magnitude="L" state="hidden" editable='1' help="x coordinate of the positive z point of coordinate system 2 (hidden)" actualize="1" actualize_tree='1'/>
	<value n="y_posz_2" pn="y posz 2" v="0" unit_magnitude="L" state="hidden" editable='1' help="y coordinate of the positive z point of coordinate system 2 (hidden)" actualize="1" actualize_tree='1'/>
	<value n="z_posz_2" pn="z posz 2" v="0" unit_magnitude="L" state="hidden" editable='1' help="z coordinate of the positive z point of coordinate system 2 (hidden)" actualize="1" actualize_tree='1'/>
	
	</container>    
	<container n="First" pn="Point 1" icon="connections16" help="Please enter first joint point coordinates">
	  <value n="Automatic" pn="Automatic" v="Click to select first point from the screen" help="You can both pick the point up from the screen or enter its coordinates manually">
	    <edit_command n="pick_points" pn="Pick first point" proc="pick_points 1" actualize="1" help="Click to pick the first point up from the screen" actualize_tree='1' icon="select_point16"/> 
	  </value>
	  <value n="x" pn="P1 x" v="0" unit_magnitude="L" editable='1' help="x coordinate of the first joint point" actualize="1" actualize_tree='1'/>
	  <value n="y" pn="P1 y" v="0" unit_magnitude="L" editable='1' help="y coordinate of the first joint point" actualize="1" actualize_tree='1'/>
	  <value n="z" pn="P1 z" v="0" unit_magnitude="L" editable='1' help="z coordinate of the first joint point" actualize="1" actualize_tree='1'/>
	  <!--         WE ADD MESH UNITS INFORMATION (TO PUT IT AS COORDINATE UNITS) -->
	  <value n='units_mesh_auxiliar' pn='Mesh units auxiliar' state="hidden" editable='0' v='{/lsdyna_data/units/unit_mesh}'/>
	</container>
	<container n="Second" pn="Point 2" icon="connections16" help="Please enter second joint point coordinates">
	  <value n="Automatic_2" pn="Automatic" v="Click to select second point from the screen" help="You can both pick the point up from the screen or enter its coordinates manually">
	    <edit_command n="pick_points_2" pn="Pick second point" proc="pick_points 2" actualize="1" help="Click to pick the second point up from the screen" actualize_tree='1' icon="select_point16"/> 
	  </value>
	  <value n="x_2" pn="P2 x" v="0" unit_magnitude="L" editable='1' help="x coordinate of the second joint point" actualize="1" actualize_tree='1'/>
	  <value n="y_2" pn="P2 y" v="0" unit_magnitude="L" editable='1' help="y coordinate of the second joint point" actualize="1" actualize_tree='1'/>
	  <value n="z_2" pn="P2 z" v="0" unit_magnitude="L" editable='1' help="z coordinate of the second joint point" actualize="1" actualize_tree='1'/>
	</container>
      <container n="Third" pn="Point 3" icon="connections16" help="Please enter third joint point coordinates">
	<value n="Automatic_3" pn="Automatic" v="Click to select third point from the screen" help="You can both pick the point up from the screen or enter its coordinates manually">
	  <edit_command n="pick_points_3" pn="Pick third point" proc="pick_points 3" actualize="1" help="Click to pick the third point up from the screen" actualize_tree='1' icon="select_point16"/> 
	</value>
	<value n="x_3" pn="P3 x" v="0" unit_magnitude="L" editable='1' help="x coordinate of the third joint point" actualize="1" actualize_tree='1'/>
	<value n="y_3" pn="P3 y" v="0" unit_magnitude="L" editable='1' help="y coordinate of the third joint point" actualize="1" actualize_tree='1'/>
	<value n="z_3" pn="P3 z" v="0" unit_magnitude="L" editable='1' help="z coordinate of the third joint point" actualize="1" actualize_tree='1'/>
      </container>       
  <container n="Stiffness_curves" pn="Stiffness Curves" icon="connections16" help="Please edit stiffness curves for this joint">          
	  <value n="Factor_Mx" pn="Mx/rotation curve" v="" help="This factor must be a curve describing x-moment versus rotation relationship. If no function defined, the applied moment is set to 0.0"
	  function="[loads_function Joint_stiffness_displacement]" pn_function="Mx" function_func="lsdyna::function_loads"/>
	  <value n="Factor_My" pn="My/rotation curve" v="" help="This factor must be a curve describing y-moment versus rotation relationship. If no function defined, the applied moment is set to 0.0"
	  function="[loads_function Joint_stiffness_displacement]" pn_function="My" function_func="lsdyna::function_loads"/>
	  <value n="Factor_Mz" pn="Mz/rotation curve" v="" help="This factor must be a curve describing z-moment versus rotation relationship. If no function defined, the applied moment is set to 0.0"
	  function="[loads_function Joint_stiffness_displacement]" pn_function="Mz" function_func="lsdyna::function_loads"/>

	  <value n="Factor_Mdx" pn="Mdamp x/rotation curve" v="" help="This factor must be a curve describing x damping moment versus rate of rotation per unit time. If no function defined, damping is not considered"
	  function="[loads_function Joint_stiffness_velocity]" pn_function="Mdamp x" function_func="lsdyna::function_loads"/>
	  <value n="Factor_Mdy" pn="Mdamp y/rotation curve" v="" help="This factor must be a curve describing y damping moment versus rate of rotation per unit time. If no function defined, damping is not considered"
	  function="[loads_function Joint_stiffness_velocity]" pn_function="Mdamp y" function_func="lsdyna::function_loads"/>
	  <value n="Factor_Mdz" pn="Mdamp z/rotation curve" v="" help="This factor must be a curve describing z damping moment versus rate of rotation per unit time. If no function defined, damping is not considered"
	  function="[loads_function Joint_stiffness_velocity]" pn_function="Mdamp z" function_func="lsdyna::function_loads"/> 
    </container>
    <container n="Stiffness_limits" pn="Stiffness Limits" icon="connections16" help="Please specify limiting frictional moments and elastic stiffness for this joint">  

	  <value n="Mx_friction" pn="Mx friction" v="0.0" unit_magnitude="F*L" help="Frictional moment limiting value for x-rotation. If zero, friction is inactive for x-rotation. This option may also be thought of as an elastic-plastic spring."/>
	  <value n="My_friction" pn="My friction" v="0.0" unit_magnitude="F*L" help="Frictional moment limiting value for y-rotation. If zero, friction is inactive for x-rotation. This option may also be thought of as an elastic-plastic spring."/>
	  <value n="Mz_friction" pn="Mz friction" v="0.0" unit_magnitude="F*L" help="Frictional moment limiting value for z-rotation. If zero, friction is inactive for x-rotation. This option may also be thought of as an elastic-plastic spring."/>

	  <value n="Stiffness_x" pn="Elastic Stiffness x" v="0.0" unit_magnitude="F*L/Rotation" help="Elastic stiffness per rotational unit for friction and stop angles for x-rotation. If zero, friction and stop angles are inactive for x-rotation"/>
	  <value n="Stiffness_y" pn="Elastic Stiffness y" v="0.0" unit_magnitude="F*L/Rotation" help="Elastic stiffness per rotational unit for friction and stop angles for y-rotation. If zero, friction and stop angles are inactive for y-rotation"/>
	  <value n="Stiffness_z" pn="Elastic Stiffness z" v="0.0" unit_magnitude="F*L/Rotation" help="Elastic stiffness per rotational unit for friction and stop angles for z-rotation. If zero, friction and stop angles are inactive for z-rotation"/>
</container>
<container n="Stop_angles" pn="Stop Angles" icon="connections16" help="Please specify stop angles for this joint"> 

	  <value n="Angle_x_positive" pn="Stop angle x+" v="0.0" unit_magnitude="Rotation" help="Stop angle for positive x-rotation. If zero, stop angle is ignored."/>
	  <value n="Angle_x_negative" pn="Stop angle x-" v="0.0" unit_magnitude="Rotation" help="Stop angle for negative x-rotation. If zero, stop angle is ignored."/>
	  <value n="Angle_y_positive" pn="Stop angle y+" v="0.0" unit_magnitude="Rotation" help="Stop angle for positive y-rotation. If zero, stop angle is ignored."/>
	  <value n="Angle_y_negative" pn="Stop angle y-" v="0.0" unit_magnitude="Rotation" help="Stop angle for negative y-rotation. If zero, stop angle is ignored."/>
	  <value n="Angle_z_positive" pn="Stop angle z+" v="0.0" unit_magnitude="Rotation" help="Stop angle for positive z-rotation. If zero, stop angle is ignored."/>
	  <value n="Angle_z_negative" pn="Stop angle z-" v="0.0" unit_magnitude="Rotation" help="Stop angle for negative z-rotation. If zero, stop angle is ignored."/> 
    </container>
  </condition>
</container> 
  <container n="Initial_conditions" pn="Initial conditions" icon="dynamic_analysis16" state="normal" help="Use this condition to prescribe the user-defined initial velocities or rotational velocities">
    <blockdata n="Initial_conditions_all" pn="All" icon="dynamic_analysis16" state="normal" help="Use this condition to prescribe the user-defined initial velocities or rotational velocities to all entities">
      <!--HIDDEN IN THIS LSDYNA VERSION AT THE MOMENT-->
      <value n="Disp_x" pn="Displacement x" v="0.0" state="hidden" unit_magnitude="L"/>
      <value n="Disp_y" pn="Displacement y" v="0.0" state="hidden" unit_magnitude="L"/>
      <value n="Disp_z" pn="Displacement z" v="0.0" state="hidden" unit_magnitude="L"/>
      <value n="Vel_x" pn="Velocity x" v="0.0" unit_magnitude="L/T"/>
      <value n="Vel_y" pn="Velocity y" v="0.0" unit_magnitude="L/T"/>
      <value n="Vel_z" pn="Velocity z" v="0.0" unit_magnitude="L/T"/>
      <value n="W_x" pn="Rotational Velocity x" v="0.0" unit_magnitude="Rotation/T"/>
      <value n="W_y" pn="Rotational Velocity y" v="0.0" unit_magnitude="Rotation/T"/>
      <value n="W_z" pn="Rotational Velocity z" v="0.0" unit_magnitude="Rotation/T"/>
    </blockdata>
    <condition n="Initial_conditions_group" pn="Selected" ov="point,line,surface,volume" ovm="node" icon="dynamic_analysis16" 
      help="Use this condition to prescribe the user-defined initial velocities or rotational velocities to a selected group">
      <symbol proc='gid_groups_conds::draw_symbol_image dynamic_analysis_white16' orientation='global'/>
      <!--HIDDEN IN THIS LSDYNA VERSION AT THE MOMENT-->
      <value n="Disp_x" pn="Displacement x" v="0.0" state="hidden" unit_magnitude="L"/>
      <value n="Disp_y" pn="Displacement y" v="0.0" state="hidden" unit_magnitude="L"/>
      <value n="Disp_z" pn="Displacement z" v="0.0" state="hidden" unit_magnitude="L"/>
      <value n="Vel_x" pn="Velocity x" v="0.0" unit_magnitude="L/T"/>
      <value n="Vel_y" pn="Velocity y" v="0.0" unit_magnitude="L/T"/>
      <value n="Vel_z" pn="Velocity z" v="0.0" unit_magnitude="L/T"/>
      <value n="W_x" pn="Rotational Velocity x" v="0.0" unit_magnitude="Rotation/T"/>
      <value n="W_y" pn="Rotational Velocity y" v="0.0" unit_magnitude="Rotation/T"/>
      <value n="W_z" pn="Rotational Velocity z" v="0.0" unit_magnitude="Rotation/T"/>
    </condition>
  </container>
  <!-- HIDDEN IN THIS LS-DYNA VERSION -->
  <container n="Dynamic_conditions" pn="Dynamic conditions" state="hidden" icon="dynamic_analysis16">
    <!-- HIIDEN IN THIS LS-DYNA VERSION -->
    <condition n="Masses" pn="Masses" ov="point,line,surface" ovm="node" icon="masses16" state="hidden"
      help="Use this condition to assign translational o rotational masses to entities for the dynamic analysis">
      <symbol proc='gid_groups_conds::draw_symbol_image masses_white16' orientation='global'/>
      <dependencies node="value[@n='Mass_x' or @n='Mass_y' or @n='Mass_z']" att1="state" v1="normal"
      condition="@ov='point'"/>
      <dependencies node="value[@n='Mass_x' or @n='Mass_y' or @n='Mass_z']" att1="state" v1="hidden"
      condition="@ov='line' or @ov='surface'"/>
      <dependencies node="value[@n='Mom_iner_x' or @n='Mom_iner_y' or @n='Mom_iner_z']" att1="state" v1="normal"
      condition="@ov='point' or @ov='line'"/>
      <dependencies node="value[@n='Mom_iner_x' or @n='Mom_iner_y' or @n='Mom_iner_z']" att1="state" v1="hidden"
      condition="@ov='surface'"/>
      <dependencies node="value[@n='Trasl_Mass']" att1="state" v1="normal" condition="@ov='line'"/>
      <dependencies node="value[@n='Trasl_Mass']" att1="state" v1="hidden" condition="@ov='point' or @ov='surface'"/>
      <dependencies node="value[@n='Surface_mass']" att1="state" v1="normal" condition="@ov='surface'"/>
      <dependencies node="value[@n='Surface_mass']" att1="state" v1="hidden" condition="@ov='point' or @ov='line'"/>
      
      <value n="Mass_x" pn="Mass x" v="0.0" unit_magnitude="M/L"/>
      <value n="Mass_y" pn="Mass y" v="0.0" unit_magnitude="M/L"/>
      <value n="Mass_z" pn="Mass z" v="0.0" unit_magnitude="M/L"/>
      <value n="Trasl_Mass" pn="Trasl mass" v="0.0" unit_magnitude="M/L"/>
      <value n="Mom_iner_x" pn="M. inercia x" v="0.0" unit_magnitude="M·L"/>
      <value n="Mom_iner_y" pn="M. inercia y" v="0.0" unit_magnitude="M·L"/>
      <value n="Mom_iner_z" pn="M. inercia z" v="0.0" unit_magnitude="M·L"/>
      <value n="Surface_mass" pn="Surface mass" v="0.0" unit_magnitude="M/L^2"/>
    </condition>
  </container>
  <container n="Properties" pn="Properties" icon="section16">
    <!--OLD STATE: state="[check_state {Naval Beams_and_shells Beams}]"-->
    <container n="Beams" pn="Beams" icon="section16">
      <condition n="Rectangular_Section" pn="Isotropic rectangular section" ov="line"
	ovm="element"  icon="section16" help="This property must be assigned to beams with rectangular section. 'Width y' is the width in the Y' local axe direction. Units in International System for values are:\n\t (m) for the widths\n\t(N/m2) for 'E' and \n\t(N/m3) for the Specific_weight.">
	<symbol proc='lsdyna::draw_symbol_sections_lines Rectangular_Section' orientation='free'/>
	<container n="General" pn="General" icon="section16">
	  <container n="Geometry" pn="Geometry" icon="section16">
	    <value n="WidthY" pn="Width y" v="0.0" unit_magnitude="L" help="Width in the local axes y direction"/>
	    <value n="WidthZ" pn="Width z" v="0.0" unit_magnitude="L" help="Width in the local axes z direction"/>
	    <container n="Material" pn="Material" icon="section16">
	      <value n="Material" pn="Material" editable='0' help="Choose a material with elastic properties"
		values_tree='[give_materials_list]' v='{/*/translations/translation[@pn="User defined"]/@pn}'>
		
		<dependencies node="../value[@n='E']" att1="state" v1="normal" value='{/*/translations/translation[@pn="User defined"]/@pn}'/>
		<dependencies node="../value[@n='nu']" att1="state" v1="normal" value='{/*/translations/translation[@pn="User defined"]/@pn}'/>
		<dependencies node="../value[@n='Specific_weight']" att1="state" v1="normal" value='{/*/translations/translation[@pn="User defined"]/@pn}'/>
		
		<dependencies node="../value[@n='E']" att1="state" v1="disabled" att2="v" v2='[give_mat_prop E]' default="1"/>
		<dependencies node="../value[@n='E']" att1="units" v1='[give_mat_units E]' default="1"/>
		
		<dependencies node="../value[@n='nu']" att1="state" v1="disabled" att2="v" v2='[give_mat_prop nu]' default="1"/>
		
		<dependencies node="../value[@n='Specific_weight']" att1="state" v1="disabled" att2="v" v2='[give_mat_prop Specific_weight]' default="1"/>
		<dependencies node="../value[@n='Specific_weight']" att1="units" v1='[give_mat_units Specific_weight]' default="1"/>
		
	      </value>
	      <value n="E" pn="E" v="2.1e11" help="Young modulus" unit_magnitude="F/L^2" units="N/m^2"/>
	      <value n='nu' pn='\u03bd' v='0.3' help='Poisson coficient'/>
	      <value n="Specific_weight" pn="Specific weight" v="76900" help="Specific weight" unit_magnitude="F/L^3" units="N/m^3"/>
	      <!-- NOT USED IN THIS LSDYNA VERSION-->
	      <value n="G" pn="G" v="8.1e10" unit_magnitude="F/L^2" units="N/m^2" help="Torsion modulus" state="hidden"/>           
	      <value n="Maximum_stress" pn="Maximum stress" v="0.0" unit_magnitude="F/L^2" state="hidden"
	      help="This is the maximum allowed stress in the material. If given, it will be used to calculate safety factors"/>
	    </container>
	  </container>
	  <!-- KEEPED FOR FUTURE USES  
	  <value n="Element_formulation" pn="Element formulation" v="1" values="1,2,3,4,6,7,8,9,11,12" 
	    dict='1,Hughes-Liu (cross section integration),2,Belytschko-Schwer resultant beam,3,Truss (resultant),4,Belytschko-Schwer full cross section integration,6,Discrete beam/cable,7,2D plane Strain shell element (XY),8,2D axysimmetric volume weighted shell element (XY),9,Spotweld Beam,11,Integrated Warped Beam,12,Resultant Warped Beam'
	    help="Specify the element Formulation Option">
	    <dependencies node="../value[@n='Shear_factor']" att1="state" v1="normal" value="2"/> 
	    <dependencies node="../value[@n='Shear_factor']" att1="state" v1="normal" value="3"/>
	    <dependencies node="../value[@n='Shear_factor']" att1="state" v1="normal" value="6"/> 
	    <dependencies node="../value[@n='Shear_factor']" att1="state" v1="hidden" value="1"/> 
	    <dependencies node="../value[@n='Shear_factor']" att1="state" v1="hidden" value="4"/>
	    <dependencies node="../value[@n='Shear_factor']" att1="state" v1="hidden" value="5"/> 
	    <dependencies node="../value[@n='Shear_factor']" att1="state" v1="hidden" value="11"/>
	    <dependencies node="../value[@n='Shear_factor']" att1="state" v1="hidden" default="1"/>
	    <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="normal" value="1"/>
	    <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="normal" value="4"/>
	    <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="normal" value="5"/>
	    <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="normal" value="11"/>
	    <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="hidden" value="2"/>
	    <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="hidden" value="3"/>
	    <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="hidden" value="6"/>
	    <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="hidden" default="1"/>
	    <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="normal" value="1"/>
	    <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="normal" value="2"/>
	    <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="normal" value="3"/>
	    <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="normal" value="4"/>
	    <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="hidden" value="6"/>
	    <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="hidden" value="5"/>
	    <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="hidden" value="11"/>
	    <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="hidden" default="1"/> 
	  </value> -->
	  <value n="Element_formulation" pn="Element formulation" v="1" values="1,4,7,8,9,11" 
	    dict='1,Hughes-Liu (cross section integration),4,Belytschko-Schwer full cross section integration,7,2D plane Strain shell element (XY),8,2D axysimmetric volume weighted shell element (XY),9,Spotweld Beam,11,Integrated Warped Beam'
	    help="Specify the element Formulation Option">
	    <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="normal" value="1"/>
	    <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="normal" value="4"/>                 
	    <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="normal" value="11"/>
	    <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="hidden" value="9"/>
	    <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="hidden" default="1"/>
	    
	    <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="normal" value="1"/>
	    <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="normal" value="4"/>                    
	    <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="hidden" value="11"/>
	    <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="hidden" value="9"/>
	    <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="hidden" default="1"/> 
	    
	    <dependencies node="../value[@n='Location_y_axis']" att1="state" v1="normal" value="1"/>
	    <dependencies node="../value[@n='Location_y_axis']" att1="state" v1="normal" value="11"/>
	    <dependencies node="../value[@n='Location_y_axis']" att1="state" v1="hidden" value="4"/>
	    <dependencies node="../value[@n='Location_y_axis']" att1="state" v1="hidden" value="9"/>
	    <dependencies node="../value[@n='Location_y_axis']" att1="state" v1="hidden" default="1"/>
	    
	    <dependencies node="../value[@n='Location_z_axis']" att1="state" v1="normal" value="1"/>
	    <dependencies node="../value[@n='Location_z_axis']" att1="state" v1="normal" value="11"/>
	    <dependencies node="../value[@n='Location_z_axis']" att1="state" v1="hidden" value="4"/>
	    <dependencies node="../value[@n='Location_z_axis']" att1="state" v1="hidden" value="9"/>
	    <dependencies node="../value[@n='Location_z_axis']" att1="state" v1="hidden" default="1"/>
	    
	    <dependencies node="../value[@n='Output_force']" att1="state" v1="normal" value="9"/>
	    <dependencies node="../value[@n='Output_force']" att1="state" v1="hidden" value="1"/>
	    <dependencies node="../value[@n='Output_force']" att1="state" v1="hidden" value="4"/>
	    <dependencies node="../value[@n='Output_force']" att1="state" v1="hidden" value="11"/>
	    <dependencies node="../value[@n='Output_force']" att1="state" v1="hidden" default="1"/>
	  </value> 
	  <!-- <value n="Shear_factor" pn="Shear factor" v="1.0" help="The recommended value for rectangular sections is 5/6" state="hidden"/> -->
	  <value n="Quadrature_rule" pn="Quadrature rule" v="2.0" values="1.0,2.0,3.0,4.0,5.0" state="hidden"
	    dict='1.0,One integration Point,2.0,2X2 Gauss Quadrature,3.0,3X3 Gauss Quadrature,4.0,3X3 Lobatto Quadrature,5.0,4X4 Gauss Quadrature'
	    help="Quadrature rule for integrated beams"/>
	    <value n="Non_structural_mass" pn="Non structural mass" v="0.0" unit_magnitude="M/L" help="Non structural mass per unit length" state="hidden"/>
	    <value n="Location_y_axis" pn="Location y axis" v="0.0" values="1.0,0.0,-1.0" dict='1.0,Side at y=1.0,0.0,Center,-1.0,Side at y=-1.0' help="Location of reference surface normal to y-axis for Hughes-Liu elements" state="hidden"/>
	    <value n="Location_z_axis" pn="Location z axis" v="0.0" values="1.0,0.0,-1.0" dict='1.0,Side at z=1.0,0.0,Center,-1.0,Side at z=-1.0' help="Location of reference surface normal to z-axis for Hughes-Liu elements" state="hidden"/>
	    <value n="Output_force" pn="Output spot force" v="0" values="1,0" state="hidden" help="Spot force resultant from spotwelds could be output to SWFORC file"/>
	  </container>
	  <container n="Inertia" pn="Mass" icon="section16">
	    <value n="m" pn="Mass" v="0.0" unit_magnitude="M" help="Translational mass"/>
	    <value n="Define_center" pn="Define center of mass" v="0" values="1,0" help="If not activated, center of mass will be taken as default" actualize_tree='1'>
	      <dependencies node="../value[@n='xc']" att1="state" v1="normal" value="1" />
	      <dependencies node="../value[@n='xc']" att1="state" v1="hidden" value="0"/>                
	      <dependencies node="../value[@n='yc']" att1="state" v1="normal" value="1"/>
	      <dependencies node="../value[@n='yc']" att1="state" v1="hidden" value="0"/>
	      <dependencies node="../value[@n='zc']" att1="state" v1="normal" value="1"/>
	      <dependencies node="../value[@n='zc']" att1="state" v1="hidden" value="0"/>
	    </value>
	    <value n="xc" pn="xc" v="0.0" unit_magnitude="L" state="hidden" help="x coordinate of center of mass"/>
	    <value n="yc" pn="yc" v="0.0" unit_magnitude="L" state="hidden" help="y coordinate of center of mass"/>
	    <value n="zc" pn="zc" v="0.0" unit_magnitude="L" state="hidden" help="z coordinate of center of mass"/>
	    <container n="Inertia_tensor" pn="Inertia tensor" icon="section16">
	      <value n="Ixx" pn="Ixx" v="0.0" unit_magnitude="M*L^2" help="Ixx value of the inertia tensor"/>
	      <value n="Ixy" pn="Ixy" v="0.0" unit_magnitude="M*L^2" help="Ixy value of the inertia tensor"/>
	      <value n="Ixz" pn="Ixz" v="0.0" unit_magnitude="M*L^2" help="Ixz value of the inertia tensor"/>
	      <value n="Iyy" pn="Iyy" v="0.0" unit_magnitude="M*L^2" help="Iyy value of the inertia tensor"/>
	      <value n="Iyz" pn="Iyz" v="0.0" unit_magnitude="M*L^2" help="Iyz value of the inertia tensor"/>
	      <value n="Izz" pn="Izz" v="0.0" unit_magnitude="M*L^2" help="Izz value of the inertia tensor"/>     
	    </container>
	  </container>
	</condition>
	<condition n="Circular_Section" pn="Isotropic circular section" ov="line"
	  ovm="element"  icon="section16" help="This property must be assigned to beams with tubular (circular) section. 'Width y' is the width in the Y' local axe direction.\nUnits in International System for values are:\n\t (m) for the diameters\n\t(N/m2) for 'E'\n\t(N/m3) for the Specific_weight.">
	  <!-- THIS SYMBOL SHOULD BE CHANGED -->
<!--           <symbol proc='lsdyna::draw_symbol_sections_lines Rectangular_Section' orientation='free'/> -->
	<symbol proc='lsdyna::draw_symbol_sections_lines Circular_Section' orientation='free'/>
<!--         <symbol proc='lsdyna::draw_symbol_sections_lines Generic_section' orientation='free'/> -->
	  <container n="General" pn="General" icon="section16">
	    <container n="Geometry" pn="Geometry" icon="section16">
	      <value n="WidthY" pn="Outer \u03b8" help="Outer section diameter" v="0.0" unit_magnitude="L"/>
	      <value n="WidthZ" pn="Inner \u03b8" help="Inner section diameter" v="0.0" unit_magnitude="L"/>
	      <container n="Material" pn="Material" icon="section16">
		<value n="Material" pn="Material" editable='0' help="Choose a material with elastic properties"
		  values_tree='[give_materials_list]' v='{/*/translations/translation[@pn="User defined"]/@pn}'>
		  
		  <dependencies node="../value[@n='E']" att1="state" v1="normal" value='{/*/translations/translation[@pn="User defined"]/@pn}'/>
		  <dependencies node="../value[@n='nu']" att1="state" v1="normal" value='{/*/translations/translation[@pn="User defined"]/@pn}'/>
		  <dependencies node="../value[@n='Specific_weight']" att1="state" v1="normal" value='{/*/translations/translation[@pn="User defined"]/@pn}'/>
		  
		  <dependencies node="../value[@n='E']" att1="state" v1="disabled" att2="v" v2='[give_mat_prop E]' default="1"/>
		  <dependencies node="../value[@n='E']" att1="units" v1='[give_mat_units E]' default="1"/>
		  
		  <dependencies node="../value[@n='nu']" att1="state" v1="disabled" att2="v" v2='[give_mat_prop nu]' default="1"/>
		  
		  <dependencies node="../value[@n='Specific_weight']" att1="state" v1="disabled" att2="v" v2='[give_mat_prop Specific_weight]' default="1"/>
		  <dependencies node="../value[@n='Specific_weight']" att1="units" v1='[give_mat_units Specific_weight]' default="1"/>
		  
		</value>
		<value n="E" pn="E" v="2.1e11" help="Young modulus" unit_magnitude="F/L^2" units="N/m^2"/>
		<value n='nu' pn='\u03bd' v='0.3' help='Poisson coficient'/>
		<value n="Specific_weight" pn="Specific weight" v="76900" help="Specific Weight" unit_magnitude="F/L^3" units="N/m^3"/>
		<!-- NOT USED IN THIS LSDYNA VERSION-->
		<value n="G" pn="G" v="8.1e10" unit_magnitude="F/L^2" units="N/m^2" help="Torsion modulus" state="hidden"/>           
		<value n="Maximum_stress" pn="Maximum stress" v="0.0" unit_magnitude="F/L^2" state="hidden"
		help="This is the maximum allowed stress in the material. If given, it will be used to calculate safety factors"/>
	      </container>
	    </container>
	    <value n="Element_formulation" pn="Element formulation" v="1" values="1,4,5,7,8,9,11" 
	      dict='1,Hughes-Liu (cross section integration),4,Belytschko-Schwer full cross section integration,5,Belytschko-Schwer tubuluar beam with cross section integration,7,2D plane Strain shell element (XY),8,2D axysimmetric volume weighted shell element (XY),9,Spotweld Beam,11,Integrated Warped Beam'
	      help="Specify the element Formulation Option">
	      <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="normal" value="1"/>
	      <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="normal" value="4"/>     
	      <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="normal" value="5"/>            
	      <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="normal" value="11"/>
	      <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="hidden" value="9"/>
	      <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="hidden" default="1"/>
	      
	      <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="normal" value="1"/>
	      <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="normal" value="4"/>  
	      <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="normal" value="5"/>                  
	      <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="hidden" value="11"/>
	      <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="hidden" value="9"/>
	      <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="hidden" default="1"/> 
	      
	      <dependencies node="../value[@n='Location_y_axis']" att1="state" v1="normal" value="1"/>
	      <dependencies node="../value[@n='Location_y_axis']" att1="state" v1="normal" value="11"/>
	      <dependencies node="../value[@n='Location_y_axis']" att1="state" v1="hidden" value="4"/>
	      <dependencies node="../value[@n='Location_y_axis']" att1="state" v1="hidden" value="5"/>
	      <dependencies node="../value[@n='Location_y_axis']" att1="state" v1="hidden" value="9"/>
	      <dependencies node="../value[@n='Location_y_axis']" att1="state" v1="hidden" default="1"/>
	      
	      <dependencies node="../value[@n='Location_z_axis']" att1="state" v1="normal" value="1"/>
	      <dependencies node="../value[@n='Location_z_axis']" att1="state" v1="normal" value="11"/>
	      <dependencies node="../value[@n='Location_z_axis']" att1="state" v1="hidden" value="4"/>
	      <dependencies node="../value[@n='Location_z_axis']" att1="state" v1="hidden" value="5"/>
	      <dependencies node="../value[@n='Location_z_axis']" att1="state" v1="hidden" value="9"/>
	      <dependencies node="../value[@n='Location_z_axis']" att1="state" v1="hidden" default="1"/>
	      
	      <dependencies node="../value[@n='Output_force']" att1="state" v1="normal" value="9"/>
	      <dependencies node="../value[@n='Output_force']" att1="state" v1="hidden" value="1"/>
	      <dependencies node="../value[@n='Output_force']" att1="state" v1="hidden" value="4"/>
	      <dependencies node="../value[@n='Output_force']" att1="state" v1="hidden" value="5"/>
	      <dependencies node="../value[@n='Output_force']" att1="state" v1="hidden" value="11"/>
	      <dependencies node="../value[@n='Output_force']" att1="state" v1="hidden" default="1"/>
	    </value> 
	    <!-- <value n="Shear_factor" pn="Shear factor" v="1.0" help="The recommended value for rectangular sections is 5/6" state="hidden"/> -->
	    <value n="Quadrature_rule" pn="Quadrature rule" v="2.0" values="1.0,2.0,3.0,4.0,5.0" state="hidden"
	      dict='1.0,One integration Point,2.0,2X2 Gauss Quadrature,3.0,3X3 Gauss Quadrature,4.0,3X3 Lobatto Quadrature,5.0,4X4 Gauss Quadrature'
	      help="Quadrature rule for integrated beams"/>
	      <value n="Non_structural_mass" pn="Non structural mass" v="0.0" unit_magnitude="M/L" help="Non structural mass per unit length" state="hidden"/>
	      <value n="Location_y_axis" pn="Location y axis" v="0.0" values="1.0,0.0,-1.0" dict='1.0,Side at y=1.0,0.0,Center,-1.0,Side at y=-1.0' help="Location of reference surface normal to y-axis for Hughes-Liu elements" state="hidden"/>
	      <value n="Location_z_axis" pn="Location z axis" v="0.0" values="1.0,0.0,-1.0" dict='1.0,Side at z=1.0,0.0,Center,-1.0,Side at z=-1.0' help="Location of reference surface normal to z-axis for Hughes-Liu elements" state="hidden"/>
	      <value n="Output_force" pn="Output spot force" v="0" values="1,0" state="hidden" help="Spot force resultant from spotwelds could be output to SWFORC file"/>
	    </container>
	    <container n="Inertia" pn="Mass" icon="section16">
	      <value n="m" pn="Mass" v="0.0" unit_magnitude="M" help="Translational mass"/>
	      <value n="Define_center" pn="Define center of mass" v="0" values="1,0" help="If not activated, center of mass will be taken as default" actualize_tree='1'>
		<dependencies node="../value[@n='xc']" att1="state" v1="normal" value="1" />
		<dependencies node="../value[@n='xc']" att1="state" v1="hidden" value="0"/>                
		<dependencies node="../value[@n='yc']" att1="state" v1="normal" value="1"/>
		<dependencies node="../value[@n='yc']" att1="state" v1="hidden" value="0"/>
		<dependencies node="../value[@n='zc']" att1="state" v1="normal" value="1"/>
		<dependencies node="../value[@n='zc']" att1="state" v1="hidden" value="0"/>
	      </value>
	      <value n="xc" pn="xc" v="0.0" unit_magnitude="L" state="hidden" help="x coordinate of center of mass"/>
	      <value n="yc" pn="yc" v="0.0" unit_magnitude="L" state="hidden" help="y coordinate of center of mass"/>
	      <value n="zc" pn="zc" v="0.0" unit_magnitude="L" state="hidden" help="z coordinate of center of mass"/>
	      <container n="Inertia_tensor" pn="Inertia tensor" icon="section16">
		<value n="Ixx" pn="Ixx" v="0.0" unit_magnitude="M*L^2" help="Ixx value of the inertia tensor"/>
		<value n="Ixy" pn="Ixy" v="0.0" unit_magnitude="M*L^2" help="Ixy value of the inertia tensor"/>
		<value n="Ixz" pn="Ixz" v="0.0" unit_magnitude="M*L^2" help="Ixz value of the inertia tensor"/>
		<value n="Iyy" pn="Iyy" v="0.0" unit_magnitude="M*L^2" help="Iyy value of the inertia tensor"/>
		<value n="Iyz" pn="Iyz" v="0.0" unit_magnitude="M*L^2" help="Iyz value of the inertia tensor"/>
		<value n="Izz" pn="Izz" v="0.0" unit_magnitude="M*L^2" help="Izz value of the inertia tensor"/>                  
	      </container>
	    </container>
	  </condition>
      <condition n="Rectangular_Plastic_Section" pn="Plastic rectangular section" ov="line"
	ovm="element"  icon="section16" help="This property must be assigned to plastic beams with rectangular section. 'Width y' is the width in the Y' local axe direction">
	<symbol proc='lsdyna::draw_symbol_sections_lines Rectangular_Section' orientation='free'/>
	<container n="General" pn="General" icon="section16">
	  <value n="Material" pn="Material" editable='0'
	    values_tree='[give_materials_list -user_defined 0 -has_container material_plasticity]'>
	    <edit_command n="Edit materials" pn="Edit materials" icon="materialgreen16"
	    proc='edit_materials_list -has_container material_plasticity'/>
	  </value>
	  <container n="Geometry" pn="Geometry" icon="section16">
	    <value n="WidthY" pn="Width y" v="0.0" unit_magnitude="L" help="Width in the local axes y direction"/>
	    <value n="WidthZ" pn="Width z" v="0.0" unit_magnitude="L" help="Width in the local axes z direction"/>
	  </container>
	  <value n="Element_formulation" pn="Element formulation" v="1" values="1,4,7,8,9,11" 
	    dict='1,Hughes-Liu (cross section integration),4,Belytschko-Schwer full cross section integration,7,2D plane Strain shell element (XY),8,2D axysimmetric volume weighted shell element (XY),9,Spotweld Beam,11,Integrated Warped Beam'
	    help="Specify the element Formulation Option">
	    <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="normal" value="1"/>
	    <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="normal" value="4"/>                 
	    <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="normal" value="11"/>
	    <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="hidden" value="9"/>
	    <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="hidden" default="1"/>
	    
	    <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="normal" value="1"/>
	    <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="normal" value="4"/>                    
	    <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="hidden" value="11"/>
	    <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="hidden" value="9"/>
	    <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="hidden" default="1"/> 
	    
	    <dependencies node="../value[@n='Location_y_axis']" att1="state" v1="normal" value="1"/>
	    <dependencies node="../value[@n='Location_y_axis']" att1="state" v1="normal" value="11"/>
	    <dependencies node="../value[@n='Location_y_axis']" att1="state" v1="hidden" value="4"/>
	    <dependencies node="../value[@n='Location_y_axis']" att1="state" v1="hidden" value="9"/>
	    <dependencies node="../value[@n='Location_y_axis']" att1="state" v1="hidden" default="1"/>
	    
	    <dependencies node="../value[@n='Location_z_axis']" att1="state" v1="normal" value="1"/>
	    <dependencies node="../value[@n='Location_z_axis']" att1="state" v1="normal" value="11"/>
	    <dependencies node="../value[@n='Location_z_axis']" att1="state" v1="hidden" value="4"/>
	    <dependencies node="../value[@n='Location_z_axis']" att1="state" v1="hidden" value="9"/>
	    <dependencies node="../value[@n='Location_z_axis']" att1="state" v1="hidden" default="1"/>
	    
	    <dependencies node="../value[@n='Output_force']" att1="state" v1="normal" value="9"/>
	    <dependencies node="../value[@n='Output_force']" att1="state" v1="hidden" value="1"/>
	    <dependencies node="../value[@n='Output_force']" att1="state" v1="hidden" value="4"/>
	    <dependencies node="../value[@n='Output_force']" att1="state" v1="hidden" value="11"/>
	    <dependencies node="../value[@n='Output_force']" att1="state" v1="hidden" default="1"/>
	  </value> 
	  <!-- <value n="Shear_factor" pn="Shear factor" v="1.0" help="The recommended value for rectangular sections is 5/6" state="hidden"/> -->
	  <value n="Quadrature_rule" pn="Quadrature rule" v="2.0" values="1.0,2.0,3.0,4.0,5.0" state="hidden"
	    dict='1.0,One integration Point,2.0,2X2 Gauss Quadrature,3.0,3X3 Gauss Quadrature,4.0,3X3 Lobatto Quadrature,5.0,4X4 Gauss Quadrature'
	    help="Quadrature rule for integrated beams"/>
	    <value n="Non_structural_mass" pn="Non structural mass" v="0.0" unit_magnitude="M/L" help="Non structural mass per unit length" state="hidden"/>
	    <value n="Location_y_axis" pn="Location y axis" v="0.0" values="1.0,0.0,-1.0" dict='1.0,Side at y=1.0,0.0,Center,-1.0,Side at y=-1.0' help="Location of reference surface normal to y-axis for Hughes-Liu elements" state="hidden"/>
	    <value n="Location_z_axis" pn="Location z axis" v="0.0" values="1.0,0.0,-1.0" dict='1.0,Side at z=1.0,0.0,Center,-1.0,Side at z=-1.0' help="Location of reference surface normal to z-axis for Hughes-Liu elements" state="hidden"/>
	    <value n="Output_force" pn="Output spot force" v="0" values="1,0" state="hidden" help="Spot force resultant from spotwelds could be output to SWFORC file"/>
	  </container>
	  <container n="Inertia" pn="Mass" icon="section16">
	    <value n="m" pn="Mass" v="0.0" unit_magnitude="M" help="Translational mass"/>
	    <value n="Define_center" pn="Define center of mass" v="0" values="1,0" help="If not activated, center of mass will be taken as default" actualize_tree='1'>
	      <dependencies node="../value[@n='xc']" att1="state" v1="normal" value="1" />
	      <dependencies node="../value[@n='xc']" att1="state" v1="hidden" value="0"/>                
	      <dependencies node="../value[@n='yc']" att1="state" v1="normal" value="1"/>
	      <dependencies node="../value[@n='yc']" att1="state" v1="hidden" value="0"/>
	      <dependencies node="../value[@n='zc']" att1="state" v1="normal" value="1"/>
	      <dependencies node="../value[@n='zc']" att1="state" v1="hidden" value="0"/>
	    </value>
	    <value n="xc" pn="xc" v="0.0" unit_magnitude="L" state="hidden" help="x coordinate of center of mass"/>
	    <value n="yc" pn="yc" v="0.0" unit_magnitude="L" state="hidden" help="y coordinate of center of mass"/>
	    <value n="zc" pn="zc" v="0.0" unit_magnitude="L" state="hidden" help="z coordinate of center of mass"/>
	    <container n="Inertia_tensor" pn="Inertia tensor" icon="section16">
	      <value n="Ixx" pn="Ixx" v="0.0" unit_magnitude="M*L^2" help="Ixx value of the inertia tensor"/>
	      <value n="Ixy" pn="Ixy" v="0.0" unit_magnitude="M*L^2" help="Ixy value of the inertia tensor"/>
	      <value n="Ixz" pn="Ixz" v="0.0" unit_magnitude="M*L^2" help="Ixz value of the inertia tensor"/>
	      <value n="Iyy" pn="Iyy" v="0.0" unit_magnitude="M*L^2" help="Iyy value of the inertia tensor"/>
	      <value n="Iyz" pn="Iyz" v="0.0" unit_magnitude="M*L^2" help="Iyz value of the inertia tensor"/>
	      <value n="Izz" pn="Izz" v="0.0" unit_magnitude="M*L^2" help="Izz value of the inertia tensor"/>     
	    </container>
	  </container>
	</condition>
	<condition n="Circular_Plastic_Section" pn="Plastic circular section" ov="line"
	  ovm="element"  icon="section16" help="This property must be assigned to plastic beams with tubular (circular) section. 'Width y' is the width in the Y' local axe direction.">
	  <!-- THIS SYMBOL SHOULD BE CHANGED -->
	<symbol proc='lsdyna::draw_symbol_sections_lines Circular_Section' orientation='free'/>
	  <container n="General" pn="General" icon="section16">
	   <value n="Material" pn="Material" editable='0'
	    values_tree='[give_materials_list -user_defined 0 -has_container material_plasticity]'>
	    <edit_command n="Edit materials" pn="Edit materials" icon="materialgreen16"
	    proc='edit_materials_list -has_container material_plasticity'/>
	  </value>
	    <container n="Geometry" pn="Geometry" icon="section16">
	      <value n="WidthY" pn="Outer \u03b8" help="Outer section diameter" v="0.0" unit_magnitude="L"/>
	      <value n="WidthZ" pn="Inner \u03b8" help="Inner section diameter" v="0.0" unit_magnitude="L"/>
	    </container>
	    <value n="Element_formulation" pn="Element formulation" v="1" values="1,4,5,7,8,9,11" 
	      dict='1,Hughes-Liu (cross section integration),4,Belytschko-Schwer full cross section integration,5,Belytschko-Schwer tubuluar beam with cross section integration,7,2D plane Strain shell element (XY),8,2D axysimmetric volume weighted shell element (XY),9,Spotweld Beam,11,Integrated Warped Beam'
	      help="Specify the element Formulation Option">
	      <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="normal" value="1"/>
	      <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="normal" value="4"/>     
	      <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="normal" value="5"/>            
	      <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="normal" value="11"/>
	      <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="hidden" value="9"/>
	      <dependencies node="../value[@n='Quadrature_rule']" att1="state" v1="hidden" default="1"/>
	      
	      <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="normal" value="1"/>
	      <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="normal" value="4"/>  
	      <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="normal" value="5"/>                  
	      <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="hidden" value="11"/>
	      <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="hidden" value="9"/>
	      <dependencies node="../value[@n='Non_structural_mass']" att1="state" v1="hidden" default="1"/> 
	      
	      <dependencies node="../value[@n='Location_y_axis']" att1="state" v1="normal" value="1"/>
	      <dependencies node="../value[@n='Location_y_axis']" att1="state" v1="normal" value="11"/>
	      <dependencies node="../value[@n='Location_y_axis']" att1="state" v1="hidden" value="4"/>
	      <dependencies node="../value[@n='Location_y_axis']" att1="state" v1="hidden" value="5"/>
	      <dependencies node="../value[@n='Location_y_axis']" att1="state" v1="hidden" value="9"/>
	      <dependencies node="../value[@n='Location_y_axis']" att1="state" v1="hidden" default="1"/>
	      
	      <dependencies node="../value[@n='Location_z_axis']" att1="state" v1="normal" value="1"/>
	      <dependencies node="../value[@n='Location_z_axis']" att1="state" v1="normal" value="11"/>
	      <dependencies node="../value[@n='Location_z_axis']" att1="state" v1="hidden" value="4"/>
	      <dependencies node="../value[@n='Location_z_axis']" att1="state" v1="hidden" value="5"/>
	      <dependencies node="../value[@n='Location_z_axis']" att1="state" v1="hidden" value="9"/>
	      <dependencies node="../value[@n='Location_z_axis']" att1="state" v1="hidden" default="1"/>
	      
	      <dependencies node="../value[@n='Output_force']" att1="state" v1="normal" value="9"/>
	      <dependencies node="../value[@n='Output_force']" att1="state" v1="hidden" value="1"/>
	      <dependencies node="../value[@n='Output_force']" att1="state" v1="hidden" value="4"/>
	      <dependencies node="../value[@n='Output_force']" att1="state" v1="hidden" value="5"/>
	      <dependencies node="../value[@n='Output_force']" att1="state" v1="hidden" value="11"/>
	      <dependencies node="../value[@n='Output_force']" att1="state" v1="hidden" default="1"/>
	    </value> 
	    <!-- <value n="Shear_factor" pn="Shear factor" v="1.0" help="The recommended value for rectangular sections is 5/6" state="hidden"/> -->
	    <value n="Quadrature_rule" pn="Quadrature rule" v="2.0" values="1.0,2.0,3.0,4.0,5.0" state="hidden"
	      dict='1.0,One integration Point,2.0,2X2 Gauss Quadrature,3.0,3X3 Gauss Quadrature,4.0,3X3 Lobatto Quadrature,5.0,4X4 Gauss Quadrature'
	      help="Quadrature rule for integrated beams"/>
	      <value n="Non_structural_mass" pn="Non structural mass" v="0.0" unit_magnitude="M/L" help="Non structural mass per unit length" state="hidden"/>
	      <value n="Location_y_axis" pn="Location y axis" v="0.0" values="1.0,0.0,-1.0" dict='1.0,Side at y=1.0,0.0,Center,-1.0,Side at y=-1.0' help="Location of reference surface normal to y-axis for Hughes-Liu elements" state="hidden"/>
	      <value n="Location_z_axis" pn="Location z axis" v="0.0" values="1.0,0.0,-1.0" dict='1.0,Side at z=1.0,0.0,Center,-1.0,Side at z=-1.0' help="Location of reference surface normal to z-axis for Hughes-Liu elements" state="hidden"/>
	      <value n="Output_force" pn="Output spot force" v="0" values="1,0" state="hidden" help="Spot force resultant from spotwelds could be output to SWFORC file"/>
	    </container>
	    <container n="Inertia" pn="Mass" icon="section16">
	      <value n="m" pn="Mass" v="0.0" unit_magnitude="M" help="Translational mass"/>
	      <value n="Define_center" pn="Define center of mass" v="0" values="1,0" help="If not activated, center of mass will be taken as default" actualize_tree='1'>
		<dependencies node="../value[@n='xc']" att1="state" v1="normal" value="1" />
		<dependencies node="../value[@n='xc']" att1="state" v1="hidden" value="0"/>                
		<dependencies node="../value[@n='yc']" att1="state" v1="normal" value="1"/>
		<dependencies node="../value[@n='yc']" att1="state" v1="hidden" value="0"/>
		<dependencies node="../value[@n='zc']" att1="state" v1="normal" value="1"/>
		<dependencies node="../value[@n='zc']" att1="state" v1="hidden" value="0"/>
	      </value>
	      <value n="xc" pn="xc" v="0.0" unit_magnitude="L" state="hidden" help="x coordinate of center of mass"/>
	      <value n="yc" pn="yc" v="0.0" unit_magnitude="L" state="hidden" help="y coordinate of center of mass"/>
	      <value n="zc" pn="zc" v="0.0" unit_magnitude="L" state="hidden" help="z coordinate of center of mass"/>
	      <container n="Inertia_tensor" pn="Inertia tensor" icon="section16">
		<value n="Ixx" pn="Ixx" v="0.0" unit_magnitude="M*L^2" help="Ixx value of the inertia tensor"/>
		<value n="Ixy" pn="Ixy" v="0.0" unit_magnitude="M*L^2" help="Ixy value of the inertia tensor"/>
		<value n="Ixz" pn="Ixz" v="0.0" unit_magnitude="M*L^2" help="Ixz value of the inertia tensor"/>
		<value n="Iyy" pn="Iyy" v="0.0" unit_magnitude="M*L^2" help="Iyy value of the inertia tensor"/>
		<value n="Iyz" pn="Iyz" v="0.0" unit_magnitude="M*L^2" help="Iyz value of the inertia tensor"/>
		<value n="Izz" pn="Izz" v="0.0" unit_magnitude="M*L^2" help="Izz value of the inertia tensor"/>                  
	      </container>
	    </container>
	  </condition>
	  <!-- HIDDEN AT THE MOMENT IN THIS LS-DYNA VERSION -->
	  <condition n="Generic_section" pn="Generic section" ov="line" ovm="element" state="hidden" 
	    icon="section16" help="This property must be assigned to beams with arbitrary shape section. 'Inertia y' is the inertia modulus related to the Y' local axe. 'Inertia z' is the inertia modulus related to the Z' local axe. J is the torsion inertia. E is the Young Modulus and G is the Torsion modulus. \nUnits in International System for values are:\n\t (m2) for the area\n\t(m4) for the inertias and J\n\t(N/m2) for 'E' and 'G'\n\t(N/m3) for the Specific_weight.">
	    <symbol proc='lsdyna::draw_symbol_sections_lines Generic_section' orientation='free'/>
	    <container n="Data" pn="Data">
	      <value n="Area" pn="Area" v="0.0" unit_magnitude="L^2"/>
	      <value n="Inertia_y" pn="Inertia y" v="0.0" unit_magnitude="L^4"/>
	      <value n="Inertia_z" pn="Inertia z" v="0.0" unit_magnitude="L^4"/>
	      <value n="J" pn="J" v="0.0" unit_magnitude="L^4"/>
	      <value n="Material" pn="Material" editable='0'
		values_tree='[give_materials_list]' v='{/*/translations/translation[@pn="User defined"]/@pn}'>
		
		<dependencies node="../value[@n='G']" att1="state" v1="normal" value='{/*/translations/translation[@pn="User defined"]/@pn}'/>
		<dependencies node="../value[@n='E']" att1="state" v1="normal" value='{/*/translations/translation[@pn="User defined"]/@pn}'/>
		<dependencies node="../value[@n='Specific_weight']" att1="state" v1="normal" value='{/*/translations/translation[@pn="User defined"]/@pn}'/>
		<dependencies node="../..//value[@n='Maximum_stress']" att1="state" v1="normal" value='{/*/translations/translation[@pn="User defined"]/@pn}'/>
		
		<dependencies node="../value[@n='G']" att1="state" v1="disabled" att2="v" v2='[give_mat_prop G]' default="1"/>
		<dependencies node="../value[@n='G']" att1="units" v1='[give_mat_units G]' default="1"/>
		
		<dependencies node="../value[@n='E']" att1="state" v1="disabled" att2="v" v2='[give_mat_prop E]' default="1"/>
		<dependencies node="../value[@n='E']" att1="units" v1='[give_mat_units E]' default="1"/>
		
		<dependencies node="../value[@n='Specific_weight']" att1="state" v1="disabled" att2="v" v2='[give_mat_prop Specific_weight]' default="1"/>
		<dependencies node="../value[@n='Specific_weight']" att1="units" v1='[give_mat_units Specific_weight]' default="1"/>
		
		<dependencies node="../..//value[@n='Maximum_stress']" att1="state" v1="disabled" att2="v" v2='[give_mat_prop Maximum_stress]' default="1"/>
		<dependencies node="../..//value[@n='Maximum_stress']" att1="units" v1='[give_mat_units Maximum_stress]' default="1"/>
	      </value>
	      <value n="E" pn="E" v="2.1e11" unit_magnitude="F/L^2" units="N/m^2" help="Young modulus"/>
	      <value n="G" pn="G" v="8.1e10" unit_magnitude="F/L^2" units="N/m^2" help="Torsion modulus"/>
	      <value n="Specific_weight" pn="Specific weight" v="0.0" unit_magnitude="F/L^3"/>
	    </container>
	    <container n="Stress data" pn="Stress data">
	      <value n="W_y" pn="Wy" v="0.0" unit_magnitude="L^3" units="m^3"
	      help="'W y' is the resistance modulus (Wy=Iy/(z/2)) related to the Y' local axe."/>
	      <value n="W_z" pn="Wz" v="0.0" unit_magnitude="L^3"
	      help="'W z' is the resistance modulus (Wz=Iz/(y/2)) related to the Z' local axe."/>
	      <value n="Aty" pn="Aty" v="0.0" unit_magnitude="L^2"
	      help="'Aty' is the shear area (tau_y=Qy/Aty)."/>
	      <value n="Atz" pn="Atz" v="0.0" unit_magnitude="L^2"
	      help="'Atz' is the shear area (tau_z=Qz/Atz)."/>
	      <value n="Maximum_stress" pn="Maximum stress" v="0.0" unit_magnitude="F/L^2"
	      help="This is the maximum allowed stress in the material. If given, it will be used to calculate safety factors"/>
	      <value n="Name" pn="Name" v="" state="disabled"/>
	    </container>
	    <edit_command n="Predefined sections" pn="Predefined sections" proc='beam_section_window'/>
	  </condition>
	  <!-- HIDDEN IN THIS LS-DYNA VERSION -->
	  <condition n="Sections_library" pn="Sections library" ov="line" ovm="element" state="hidden"
	    icon="section16"
	    help="Similar to other beam sections but permmit to select one standard steel section and one standard material">
	    <symbol proc='lsdyna::draw_symbol_sections_lines Sections_library' orientation='free'/>
	    <value n="steel_section_name" pn="Name" v="" values_tree="[give_library_sections_list]"/>
	    <value n="Z_axe_position" pn="Z axe position" v="0.0" unit_magnitude="L" units="cm"/>
	    <value n="steel_material" pn="Material" editable='0'
	    values='A37,A42,A52' v='A52'/>
	    <edit_command n="Edit" pn="Edit" proc='library_section_window'/>
	  </condition>
	  <!--HIDDEN IN THIS LS-DYNA VERSION-->
	  <condition n="naval_stiffeners" pn="Naval stiffeners" ov="line" state="hidden"
	    ovm="element" icon="section16" help="This property must be assigned to beams">
	    <symbol proc='lsdyna::draw_symbol_sections_lines naval_stiffeners' orientation='free'/>
	    <value n="type" pn="type" v="naval_stiffeners" state="hidden"/>     
	    <value n="win_info" pn="win_info" v="" state="hidden"/>       
	    <value n="numero_de_capas" pn="numero_de_capas" v="" state="hidden"/>
	    <value n="units" pn="Units" v="N-m-kg" state="hidden"/>
	    <value n="area" pn="Area" v="0.0" unit_magnitude="L^2" state="disabled"/>
	    <value n="section_prop" pn="section_prop" v="" state="hidden"/>
	    <value n="section_info" pn="section_info" v="" state="hidden"/>
	    <value n="iyy" pn="Inertia y" v="0.0" unit_magnitude="L^4" state="disabled"/>
	    <value n="izz" pn="Inertia z" v="0.0" unit_magnitude="L^4" state="disabled"/>
	    <value n="j" pn="J" v="0.0" unit_magnitude="L^4" state="disabled"/>
	    <value n="g" pn="G" v="0.0" unit_magnitude="F/L^2" units="N/m^2" help="Shear modulus" state="disabled"/>
	    <value n="e" pn="E" v="0.0" unit_magnitude="F/L^2" units="N/m^2" help="Young modulus" state="disabled"/>
	    <value n="weight" pn="Specific weight" v="0.0" unit_magnitude="F/L^3" state="disabled"/>
	    <value n="mat_prop" pn="mat_prop" v="" state="hidden"/>
	    <value n="laminates" pn="laminates" v="" state="hidden"/>
	    <value n="matlist" pn="matlist" v="" state="hidden"/>
	    <value n="lamlist" pn="lamlist" v="" state="hidden"/>
	    <value n="mathick" pn="mathick" v="" state="hidden"/>
	    <edit_command n="Edit" pn="Edit" proc='stiffeners_window'/>
	  </condition>
	</container>
	<container n="Shells" pn="Shells" icon="shells16">
	  <!--OLD STATE: state="[check_state {Naval Beams_and_shells Shells Plane_strain Plane_stress Plates}]""-->
	  <condition n="Isotropic_Shell" pn="Isotropic shell" ov="surface"
	    ovm="element" icon="shells16" help="This property must be assigned to shells. 'Thickness' is the transversal dimension of the shell. 'E' is the Young Modulus and 'nu' is the Poisson coefficient. \nUnits in International System for values are:\n\t (m) for the thickness\n\t(N/m2) for 'E'\n\t(adimensional) nu\n\t(N/m3) for the Specific_weight.">
	    <symbol proc='lsdyna::draw_symbol_sections_surfaces' orientation='free'/>
	    <container n="General" pn="General" icon="shells16">
	      <container n="Geometry" pn="Geometry" icon="shells16">
		<value n="Thickness" pn="Thickness" v="0.25" help="Shell thickness" unit_magnitude="L"/>
		<container n="Material" pn="Material" icon="shells16">
		  <value n="Material" pn="Material" editable='0' help="choose an isotropic material"
		    values_tree='[give_materials_list]' v='{/*/translations/translation[@pn="User defined"]/@pn}'>
		    
		    <dependencies node="../value[@n='E']" att1="state" v1="normal" value='{/*/translations/translation[@pn="User defined"]/@pn}'/>
		    <dependencies node="../value[@n='nu']" att1="state" v1="normal" value='{/*/translations/translation[@pn="User defined"]/@pn}'/>
		    <dependencies node="../value[@n='Specific_weight']" att1="state" v1="normal" value='{/*/translations/translation[@pn="User defined"]/@pn}'/>
		    
		    <dependencies node="../value[@n='E']" att1="state" v1="disabled" att2="v" v2='[give_mat_prop E]' default="1"/>
		    <dependencies node="../value[@n='E']" att1="units" v1='[give_mat_units E]' default="1"/>
		    
		    <dependencies node="../value[@n='nu']" att1="state" v1="disabled" att2="v" v2='[give_mat_prop nu]' default="1"/>
		    
		    <dependencies node="../value[@n='Specific_weight']" att1="state" v1="disabled" att2="v" v2='[give_mat_prop Specific_weight]' default="1"/>
		    <dependencies node="../value[@n='Specific_weight']" att1="units" v1='[give_mat_units Specific_weight]' default="1"/>
		  </value>
		  <value n="E" pn="E" v="2.1e11" help="Young modulus"
		  unit_magnitude="F/L^2" units="N/m^2"/>
		  <value n='nu' pn='\u03bd' v='0.3' help='Poisson coeficient'/>
		  <value n="Specific_weight" pn="Specific weight" v="76900" help="Specific Weight" unit_magnitude="F/L^3" units="N/m^3"/>
		</container>
	      </container>
	      <value n="Element_formulation" pn="Element formulation" v="0" values="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,21,22,23,24,25,26,27,43,44,99" 
		dict='0,Unspecified,1,Hughes-Liu,2,Belytschko-Tsay,3,BCIZ Triangular Shell,4,C^0 Traingular Shell,5,Belytschko-Tsay membrane,6,S/R Hughes-Liu,7,S/R co-rotational Hughes-Liu,8,Belytschko-Leviathan shell,9,Fully int. Belytschko-Tsay membrane,10,Belytschko-Wong-Chiang,11,Fast co-rotational Hughes-Liu,12,Plane Stress (X-Y Plane),13,Plane Strain (X-Y Plane),14,Axissymmetric solid (area weighted),15,Axissymmetric solid (volume weighted),16,Fully integrated shell element,17,Fully integrated DKT (triangular shell element),18,Fully integrated linear DKT quad/triangular shell,20,Fully integrated linear assumed strain C^0 shell,21,Fully integrated  linear assumed strain C^0 shell,22,Linear shear panel element,23,8-node quadratic quadrilateral shell,24,6-node quadratic triangular shell,25,Belytschko-Tsay with thickness stretch,26,Fully integrated with thickness stretch,27,C^0 triangular shell with thickness stretch,43,Mesh free plane stress formulation,44,Mesh-free axisymmetrric solid formulation,99,Simplified linear element for time-domain vibration'
		help="Specify the element Formulation Option">
		<dependencies node="../value[@n='2D_solid_element']" att1="state" v1="normal" value="13"/> 
		<dependencies node="../value[@n='2D_solid_element']" att1="state" v1="normal" value="14"/>
		<dependencies node="../value[@n='2D_solid_element']" att1="state" v1="normal" value="15"/> 
		<dependencies node="../value[@n='2D_solid_element']" att1="state" v1="hidden" value="25"/>
		<dependencies node="../value[@n='2D_solid_element']" att1="state" v1="hidden" value="26"/> 
		<dependencies node="../value[@n='2D_solid_element']" att1="state" v1="hidden" default="1"/>
		<dependencies node="../value[@n='Thickness_field']" att1="state" v1="normal" value="25"/>          
		<dependencies node="../value[@n='Thickness_field']" att1="state" v1="normal" value="26"/> 
		<dependencies node="../value[@n='Thickness_field']" att1="state" v1="hidden" value="13"/>          
		<dependencies node="../value[@n='Thickness_field']" att1="state" v1="hidden" value="14"/> 
		<dependencies node="../value[@n='Thickness_field']" att1="state" v1="hidden" value="15"/>          
		<dependencies node="../value[@n='Thickness_field']" att1="state" v1="hidden" default="1"/>
	      </value>
	      <value n="Shear_factor" pn="Shear correction factor" v="1.0" help="Shear correction factor which scales the transverse shear stress. A suggested value is 5/6 for isotropic materials"/>
	      <value n="Integration_points" pn="Integration Points" v="2.0" values="1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0" 
		dict='1.0,1 point,2.0,2 points,3.0,3 points,4.0,4 points,5.0,5 points,6.0,6 points,7.0,7 points,8.0,8 points,9.0,9 points,10.0,10 points'                         
		help="Number of through Thickness Integration Points"/>  
		<value n="Reference_surface_factor" pn="Reference surface factor" v="0.0" help="Location of reference surface for 3D shell elements. In nonzero, the offset distance from the plane of the nodal points to the reference surface of the shell in the direction of the shell normal vector is a value offset=-0.5*(Reference surface factor)*(Average shell thickness). In this way we have, 1.0: Top Surface, 0.0: Mid-Surface and -1.0: Bottom Surface"/>
		<value n="Thickness_field" pn="Thickness Field" v="1" values="1,2" state="hidden"
		  dict='1,Continuous across the element edges,2,Discontinuous across the element edges'                      
		  help="Choose continuous mode for metalforming applications. Discontinous mode is necessary for crashworthiness simulations due to shell intersections, sharp included angles and non-smooth deformations"/> 
		  <value n="2D_solid_element" pn="2D Solid Element" v="1" values="1,2,3" state="hidden"
		  dict='1,Lagrangian,2,Eulerian,3,ALE' help="Specify 2D Solid Element Type"/>
		</container>
		<container n="Inertia" pn="Mass" icon="shells16">
		  <value n="m" pn="Mass" v="0.0" unit_magnitude="M" help="Translational mass"/>
		  <value n="Define_center" pn="Define center of mass" v="0" values="1,0" help="If not activated, center of mass will be taken as default" actualize_tree='1'>
		    <dependencies node="../value[@n='xc']" att1="state" v1="normal" value="1" />
		    <dependencies node="../value[@n='xc']" att1="state" v1="hidden" value="0"/>                
		    <dependencies node="../value[@n='yc']" att1="state" v1="normal" value="1"/>
		    <dependencies node="../value[@n='yc']" att1="state" v1="hidden" value="0"/>
		    <dependencies node="../value[@n='zc']" att1="state" v1="normal" value="1"/>
		    <dependencies node="../value[@n='zc']" att1="state" v1="hidden" value="0"/>
		  </value>
		  <value n="xc" pn="xc" v="0.0" unit_magnitude="L" state="hidden" help="x coordinate of center of mass"/>
		  <value n="yc" pn="yc" v="0.0" unit_magnitude="L" state="hidden" help="y coordinate of center of mass"/>
		  <value n="zc" pn="zc" v="0.0" unit_magnitude="L" state="hidden" help="z coordinate of center of mass"/>
		  <container n="Inertia_tensor" pn="Inertia tensor" icon="shells16">
		    <value n="Ixx" pn="Ixx" v="0.0" unit_magnitude="M*L^2" help="Ixx value of the inertia tensor"/>
		    <value n="Ixy" pn="Ixy" v="0.0" unit_magnitude="M*L^2" help="Ixy value of the inertia tensor"/>
		    <value n="Ixz" pn="Ixz" v="0.0" unit_magnitude="M*L^2" help="Ixz value of the inertia tensor"/>
		    <value n="Iyy" pn="Iyy" v="0.0" unit_magnitude="M*L^2" help="Iyy value of the inertia tensor"/>
		    <value n="Iyz" pn="Iyz" v="0.0" unit_magnitude="M*L^2" help="Iyz value of the inertia tensor"/>
		    <value n="Izz" pn="Izz" v="0.0" unit_magnitude="M*L^2" help="Izz value of the inertia tensor"/>                  
		  </container>
		</container>
	<container n="Hourglass" pn="Hourglass" icon="shells16">
	  <value n="Hourglass_type" pn="Hourglass control type" v="-1" values="-1,1,2,4,8" dict='-1,None,1,Standard LS-DYNA viscous form,2,Flanagan-Belytschko viscous form,4,Flanagan-Belytschko stiffness form,8,Warping stiffness activation (Fully integrated shell element)'
	    help="Define hourglass properties type (choose None if no hourglass effects are desired)">
	  <dependencies node="../value[@n='Hourglass_coefficient']" att1="state" v1="disabled" value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Hourglass_coefficient']" att1="state" v1="normal" not_value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Hourglass_coefficient']" att1="state" v1="normal" default="1" actualize="1"/>
	  <dependencies node="../value[@n='Linear_bulk']" att1="state" v1="disabled" value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Linear_bulk']" att1="state" v1="normal" not_value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Linear_bulk']" att1="state" v1="normal" default="1" actualize="1"/>
	  <dependencies node="../value[@n='Quadratic_bulk']" att1="state" v1="disabled" value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Quadratic_bulk']" att1="state" v1="normal" not_value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Quadratic_bulk']" att1="state" v1="normal" default="1" actualize="1"/>
	  </value>
	    <value n="Hourglass_coefficient" pn="Hourglass coefficient" v="0.10" help="Hourglass coefficient. Values that exceed 0.15 may cause instabilities. The stiffness forms can stiffen the response especially if deformations are large and therefore should be used with care"/>
	    <value n="Linear_bulk" pn="Linear bulk viscosity coefficient" v="1.5" help="Linear bulk viscosity coefficient"/>
	    <value n="Quadratic_bulk" pn="Quadratic bulk viscosity coefficient" v="0.06" help="Quadratic bulk viscosity coefficient"/>
	  </container>
	      </condition>
      <condition n="Anisotropic_Shell" pn="Anisotropic shell" ov="surface"
	ovm="element" icon="shells16" help="This property must be assigned to shells. 'Thickness' is the transversal dimension of the shell. It is possible to select a material with anisotropic properties">
	<symbol proc='lsdyna::draw_symbol_sections_surfaces' orientation='free'/>
	<container n="General" pn="General" icon="shells16">        
	  <container n="Geometry" pn="Geometry" icon="shells16">
	    <value n="Thickness" pn="Thickness" help="Shell thickness" v="0.25" unit_magnitude="L"/>
	  </container>
	  <value n="Material" pn="Material" editable='0' help="Please select an anisotropic material"
	    values_tree='[give_materials_list -user_defined 0 -has_container material_anisotropic_elastic]'>
	    <edit_command n="Edit materials" pn="Edit materials" icon="materialred16"
	    proc='edit_materials_list -has_container material_anisotropic_elastic'/>
	  </value>
	  <value n="Element_formulation" pn="Element formulation" v="0" values="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,21,22,23,24,25,26,27,43,44,99" 
	    dict='0,Unspecified,1,Hughes-Liu,2,Belytschko-Tsay,3,BCIZ Triangular Shell,4,C^0 Traingular Shell,5,Belytschko-Tsay membrane,6,S/R Hughes-Liu,7,S/R co-rotational Hughes-Liu,8,Belytschko-Leviathan shell,9,Fully int. Belytschko-Tsay membrane,10,Belytschko-Wong-Chiang,11,Fast co-rotational Hughes-Liu,12,Plane Stress (X-Y Plane),13,Plane Strain (X-Y Plane),14,Axissymmetric solid (area weighted),15,Axissymmetric solid (volume weighted),16,Fully integrated shell element,17,Fully integrated DKT (triangular shell element),18,Fully integrated linear DKT quad/triangular shell,20,Fully integrated linear assumed strain C^0 shell,21,Fully integrated  linear assumed strain C^0 shell,22,Linear shear panel element,23,8-node quadratic quadrilateral shell,24,6-node quadratic triangular shell,25,Belytschko-Tsay with thickness stretch,26,Fully integrated with thickness stretch,27,C^0 triangular shell with thickness stretch,43,Mesh free plane stress formulation,44,Mesh-free axisymmetrric solid formulation,99,Simplified linear element for time-domain vibration'
	      help="Specify the element Formulation Option">
	      <dependencies node="../value[@n='2D_solid_element']" att1="state" v1="normal" value="13"/> 
	      <dependencies node="../value[@n='2D_solid_element']" att1="state" v1="normal" value="14"/>
	      <dependencies node="../value[@n='2D_solid_element']" att1="state" v1="normal" value="15"/> 
	      <dependencies node="../value[@n='2D_solid_element']" att1="state" v1="hidden" value="25"/>
	      <dependencies node="../value[@n='2D_solid_element']" att1="state" v1="hidden" value="26"/> 
	      <dependencies node="../value[@n='2D_solid_element']" att1="state" v1="hidden" default="1"/>
	      <dependencies node="../value[@n='Thickness_field']" att1="state" v1="normal" value="25"/>          
	      <dependencies node="../value[@n='Thickness_field']" att1="state" v1="normal" value="26"/> 
	      <dependencies node="../value[@n='Thickness_field']" att1="state" v1="hidden" value="13"/>          
	      <dependencies node="../value[@n='Thickness_field']" att1="state" v1="hidden" value="14"/> 
	      <dependencies node="../value[@n='Thickness_field']" att1="state" v1="hidden" value="15"/>          
	      <dependencies node="../value[@n='Thickness_field']" att1="state" v1="hidden" default="1"/>
	    </value>
	    <value n="Shear_factor" pn="Shear correction factor" v="1.0" help="Shear correction factor which scales the transverse shear stress. A suggested value is 5/6 for isotropic materials"/>
	    <value n="Integration_points" pn="Integration Points" v="2.0" values="1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0" 
	      dict='1.0,1 point,2.0,2 points,3.0,3 points,4.0,4 points,5.0,5 points,6.0,6 points,7.0,7 points,8.0,8 points,9.0,9 points,10.0,10 points'                         
	      help="Number of through Thickness Integration Points"/>  
	      <value n="Reference_surface_factor" pn="Reference surface factor" v="0.0" help="Location of reference surface for 3D shell elements. In nonzero, the offset distance from the plane of the nodal points to the reference surface of the shell in the direction of the shell normal vector is a value offset=-0.5*(Reference surface factor)*(Average shell thickness). In this way we have, 1.0: Top Surface, 0.0: Mid-Surface and -1.0: Bottom Surface"/>
	      <value n="Thickness_field" pn="Thickness Field" v="1" values="1,2" state="hidden"
		dict='1,Continuous across the element edges,2,Discontinuous across the element edges'                      
		help="Choose continuous mode for metalforming applications. Discontinous mode is necessary for crashworthiness simulations due to shell intersections, sharp included angles and non-smooth deformations"/> 
		<value n="2D_solid_element" pn="2D Solid Element" v="1" values="1,2,3" state="hidden"
		dict='1,Lagrangian,2,Eulerian,3,ALE' help="Specify 2D Solid Element Type"/>
	      </container>

	      <container n="Inertia" pn="Mass" icon="shells16">
		<value n="m" pn="Mass" v="0.0" unit_magnitude="M" help="Translational mass"/>
		<value n="Define_center" pn="Define center of mass" v="0" values="1,0" help="If not activated, center of mass will be taken as default" actualize_tree='1'>
		  <dependencies node="../value[@n='xc']" att1="state" v1="normal" value="1" />
		  <dependencies node="../value[@n='xc']" att1="state" v1="hidden" value="0"/>                
		  <dependencies node="../value[@n='yc']" att1="state" v1="normal" value="1"/>
		  <dependencies node="../value[@n='yc']" att1="state" v1="hidden" value="0"/>
		  <dependencies node="../value[@n='zc']" att1="state" v1="normal" value="1"/>
		  <dependencies node="../value[@n='zc']" att1="state" v1="hidden" value="0"/>
		</value>
		<value n="xc" pn="xc" v="0.0" unit_magnitude="L" state="hidden" help="x coordinate of center of mass"/>
		<value n="yc" pn="yc" v="0.0" unit_magnitude="L" state="hidden" help="y coordinate of center of mass"/>
		<value n="zc" pn="zc" v="0.0" unit_magnitude="L" state="hidden" help="z coordinate of center of mass"/>
		<container n="Inertia_tensor" pn="Inertia tensor" icon="shells16">
		  <value n="Ixx" pn="Ixx" v="0.0" unit_magnitude="M*L^2" help="Ixx value of the inertia tensor"/>
		  <value n="Ixy" pn="Ixy" v="0.0" unit_magnitude="M*L^2" help="Ixy value of the inertia tensor"/>
		  <value n="Ixz" pn="Ixz" v="0.0" unit_magnitude="M*L^2" help="Ixz value of the inertia tensor"/>
		  <value n="Iyy" pn="Iyy" v="0.0" unit_magnitude="M*L^2" help="Iyy value of the inertia tensor"/>
		  <value n="Iyz" pn="Iyz" v="0.0" unit_magnitude="M*L^2" help="Iyz value of the inertia tensor"/>
		  <value n="Izz" pn="Izz" v="0.0" unit_magnitude="M*L^2" help="Izz value of the inertia tensor"/>                  
		</container>
	      </container>

	<container n="Hourglass" pn="Hourglass" icon="shells16">
	  <value n="Hourglass_type" pn="Hourglass control type" v="-1" values="-1,1,2,4,8" dict='-1,None,1,Standard LS-DYNA viscous form,2,Flanagan-Belytschko viscous form,4,Flanagan-Belytschko stiffness form,8,Warping stiffness activation (Fully integrated shell element)'
	    help="Define hourglass properties type (choose None if no hourglass effects are desired)">
	  <dependencies node="../value[@n='Hourglass_coefficient']" att1="state" v1="disabled" value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Hourglass_coefficient']" att1="state" v1="normal" not_value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Hourglass_coefficient']" att1="state" v1="normal" default="1" actualize="1"/>
	  <dependencies node="../value[@n='Linear_bulk']" att1="state" v1="disabled" value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Linear_bulk']" att1="state" v1="normal" not_value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Linear_bulk']" att1="state" v1="normal" default="1" actualize="1"/>
	  <dependencies node="../value[@n='Quadratic_bulk']" att1="state" v1="disabled" value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Quadratic_bulk']" att1="state" v1="normal" not_value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Quadratic_bulk']" att1="state" v1="normal" default="1" actualize="1"/>
	  </value>
	    <value n="Hourglass_coefficient" pn="Hourglass coefficient" v="0.10" help="Hourglass coefficient. Values that exceed 0.15 may cause instabilities. The stiffness forms can stiffen the response especially if deformations are large and therefore should be used with care"/>
	    <value n="Linear_bulk" pn="Linear bulk viscosity coefficient" v="1.5" help="Linear bulk viscosity coefficient"/>
	    <value n="Quadratic_bulk" pn="Quadratic bulk viscosity coefficient" v="0.06" help="Quadratic bulk viscosity coefficient"/>
	  </container>
	    </condition>
	  <!-- HIDDEN IN THIS LS-DYNA VERSION -->
	  <condition n="Laminate_shell" pn="Laminate shell" ov="surface" state="hidden"
	    ovm="element" icon="shells16" help="This property must be assigned to shells">
	    <symbol proc='lsdyna::draw_symbol_sections_surfaces' orientation='free'/>
	    <value n="laminate_properties" pn="Laminate properties" v="0" state="hidden"/>
	    <value n="win_info" pn="Win info" v="end" state="hidden"/>
	    <value n="Layer_number" pn="Number of layers" v="0" state="disabled"/>
	    <value n="Units" pn="Units" v="N-m-kg" state="disabled"/>
	    <value n="matlist" pn="Matlist" v="" state="hidden"/>
	    <value n="lamlist" pn="Lamlist" v="0" state="hidden"/>
	    <value n="mathick" pn="Mathick" v="" state="hidden"/>
	    <value n="thickness" pn="Thickness" v="0.0" state="disabled"/>
	    <edit_command n="Edit" pn="Edit" proc='composites_window'/>
	  </condition>
	  <!-- HIDDEN IN THIS LS-DYNA VERSION -->
	  <condition n="Stiffened_shell" pn="Stiffened shell" ov="surface" state="hidden"
	    ovm="element" icon="shells16" help="This property must be assigned to shells">
	    <symbol proc='lsdyna::draw_symbol_sections_surfaces' orientation='free'/>
	    <value n="StiffThickness" pn="Thickness" v="0.0" unit_magnitude="L" state="disabled"/>
	    <value n="StiffClearance" pn="Clearance" v="0.0" unit_magnitude="L" state="disabled"/>
	    <value n="StiffDirection" pn="Direction" v="-" state="disabled"/>
	    <value n="StiffMat" pn="Material" v="-" state="disabled"/>
	    <value n="StiffName" pn="Stiffener" v="-" state="disabled"/>
	    <value n="Units" pn="Units" v="N-m-kg" state="disabled"/>
	    <value n="StiffDm" pn="Dm" v="" state="hidden"/>
	    <value n="StiffDf" pn="Df" v="" state="hidden"/>
	    <value n="StiffDmf" pn="Dmf" v="" state="hidden"/>
	    <value n="StiffDc" pn="Dc" v="" state="hidden"/>
	    <value n="StiffWeight" pn="Weight" v="0.0" unit_magnitude="F/L^3" state="hidden"/>
	    <value n="StiffMaxstress" pn="Max.Stress" v="-" unit_magnitude="F/L^2" state="hidden"/>
	    <value n="StiffWx" pn="Wx" v="" state="hidden"/>
	    <value n="StiffWy" pn="Wy" v="" state="hidden"/>
	    <value n="StiffWt" pn="Wt" v="" state="hidden"/>
	    <value n="StiffAx" pn="Wx" v="" state="hidden"/>
	    <value n="StiffAy" pn="Wx" v="" state="hidden"/>
	    <value n="StiffAt" pn="Wx" v="" state="hidden"/>
	    <value n="StiffAtx" pn="Wx" v="" state="hidden"/>
	    <value n="StiffAty" pn="Wx" v="" state="hidden"/>
	    <edit_command n="Edit" pn="Edit" proc='stiffshell_window'/>
	  </condition>
	  <condition n="Plasticity_Shell" pn="Plastic Shell" ov="surface"
	    ovm="element" icon="shells16" help="This property must be assigned to shells. 'Thickness' is the transversal dimension of the shell. It is possible to select a material with plasticity properties"
	    state="[analysis_types_state Non-Linear_Static Non-Linear_Dynamic]" >
	    <symbol proc='lsdyna::draw_symbol_sections_surfaces' orientation='free'/>
	    <container n="General" pn="General" icon="shells16">
	      <container n="Geometry" pn="Geometry" icon="shells16">
		<value n="Thickness" pn="Thickness" v="0.25" unit_magnitude="L"/>             
	      </container>
	      <!-- HIDDEN IN THIS LS-DYNA VERSION -->
	      <value n="Num_layer" pn="Num layers" v="10" state="hidden" help="Number of layers that subdivide the shell in normal direction for integration"/>
	  <value n="Material" pn="Material" editable='0'
	    values_tree='[give_materials_list -user_defined 0 -has_container material_plasticity]'>
	    <edit_command n="Edit materials" pn="Edit materials" icon="materialgreen16"
	    proc='edit_materials_list -has_container material_plasticity'/>
	  </value>
	      <value n="Element_formulation" pn="Element formulation" v="0" values="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,21,22,23,24,25,26,27,43,44,99" 
		dict='0,Unspecified,1,Hughes-Liu,2,Belytschko-Tsay,3,BCIZ Triangular Shell,4,C^0 Traingular Shell,5,Belytschko-Tsay membrane,6,S/R Hughes-Liu,7,S/R co-rotational Hughes-Liu,8,Belytschko-Leviathan shell,9,Fully int. Belytschko-Tsay membrane,10,Belytschko-Wong-Chiang,11,Fast co-rotational Hughes-Liu,12,Plane Stress (X-Y Plane),13,Plane Strain (X-Y Plane),14,Axissymmetric solid (area weighted),15,Axissymmetric solid (volume weighted),16,Fully integrated shell element,17,Fully integrated DKT (triangular shell element),18,Fully integrated linear DKT quad/triangular shell,20,Fully integrated linear assumed strain C^0 shell,21,Fully integrated  linear assumed strain C^0 shell,22,Linear shear panel element,23,8-node quadratic quadrilateral shell,24,6-node quadratic triangular shell,25,Belytschko-Tsay with thickness stretch,26,Fully integrated with thickness stretch,27,C^0 triangular shell with thickness stretch,43,Mesh free plane stress formulation,44,Mesh-free axisymmetrric solid formulation,99,Simplified linear element for time-domain vibration'
		help="Specify the element Formulation Option">
		<dependencies node="../value[@n='2D_solid_element']" att1="state" v1="normal" value="13"/> 
		<dependencies node="../value[@n='2D_solid_element']" att1="state" v1="normal" value="14"/>
		<dependencies node="../value[@n='2D_solid_element']" att1="state" v1="normal" value="15"/> 
		<dependencies node="../value[@n='2D_solid_element']" att1="state" v1="hidden" value="25"/>
		<dependencies node="../value[@n='2D_solid_element']" att1="state" v1="hidden" value="26"/> 
		<dependencies node="../value[@n='2D_solid_element']" att1="state" v1="hidden" default="1"/>
		<dependencies node="../value[@n='Thickness_field']" att1="state" v1="normal" value="25"/>          
		<dependencies node="../value[@n='Thickness_field']" att1="state" v1="normal" value="26"/> 
		<dependencies node="../value[@n='Thickness_field']" att1="state" v1="hidden" value="13"/>          
		<dependencies node="../value[@n='Thickness_field']" att1="state" v1="hidden" value="14"/> 
		<dependencies node="../value[@n='Thickness_field']" att1="state" v1="hidden" value="15"/>          
		<dependencies node="../value[@n='Thickness_field']" att1="state" v1="hidden" default="1"/>
	      </value>
	      <value n="Shear_factor" pn="Shear correction factor" v="1.0" help="Shear correction factor which scales the transverse shear stress. A suggested value is 5/6 for isotropic materials"/>
	      <value n="Integration_points" pn="Integration Points" v="2.0" values="1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0" 
		dict='1.0,1 point,2.0,2 points,3.0,3 points,4.0,4 points,5.0,5 points,6.0,6 points,7.0,7 points,8.0,8 points,9.0,9 points,10.0,10 points'                         
		help="Number of through Thickness Integration Points"/>  
		<value n="Reference_surface_factor" pn="Reference surface factor" v="0.0" help="Location of reference surface for 3D shell elements. In nonzero, the offset distance from the plane of the nodal points to the reference surface of the shell in the direction of the shell normal vector is a value offset=-0.5*(Reference surface factor)*(Average shell thickness). In this way we have, 1.0: Top Surface, 0.0: Mid-Surface and -1.0: Bottom Surface"/>
		<value n="Thickness_field" pn="Thickness Field" v="1" values="1,2" state="hidden"
		  dict='1,Continuous across the element edges,2,Discontinuous across the element edges'                      
		  help="Choose continuous mode for metalforming applications. Discontinous mode is necessary for crashworthiness simulations due to shell intersections, sharp included angles and non-smooth deformations"/> 
		  <value n="2D_solid_element" pn="2D Solid Element" v="1" values="1,2,3" state="hidden"
		  dict='1,Lagrangian,2,Eulerian,3,ALE' help="Specify 2D Solid Element Type"/>
		</container>
		<container n="Inertia" pn="Mass" icon="shells16">
		  <value n="m" pn="Mass" v="0.0" unit_magnitude="M" help="Translational mass"/>
		  <value n="Define_center" pn="Define center of mass" v="0" values="1,0" help="If not activated, center of mass will be taken as default" actualize_tree='1'>
		    <dependencies node="../value[@n='xc']" att1="state" v1="normal" value="1" />
		    <dependencies node="../value[@n='xc']" att1="state" v1="hidden" value="0"/>                
		    <dependencies node="../value[@n='yc']" att1="state" v1="normal" value="1"/>
		    <dependencies node="../value[@n='yc']" att1="state" v1="hidden" value="0"/>
		    <dependencies node="../value[@n='zc']" att1="state" v1="normal" value="1"/>
		    <dependencies node="../value[@n='zc']" att1="state" v1="hidden" value="0"/>
		  </value>
		  <value n="xc" pn="xc" v="0.0" unit_magnitude="L" state="hidden" help="x coordinate of center of mass"/>
		  <value n="yc" pn="yc" v="0.0" unit_magnitude="L" state="hidden" help="y coordinate of center of mass"/>
		  <value n="zc" pn="zc" v="0.0" unit_magnitude="L" state="hidden" help="z coordinate of center of mass"/>
		  <container n="Inertia_tensor" pn="Inertia tensor" icon="shells16">
		    <value n="Ixx" pn="Ixx" v="0.0" unit_magnitude="M*L^2" help="Ixx value of the inertia tensor"/>
		    <value n="Ixy" pn="Ixy" v="0.0" unit_magnitude="M*L^2" help="Ixy value of the inertia tensor"/>
		    <value n="Ixz" pn="Ixz" v="0.0" unit_magnitude="M*L^2" help="Ixz value of the inertia tensor"/>
		    <value n="Iyy" pn="Iyy" v="0.0" unit_magnitude="M*L^2" help="Iyy value of the inertia tensor"/>
		    <value n="Iyz" pn="Iyz" v="0.0" unit_magnitude="M*L^2" help="Iyz value of the inertia tensor"/>
		    <value n="Izz" pn="Izz" v="0.0" unit_magnitude="M*L^2" help="Izz value of the inertia tensor"/>                  
		  </container>
		</container>
	<container n="Hourglass" pn="Hourglass" icon="shells16">
	  <value n="Hourglass_type" pn="Hourglass control type" v="-1" values="-1,1,2,4,8" dict='-1,None,1,Standard LS-DYNA viscous form,2,Flanagan-Belytschko viscous form,4,Flanagan-Belytschko stiffness form,8,Warping stiffness activation (Fully integrated shell element)'
	    help="Define hourglass properties type (choose None if no hourglass effects are desired)">
	  <dependencies node="../value[@n='Hourglass_coefficient']" att1="state" v1="disabled" value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Hourglass_coefficient']" att1="state" v1="normal" not_value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Hourglass_coefficient']" att1="state" v1="normal" default="1" actualize="1"/>
	  <dependencies node="../value[@n='Linear_bulk']" att1="state" v1="disabled" value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Linear_bulk']" att1="state" v1="normal" not_value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Linear_bulk']" att1="state" v1="normal" default="1" actualize="1"/>
	  <dependencies node="../value[@n='Quadratic_bulk']" att1="state" v1="disabled" value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Quadratic_bulk']" att1="state" v1="normal" not_value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Quadratic_bulk']" att1="state" v1="normal" default="1" actualize="1"/>
	  </value>
	    <value n="Hourglass_coefficient" pn="Hourglass coefficient" v="0.10" help="Hourglass coefficient. Values that exceed 0.15 may cause instabilities. The stiffness forms can stiffen the response especially if deformations are large and therefore should be used with care"/>
	    <value n="Linear_bulk" pn="Linear bulk viscosity coefficient" v="1.5" help="Linear bulk viscosity coefficient"/>
	    <value n="Quadratic_bulk" pn="Quadratic bulk viscosity coefficient" v="0.06" help="Quadratic bulk viscosity coefficient"/>
	  </container>
	      </condition>
	    </container>
	    <container n="Solids" pn="Solids"  icon="solid16">
	      <!--OLD STATE: state="[check_state {Solids}]" -->
	      <condition n="Isotropic_Solid" pn="Isotropic solid" ov="volume" icon="solid16"
		ovm="element"  help="This property must be assigned to volumes. 'E' is the Young Modulus and 'nu' is the Poisson coefficient. \nUnits in International System for values are:\n\t(N/m2) for 'E'\n\t(adimensional) nu\n\t(N/m3) for the Specific_weight.">
		<symbol proc='lsdyna::draw_symbol_solid_properties' orientation='global'/>
		<container n="General" pn="General" icon="solid16">
		  <container n="Material" pn="Material" icon="solid16">
		    <value n="Material" pn="Material" editable='0' help="Choose an isotropic material"
	      values_tree='[give_materials_list]' v='{/*/translations/translation[@pn="User defined"]/@pn}'>
	      
	      <dependencies node="../value[@n='E']" att1="state" v1="normal" value='{/*/translations/translation[@pn="User defined"]/@pn}'/>
	      <dependencies node="../value[@n='nu']" att1="state" v1="normal" value='{/*/translations/translation[@pn="User defined"]/@pn}'/>
	      <dependencies node="../value[@n='Specific_weight']" att1="state" v1="normal" value='{/*/translations/translation[@pn="User defined"]/@pn}'/>
	      
	      <dependencies node="../value[@n='E']" att1="state" v1="disabled" att2="v" v2='[give_mat_prop E]' default="1"/>
	      <dependencies node="../value[@n='E']" att1="units" v1='[give_mat_units E]' default="1"/>
	      
	      <dependencies node="../value[@n='nu']" att1="state" v1="disabled" att2="v" v2='[give_mat_prop nu]' default="1"/>
	      
	      <dependencies node="../value[@n='Specific_weight']" att1="state" v1="disabled" att2="v" v2='[give_mat_prop Specific_weight]' default="1"/>
	      <dependencies node="../value[@n='Specific_weight']" att1="units" v1='[give_mat_units Specific_weight]' default="1"/>
	      
	    </value>
	    <value n="E" pn="E" v="2.1e11" help="Young modulus"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <value n='nu' pn='\u03bd' v='0.3' help='Poisson coeficient'/>
	    <value n="Specific_weight" pn="Specific weight" help="Specific Weight" v="76900" unit_magnitude="F/L^3" units="N/m^3"/>
	  </container>
	  <value n="Element_formulation" pn="Element formulation" v="1" values="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,41,99"
	    dict='0,1 point Corotational for *MAT_MODIFIED_HONEYCOMB,1,Constant Stress,2,Fully Integrated S/R,3,Fully integrated quadratic 8 noded,4,S/R quadratic tetrahedron,5,1 Point ALE,6,1 Point Eulerian,7,1 Point Eulerian Ambient,8,Acoustic,9,1 Point Corotational for *MAT_MODIFIED_HONEYCOMB,10,1 Point Tetrahedron,11,1 Point ALE Multilateral,12,1 Point Integration with single material and void,13,1 Point Nodal Pressure Tetrahedron,14,8 Point Acoustic,15,2 Point Pentahedron Element,16,4 or 5 Points 10-Noded tetrahedron,17,10-noded composite tetrahedron,18,8 points enhanced strain,19,4 Point cohesive Element,20,4 Points cohesive elements with offsets,41,Mesh-free solid simulation,99,Simplified linear element for time domain vibration'
	    help="Specify the element Formulation Option">
	    <dependencies node="../value[@n='Ambient_element']" att1="state" v1="normal" value="7"/>
	    <dependencies node="../value[@n='Ambient_element']" att1="state" v1="normal" value="12"/> 
	    <dependencies node="../value[@n='Ambient_element']" att1="state" v1="normal" value="11"/> 
	    <dependencies node="../value[@n='Ambient_element']" att1="state" v1="hidden" default="1"/>                      
	  </value>
	  <value n="Ambient_element" pn="Ambient element" v="4" values="1,2,3,4" dict='1,Temperature,2,Pressure and Temperature,3,Pressure Outflow,4,Pressure Inflow'
	  state="disabled" help="Ambient Element Type Definition" />
	  <value n="Create_set" pn="Create a set of solids" v="0" values="1,0" help="If activated, all selected solid elements will be treated as a solid set by LS-DYNA"/>
	</container>
	<container n="Inertia" pn="Mass" icon="solid16">
	  <value n="m" pn="Mass" v="0.0" unit_magnitude="M" help="Translational mass"/>
	  <value n="Define_center" pn="Define center of mass" v="0" values="1,0" help="If not activated, center of mass will be taken as default" actualize_tree='1'>
	    <dependencies node="../value[@n='xc']" att1="state" v1="normal" value="1" />
	    <dependencies node="../value[@n='xc']" att1="state" v1="hidden" value="0"/>                
	    <dependencies node="../value[@n='yc']" att1="state" v1="normal" value="1"/>
	    <dependencies node="../value[@n='yc']" att1="state" v1="hidden" value="0"/>
	    <dependencies node="../value[@n='zc']" att1="state" v1="normal" value="1"/>
	    <dependencies node="../value[@n='zc']" att1="state" v1="hidden" value="0"/>
	  </value>
	  <value n="xc" pn="xc" v="0.0" unit_magnitude="L" state="hidden" help="x coordinate of center of mass"/>
	  <value n="yc" pn="yc" v="0.0" unit_magnitude="L" state="hidden" help="y coordinate of center of mass"/>
	  <value n="zc" pn="zc" v="0.0" unit_magnitude="L" state="hidden" help="z coordinate of center of mass"/>
	  <container n="Inertia_tensor" pn="Inertia tensor" icon="solid16">
	    <value n="Ixx" pn="Ixx" v="0.0" unit_magnitude="M*L^2" help="Ixx value of the inertia tensor"/>
	    <value n="Ixy" pn="Ixy" v="0.0" unit_magnitude="M*L^2" help="Ixy value of the inertia tensor"/>
	    <value n="Ixz" pn="Ixz" v="0.0" unit_magnitude="M*L^2" help="Ixz value of the inertia tensor"/>
	    <value n="Iyy" pn="Iyy" v="0.0" unit_magnitude="M*L^2" help="Iyy value of the inertia tensor"/>
	    <value n="Iyz" pn="Iyz" v="0.0" unit_magnitude="M*L^2" help="Iyz value of the inertia tensor"/>
	    <value n="Izz" pn="Izz" v="0.0" unit_magnitude="M*L^2" help="Izz value of the inertia tensor"/>                  
	  </container>
	</container>
	<container n="Hourglass" pn="Hourglass" icon="solid16">
	  <value n="Hourglass_type" pn="Hourglass control type" v="-1" values="-1,1,2,3,4,5,6,7,8,9" dict='-1,None,1,Standard LS-DYNA viscous form,2,Flanagan-Belytschko viscous form,3,Flanagan-Belytschko viscous form with exact volume integration,4,Flanagan-Belytschko stiffness form,5,Flanagan-Belytschko stiffness form with exact volume integration,6,Belytschko-Bindeman co-rotational stiffness form,7,Linear total strain form,8,Warping stiffness activation (Fully integrated shell element),9,Puso enhanced assumed strain stiffness form'
	    help="Define hourglass properties type (choose None if no hourglass effects are desired)">
	  <dependencies node="../value[@n='Hourglass_coefficient']" att1="state" v1="disabled" value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Hourglass_coefficient']" att1="state" v1="normal" not_value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Hourglass_coefficient']" att1="state" v1="normal" default="1" actualize="1"/>
	  <dependencies node="../value[@n='Linear_bulk']" att1="state" v1="disabled" value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Linear_bulk']" att1="state" v1="normal" not_value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Linear_bulk']" att1="state" v1="normal" default="1" actualize="1"/>
	  <dependencies node="../value[@n='Quadratic_bulk']" att1="state" v1="disabled" value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Quadratic_bulk']" att1="state" v1="normal" not_value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Quadratic_bulk']" att1="state" v1="normal" default="1" actualize="1"/>
	  </value>
	    <value n="Hourglass_coefficient" pn="Hourglass coefficient" v="0.10" help="Hourglass coefficient. Values that exceed 0.15 may cause instabilities. The stiffness forms can stiffen the response especially if deformations are large and therefore should be used with care"/>
	    <value n="Linear_bulk" pn="Linear bulk viscosity coefficient" v="1.5" help="Linear bulk viscosity coefficient"/>
	    <value n="Quadratic_bulk" pn="Quadratic bulk viscosity coefficient" v="0.06" help="Quadratic bulk viscosity coefficient"/>
	  </container>
      </condition>
      <condition n="Viscoelastic_Solid" pn="Viscoelastic solid" ov="volume" icon="solid16"
		ovm="element"  help="This property must be assigned to volumes. 'E' is the Young Modulus and 'nu' is the Poisson coefficient. \nUnits in International System for values are:\n\t(N/m2) for 'E'\n\t(adimensional) nu\n\t(N/m3) for the Specific_weight.">
		<symbol proc='lsdyna::draw_symbol_solid_properties' orientation='global'/>
		<container n="General" pn="General" icon="solid16">                
	  <value n="Element_formulation" pn="Element formulation" v="1" values="0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,41,99"
	    dict='0,1 point Corotational for *MAT_MODIFIED_HONEYCOMB,1,Constant Stress,2,Fully Integrated S/R,3,Fully integrated quadratic 8 noded,4,S/R quadratic tetrahedron,5,1 Point ALE,6,1 Point Eulerian,7,1 Point Eulerian Ambient,8,Acoustic,9,1 Point Corotational for *MAT_MODIFIED_HONEYCOMB,10,1 Point Tetrahedron,11,1 Point ALE Multilateral,12,1 Point Integration with single material and void,13,1 Point Nodal Pressure Tetrahedron,14,8 Point Acoustic,15,2 Point Pentahedron Element,16,4 or 5 Points 10-Noded tetrahedron,17,10-noded composite tetrahedron,18,8 points enhanced strain,19,4 Point cohesive Element,20,4 Points cohesive elements with offsets,41,Mesh-free solid simulation,99,Simplified linear element for time domain vibration'
	    help="Specify the element Formulation Option">
	    <dependencies node="../value[@n='Ambient_element']" att1="state" v1="normal" value="7"/>
	    <dependencies node="../value[@n='Ambient_element']" att1="state" v1="normal" value="12"/> 
	    <dependencies node="../value[@n='Ambient_element']" att1="state" v1="normal" value="11"/> 
	    <dependencies node="../value[@n='Ambient_element']" att1="state" v1="hidden" default="1"/>                      
	  </value>
	  <value n="Ambient_element" pn="Ambient element" v="4" values="1,2,3,4" dict='1,Temperature,2,Pressure and Temperature,3,Pressure Outflow,4,Pressure Inflow'
	  state="disabled" help="Ambient Element Type Definition" />             
	  <value n="Material" pn="Material" editable='0'
	    values_tree='[give_materials_list -user_defined 0 -has_container material_viscoelastic]'>
	    <edit_command n="Edit materials" pn="Edit materials" icon="materialpurple16"
	    proc='edit_materials_list -has_container material_viscoelastic'/>
	  </value>
	  <value n="Create_set" pn="Create a set of solids" v="0" values="1,0" help="If activated, all selected solid elements will be treated as a solid set by LS-DYNA"/>
	</container>
	<container n="Inertia" pn="Mass" icon="solid16">
	  <value n="m" pn="Mass" v="0.0" unit_magnitude="M" help="Translational mass"/>
	  <value n="Define_center" pn="Define center of mass" v="0" values="1,0" help="If not activated, center of mass will be taken as default" actualize_tree='1'>
	    <dependencies node="../value[@n='xc']" att1="state" v1="normal" value="1" />
	    <dependencies node="../value[@n='xc']" att1="state" v1="hidden" value="0"/>                
	    <dependencies node="../value[@n='yc']" att1="state" v1="normal" value="1"/>
	    <dependencies node="../value[@n='yc']" att1="state" v1="hidden" value="0"/>
	    <dependencies node="../value[@n='zc']" att1="state" v1="normal" value="1"/>
	    <dependencies node="../value[@n='zc']" att1="state" v1="hidden" value="0"/>
	  </value>
	  <value n="xc" pn="xc" v="0.0" unit_magnitude="L" state="hidden" help="x coordinate of center of mass"/>
	  <value n="yc" pn="yc" v="0.0" unit_magnitude="L" state="hidden" help="y coordinate of center of mass"/>
	  <value n="zc" pn="zc" v="0.0" unit_magnitude="L" state="hidden" help="z coordinate of center of mass"/>
	  <container n="Inertia_tensor" pn="Inertia tensor" icon="solid16">
	    <value n="Ixx" pn="Ixx" v="0.0" unit_magnitude="M*L^2" help="Ixx value of the inertia tensor"/>
	    <value n="Ixy" pn="Ixy" v="0.0" unit_magnitude="M*L^2" help="Ixy value of the inertia tensor"/>
	    <value n="Ixz" pn="Ixz" v="0.0" unit_magnitude="M*L^2" help="Ixz value of the inertia tensor"/>
	    <value n="Iyy" pn="Iyy" v="0.0" unit_magnitude="M*L^2" help="Iyy value of the inertia tensor"/>
	    <value n="Iyz" pn="Iyz" v="0.0" unit_magnitude="M*L^2" help="Iyz value of the inertia tensor"/>
	    <value n="Izz" pn="Izz" v="0.0" unit_magnitude="M*L^2" help="Izz value of the inertia tensor"/>                  
	  </container>
	</container>
		<container n="Hourglass" pn="Hourglass" icon="solid16">
	  <value n="Hourglass_type" pn="Hourglass control type" v="-1" values="-1,1,2,3,4,5,6,7,8,9" dict='-1,None,1,Standard LS-DYNA viscous form,2,Flanagan-Belytschko viscous form,3,Flanagan-Belytschko viscous form with exact volume integration,4,Flanagan-Belytschko stiffness form,5,Flanagan-Belytschko stiffness form with exact volume integration,6,Belytschko-Bindeman co-rotational stiffness form,7,Linear total strain form,8,Warping stiffness activation (Fully integrated shell element),9,Puso enhanced assumed strain stiffness form'
	    help="Define hourglass properties type (choose None if no hourglass effects are desired)">
	  <dependencies node="../value[@n='Hourglass_coefficient']" att1="state" v1="disabled" value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Hourglass_coefficient']" att1="state" v1="normal" not_value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Hourglass_coefficient']" att1="state" v1="normal" default="1" actualize="1"/>
	  <dependencies node="../value[@n='Linear_bulk']" att1="state" v1="disabled" value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Linear_bulk']" att1="state" v1="normal" not_value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Linear_bulk']" att1="state" v1="normal" default="1" actualize="1"/>
	  <dependencies node="../value[@n='Quadratic_bulk']" att1="state" v1="disabled" value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Quadratic_bulk']" att1="state" v1="normal" not_value="-1" actualize="1"/>
	  <dependencies node="../value[@n='Quadratic_bulk']" att1="state" v1="normal" default="1" actualize="1"/>
	  </value>
	    <value n="Hourglass_coefficient" pn="Hourglass coefficient" v="0.10" help="Hourglass coefficient. Values that exceed 0.15 may cause instabilities. The stiffness forms can stiffen the response especially if deformations are large and therefore should be used with care"/>
	    <value n="Linear_bulk" pn="Linear bulk viscosity coefficient" v="1.5" help="Linear bulk viscosity coefficient"/>
	    <value n="Quadratic_bulk" pn="Quadratic bulk viscosity coefficient" v="0.06" help="Quadratic bulk viscosity coefficient"/>
	  </container>
      </condition>
    </container>
    <container n="Discrete" pn="Discrete"  icon="spring16">
      <condition n="Discrete" pn="Discrete" ov="point" icon="spring16"
	ovm="node"  help="This property must be assigned to points or nodes in order to simulate springs or dampers">
	<!--  THIS SYMBOL MUST BE CHANGED  -->
	<symbol proc='lsdyna::draw_symbol_punctual_load' orientation='global'/>
	<!--                     VALUES ARE NOT 1 AND 0 TO AVOID THE TICKBOX -->
	<value n="Motion" pn="Motion" v="2" values="2,1" dict='2,Torsional spring/damper,1,Translational spring/damper'/>
	<value n="Dimension" pn="Dimension" v="1" values="1,2,3" dict='1,1 Dimension,2,2 Dimensions,3,3 Dimensions'>
	  <dependencies node="../value[@n='Material_2']" att1="state" v1="normal" value="2"/>
	  <dependencies node="../value[@n='Material_2']" att1="state" v1="normal" value="3"/>
	  <dependencies node="../value[@n='Material_2']" att1="state" v1="hidden" default="1"/>
	  <dependencies node="../value[@n='Material_3']" att1="state" v1="normal" value="3"/>
	  <dependencies node="../value[@n='Material_3']" att1="state" v1="hidden" value="2"/>
	  <dependencies node="../value[@n='Material_3']" att1="state" v1="hidden" default="1"/>
	</value>
	<!--USED FOR SYMBOL WRITING IN LS-DYNA -->
	<value n="X_Force" pn="X force" v="1.0" unit_magnitude="F" state="hidden"/>
	<value n="Y_Force" pn="Y force" v="0.0" unit_magnitude="F" state="hidden"/>
	<value n="Z_Force" pn="Z force" v="0.0" unit_magnitude="F" state="hidden"/>
	<value n="Mx_Force" pn="Mx force" v="0.0" unit_magnitude="F*L" state="hidden"/>
	<value n="My_Force" pn="My force" v="0.0" unit_magnitude="F*L" state="hidden"/>
	<value n="Mz_Force" pn="Mz force" v="0.0" unit_magnitude="F*L" state="hidden"/>
	<value n="Axes" pn="Axes" v="global" values="global,local"
	dict='global,global axes,local,local axes' editable="0"/>
	<value n="Material_1" pn="Material x" editable='0' 
	  values_tree='[give_materials_list -user_defined 0 -has_container material_discrete]'>
	  <edit_command n="Edit materials 1" pn="Edit materials" icon="materialyellow16"
	  proc='edit_materials_list -has_container material_discrete -position array_1'/>
	</value>
	<value n="Material_2" pn="Material y" editable='0'
	  values_tree='[give_materials_list -user_defined 0 -has_container material_discrete]'>
	  <edit_command n="Edit materials 2" pn="Edit materials" icon="materialyellow16"
	  proc='edit_materials_list -has_container material_discrete -position array_2'/>
	</value>
	<value n="Material_3" pn="Material z" editable='0'
	  values_tree='[give_materials_list -user_defined 0 -has_container material_discrete]'>
	  <edit_command n="Edit materials 3" pn="Edit materials" icon="materialyellow16"
	  proc='edit_materials_list -has_container material_discrete -position array_3'/>
	</value>
      </condition>
    </container>
    <container n="Seatbelts" pn="Seatbelts" icon="seatbelt16" help="Seatbelts must be defined in this section">
      <condition n="Seatbelt" pn="Seatbelt" ov="line"
	ovm="element"  icon="seatbelt16" help="This property must be assigned to lines or 1D mesh elements in order to simulate seatbelts elements">
	<!-- SYMBOL MUST BE IMPLEMENTED-->
	<value n="Material" pn="Material" editable='0'
	  values_tree='[give_materials_list -user_defined 0 -has_container material_seatbelt]'>
	  <edit_command n="Edit materials" pn="Edit materials" icon="materialturquoise16"
	  proc='edit_materials_list -has_container material_seatbelt'/>
	</value>
      </condition>

 <condition n="Retractor" pn="Retractor" ov="line"
	ovm="element"  icon="seatbelt16" help="This property must be assigned to 1D mesh elements in order to simulate seatbelt retractor provided with acceleration sensors">
	<edit_command n="draw_points" pn="Draw Retractor and sensor nodes" proc="draw_points" help="Click to draw retractor and sensors introduced nodes. Please press ESC when finished" actualize="1" actualize_tree='1'/>
	<!-- SYMBOL MUST BE IMPLEMENTED-->
	<!--         WE ADD MESH UNITS INFORMATION (TO PUT IT AS COORDINATE UNITS). JOINT TYPE IS ALSO SPECIFIED -->
	<value n="Joint_type" pn="Joint type" v="Seatbelt" state="hidden"/> 
	<value n='units_mesh_auxiliar' pn='Mesh units auxiliar' state="hidden" editable='0' v='{/lsdyna_data/units/unit_mesh}'/>

	<container n="Retractor" pn="Retractor" icon="seatbelt16" help="Define Retractor properties">
	  <!--         Taken joint points selection tool -->
	  <value n="Automatic_0" pn="Automatic" v="Click to select retractor node from the screen" help="You can both pick the point up from the screen or enter its coordinates manually">
	    <edit_command n="pick_points_r" pn="Pick sensor node" proc="pick_points 0" actualize="1" help="Click to pick the first sensor node up from the screen" actualize_tree='1' icon="select_point16"/> 
	  </value>
	  <value n="x_r" pn="Retractor x" v="0" unit_magnitude="L" editable='1' help="x coordinate of the retractor node" actualize="1" actualize_tree='1'/>
	  <value n="y_r" pn="Retractor y" v="0" unit_magnitude="L" editable='1' help="y coordinate of the retractor node" actualize="1" actualize_tree='1'/>
	  <value n="z_r" pn="Retractor z" v="0" unit_magnitude="L" editable='1' help="z coordinate of the retractor node" actualize="1" actualize_tree='1'/>          
	  <container n="Retractor_data" pn="Retractor Data" icon="seatbelt16" help="Please enter retractor data">
	    <value n="Sensor_number" pn="Sensor number" v="1" values="1,2,3,4" help="Please specify how many seatbelt sensor elements will be defined">

	      <!-- SENSOR 2 DEPENDENCIES -->

	      <dependencies node="../../../container[@n='Sensor_2']/value[@n='Automatic_2']" att1="state" v1="disabled" value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_2']/value[@n='Automatic_2']" att1="state" v1="normal" not_value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_2']/value[@n='Automatic_2']" att1="state" v1="normal" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_2']/value[@n='x_2']" att1="state" v1="disabled" value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_2']/value[@n='x_2']" att1="state" v1="normal" not_value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_2']/value[@n='x_2']" att1="state" v1="normal" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_2']/value[@n='y_2']" att1="state" v1="disabled" value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_2']/value[@n='y_2']" att1="state" v1="normal" not_value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_2']/value[@n='y_2']" att1="state" v1="normal" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_2']/value[@n='z_2']" att1="state" v1="disabled" value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_2']/value[@n='z_2']" att1="state" v1="normal" not_value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_2']/value[@n='z_2']" att1="state" v1="normal" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_2']/container[@n='Sensor_node_2']/value[@n='Sensor_type_2']" att1="state" v1="disabled" value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_2']/container[@n='Sensor_node_2']/value[@n='Sensor_type_2']" att1="state" v1="normal" not_value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_2']/container[@n='Sensor_node_2']/value[@n='Sensor_type_2']" att1="state" v1="normal" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_2']/container[@n='Sensor_node_2']/value[@n='Sensor_activation_2']" att1="state" v1="disabled" value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_2']/container[@n='Sensor_node_2']/value[@n='Sensor_activation_2']" att1="state" v1="normal" not_value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_2']/container[@n='Sensor_node_2']/value[@n='Sensor_activation_2']" att1="state" v1="normal" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_2']/container[@n='Sensor_node_2']/value[@n='Degree_freedom_2']" att1="state" v1="disabled" value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_2']/container[@n='Sensor_node_2']/value[@n='Degree_freedom_2']" att1="state" v1="normal" not_value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_2']/container[@n='Sensor_node_2']/value[@n='Degree_freedom_2']" att1="state" v1="normal" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_2']/container[@n='Sensor_node_2']/value[@n='Activating_acceleration_2']" att1="state" v1="disabled" value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_2']/container[@n='Sensor_node_2']/value[@n='Activating_acceleration_2']" att1="state" v1="normal" not_value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_2']/container[@n='Sensor_node_2']/value[@n='Activating_acceleration_2']" att1="state" v1="normal" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_2']/container[@n='Sensor_node_2']/value[@n='Time_over_2']" att1="state" v1="disabled" value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_2']/container[@n='Sensor_node_2']/value[@n='Time_over_2']" att1="state" v1="normal" not_value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_2']/container[@n='Sensor_node_2']/value[@n='Time_over_2']" att1="state" v1="normal" default="1" actualize="1"/>

	      <!-- SENSOR 4 DEPENDENCIES -->

	      <dependencies node="../../../container[@n='Sensor_4']/value[@n='Automatic_4']" att1="state" v1="normal" value="4" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_4']/value[@n='Automatic_4']" att1="state" v1="disabled" not_value="4" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_4']/value[@n='Automatic_4']" att1="state" v1="disabled" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_4']/value[@n='x_4']" att1="state" v1="normal" value="4" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_4']/value[@n='x_4']" att1="state" v1="disabled" not_value="4" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_4']/value[@n='x_4']" att1="state" v1="disabled" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_4']/value[@n='y_4']" att1="state" v1="normal" value="4" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_4']/value[@n='y_4']" att1="state" v1="disabled" not_value="4" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_4']/value[@n='y_4']" att1="state" v1="disabled" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_4']/value[@n='z_4']" att1="state" v1="normal" value="4" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_4']/value[@n='z_4']" att1="state" v1="disabled" not_value="4" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_4']/value[@n='z_4']" att1="state" v1="disabled" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_4']/container[@n='Sensor_node_4']/value[@n='Sensor_type_4']" att1="state" v1="normal" value="4" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_4']/container[@n='Sensor_node_4']/value[@n='Sensor_type_4']" att1="state" v1="disabled" not_value="4" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_4']/container[@n='Sensor_node_4']/value[@n='Sensor_type_4']" att1="state" v1="disabled" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_4']/container[@n='Sensor_node_4']/value[@n='Sensor_activation_4']" att1="state" v1="normal" value="4" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_4']/container[@n='Sensor_node_4']/value[@n='Sensor_activation_4']" att1="state" v1="disabled" not_value="4" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_4']/container[@n='Sensor_node_4']/value[@n='Sensor_activation_4']" att1="state" v1="disabled" default="4" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_4']/container[@n='Sensor_node_4']/value[@n='Degree_freedom_4']" att1="state" v1="normal" value="4" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_4']/container[@n='Sensor_node_4']/value[@n='Degree_freedom_4']" att1="state" v1="disabled" not_value="4" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_4']/container[@n='Sensor_node_4']/value[@n='Degree_freedom_4']" att1="state" v1="disabled" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_4']/container[@n='Sensor_node_4']/value[@n='Activating_acceleration_4']" att1="state" v1="normal" value="4" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_4']/container[@n='Sensor_node_4']/value[@n='Activating_acceleration_4']" att1="state" v1="disabled" not_value="4" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_4']/container[@n='Sensor_node_4']/value[@n='Activating_acceleration_4']" att1="state" v1="disabled" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_4']/container[@n='Sensor_node_4']/value[@n='Time_over_4']" att1="state" v1="normal" value="4" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_4']/container[@n='Sensor_node_4']/value[@n='Time_over_4']" att1="state" v1="disabled" not_value="4" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_4']/container[@n='Sensor_node_4']/value[@n='Time_over_4']" att1="state" v1="disabled" default="1" actualize="1"/>

	       <!-- SENSOR 3 DEPENDENCIES -->

	      <dependencies node="../../../container[@n='Sensor_3']/value[@n='Automatic_3']" att1="state" v1="disabled" value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/value[@n='Automatic_3']" att1="state" v1="disabled" value="2" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/value[@n='Automatic_3']" att1="state" v1="normal" value="3" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/value[@n='Automatic_3']" att1="state" v1="normal" value="4" actualize="1"/>              
	      <dependencies node="../../../container[@n='Sensor_3']/value[@n='Automatic_3']" att1="state" v1="disabled" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_3']/value[@n='x_3']" att1="state" v1="disabled" value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/value[@n='x_3']" att1="state" v1="disabled" value="2" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/value[@n='x_3']" att1="state" v1="normal" value="3" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/value[@n='x_3']" att1="state" v1="normal" value="4" actualize="1"/>              
	      <dependencies node="../../../container[@n='Sensor_3']/value[@n='x_3']" att1="state" v1="disabled" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_3']/value[@n='y_3']" att1="state" v1="disabled" value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/value[@n='y_3']" att1="state" v1="disabled" value="2" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/value[@n='y_3']" att1="state" v1="normal" value="3" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/value[@n='y_3']" att1="state" v1="normal" value="4" actualize="1"/>              
	      <dependencies node="../../../container[@n='Sensor_3']/value[@n='y_3']" att1="state" v1="disabled" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_3']/value[@n='z_3']" att1="state" v1="disabled" value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/value[@n='z_3']" att1="state" v1="disabled" value="2" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/value[@n='z_3']" att1="state" v1="normal" value="3" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/value[@n='z_3']" att1="state" v1="normal" value="4" actualize="1"/>              
	      <dependencies node="../../../container[@n='Sensor_3']/value[@n='z_3']" att1="state" v1="disabled" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Sensor_type_3']" att1="state" v1="disabled" value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Sensor_type_3']" att1="state" v1="disabled" value="2" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Sensor_type_3']" att1="state" v1="normal" value="3" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Sensor_type_3']" att1="state" v1="normal" value="4" actualize="1"/>              
	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Sensor_type_3']" att1="state" v1="disabled" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Sensor_activation_3']" att1="state" v1="disabled" value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Sensor_activation_3']" att1="state" v1="disabled" value="2" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Sensor_activation_3']" att1="state" v1="normal" value="3" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Sensor_activation_3']" att1="state" v1="normal" value="4" actualize="1"/>              
	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Sensor_activation_3']" att1="state" v1="disabled" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Degree_freedom_3']" att1="state" v1="disabled" value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Degree_freedom_3']" att1="state" v1="disabled" value="2" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Degree_freedom_3']" att1="state" v1="normal" value="3" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Degree_freedom_3']" att1="state" v1="normal" value="4" actualize="1"/>              
	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Degree_freedom_3']" att1="state" v1="disabled" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Activating_acceleration_3']" att1="state" v1="disabled" value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Activating_acceleration_3']" att1="state" v1="disabled" value="2" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Activating_acceleration_3']" att1="state" v1="normal" value="3" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Activating_acceleration_3']" att1="state" v1="normal" value="4" actualize="1"/>              
	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Activating_acceleration_3']" att1="state" v1="disabled" default="1" actualize="1"/>

	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Time_over_3']" att1="state" v1="disabled" value="1" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Time_over_3']" att1="state" v1="disabled" value="2" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Time_over_3']" att1="state" v1="normal" value="3" actualize="1"/>
	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Time_over_3']" att1="state" v1="normal" value="4" actualize="1"/>              
	      <dependencies node="../../../container[@n='Sensor_3']/container[@n='Sensor_node_3']/value[@n='Time_over_3']" att1="state" v1="disabled" default="1" actualize="1"/>

	    </value>
	    <value n="Factor_load" pn="Load curve" v="" help="Please edit load curve for loading (Pull-out,Force). If left blank, not defined"
	    function="[loads_function Seatbelt_retractor]" pn_function="F" unit_magnitude="F" units="N" function_func="lsdyna::function_loads"/>
	    <value n="Factor_unload" pn="Unload curve" v="" help="Please edit load curve for unloading (Pull-out,Force). If left blank, not defined"
	    function="[loads_function Seatbelt_retractor]" pn_function="F" unit_magnitude="F" units="N" function_func="lsdyna::function_loads"/>
	    <value n="Fed_length" pn="Fed length" v="0.0" unit_magnitude="L" units="m" help="Fed length"/>   
	  </container>
	</container>

	<container n="Sensor" pn="Sensor 1" icon="seatbelt16" help="Define Seatbelt sensor 1">
	  <!--         Taken joint points selection tool -->
	  <value n="Automatic" pn="Automatic" v="Click to select sensor node from the screen" help="You can both pick the point up from the screen or enter its coordinates manually">
	    <edit_command n="pick_points" pn="Pick sensor node" proc="pick_points 1" actualize="1" help="Click to pick the first sensor node up from the screen" actualize_tree='1' icon="select_point16"/> 
	  </value>
	  <value n="x" pn="Sensor1 x" v="0" unit_magnitude="L" editable='1' help="x coordinate of the first sensor node" actualize="1" actualize_tree='1'/>
	  <value n="y" pn="Sensor1 y" v="0" unit_magnitude="L" editable='1' help="y coordinate of the first sensor node" actualize="1" actualize_tree='1'/>
	  <value n="z" pn="Sensor1 z" v="0" unit_magnitude="L" editable='1' help="z coordinate of the first sensor node" actualize="1" actualize_tree='1'/>  
	  <container n="Sensor_node_1" pn="Sensor Data" icon="seatbelt16" help="Please enter sensor data">
	    <value n="Sensor_type" pn="Sensor type" v="1" values="1" dict='1,Acceleration of node' help="Please choose sensor type. Only acceleration of node available at the moment"/> 
	    <value n="Sensor_activation" pn="Sensor Activation" v="1" values="1,2" dict='1,Active during dynamic relaxation,2,Triggered during dynamic relaxation' help="Sensor flag for dynamic relaxation activation. If second option selected, sensor can be trigged during dynamic relaxation"/>
	    <value n="Degree_freedom" pn="Degree of freedom" v="1" values="1,2,3" dict='1,x,2,y,3,z' help="Degree of freedom"/>
	    <value n="Activating_acceleration" pn="Activating acceleration" v="0.0" unit_magnitude="L/T^2" help="Activating acceleration"/>
	    <value n="Time_over" pn="Time over" v="0.0" unit_magnitude="T" help="Time over which acceleration must be exceeded"/>
	  </container>
	</container>

	<container n="Sensor_2" pn="Sensor 2" icon="seatbelt16" help="Define Seatbelt sensor 2">
	  <!--         Taken joint points selection tool -->
	  <value n="Automatic_2" pn="Automatic" v="Click to select sensor node from the screen" help="You can both pick the point up from the screen or enter its coordinates manually">
	    <edit_command n="pick_points_2" pn="Pick sensor node 2" proc="pick_points 2" actualize="1" help="Click to pick the second sensor node up from the screen" actualize_tree='1' icon="select_point16"/> 
	  </value>
	  <value n="x_2" pn="Sensor2 x" v="0" unit_magnitude="L" editable='1' help="x coordinate of the second sensor node" actualize="1" actualize_tree='1'/>
	  <value n="y_2" pn="Sensor2 y" v="0" unit_magnitude="L" editable='1' help="y coordinate of the second sensor node" actualize="1" actualize_tree='1'/>
	  <value n="z_2" pn="Sensor2 z" v="0" unit_magnitude="L" editable='1' help="z coordinate of the second sensor node" actualize="1" actualize_tree='1'/>
	  <container n="Sensor_node_2" pn="Sensor Data" icon="seatbelt16" help="Please enter sensor data">
	    <value n="Sensor_type_2" pn="Sensor type" v="1" values="1" dict='1,Acceleration of node' help="Please choose sensor type. Only acceleration of node available at the moment"/> 
	    <value n="Sensor_activation_2" pn="Sensor Activation" v="1" values="1,2" dict='1,Active during dynamic relaxation,2,Triggered during dynamic relaxation' help="Sensor flag for dynamic relaxation activation. If second option selected, sensor can be trigged during dynamic relaxation"/>
	    <value n="Degree_freedom_2" pn="Degree of freedom" v="1" values="1,2,3" dict='1,x,2,y,3,z' help="Degree of freedom"/>
	    <value n="Activating_acceleration_2" pn="Activating acceleration" v="0.0" unit_magnitude="L/T^2" help="Activating acceleration"/>
	    <value n="Time_over_2" pn="Time over" v="0.0" unit_magnitude="T" help="Time over which acceleration must be exceeded"/>
	  </container>
	</container>

	<container n="Sensor_3" pn="Sensor 3" icon="seatbelt16" help="Define Seatbelt sensor 3">
	  <!--         Taken joint points selection tool -->
	  <value n="Automatic_3" pn="Automatic" v="Click to select sensor node from the screen" help="You can both pick the point up from the screen or enter its coordinates manually">
	    <edit_command n="pick_points_3" pn="Pick sensor node 3" proc="pick_points 3" actualize="1" help="Click to pick the third sensor node up from the screen" actualize_tree='1' icon="select_point16"/> 
	  </value>
	  <value n="x_3" pn="Sensor3 x" v="0" unit_magnitude="L" editable='1' help="x coordinate of the third sensor node" actualize="1" actualize_tree='1'/>
	  <value n="y_3" pn="Sensor3 y" v="0" unit_magnitude="L" editable='1' help="y coordinate of the third sensor node" actualize="1" actualize_tree='1'/>
	  <value n="z_3" pn="Sensor3 z" v="0" unit_magnitude="L" editable='1' help="z coordinate of the third sensor node" actualize="1" actualize_tree='1'/>
	  <container n="Sensor_node_3" pn="Sensor Data" icon="seatbelt16" help="Please enter sensor data">
	    <value n="Sensor_type_3" pn="Sensor type" v="1" values="1" dict='1,Acceleration of node' help="Please choose sensor type. Only acceleration of node available at the moment"/> 
	    <value n="Sensor_activation_3" pn="Sensor Activation" v="1" values="1,2" dict='1,Active during dynamic relaxation,2,Triggered during dynamic relaxation' help="Sensor flag for dynamic relaxation activation. If second option selected, sensor can be trigged during dynamic relaxation"/>
	    <value n="Degree_freedom_3" pn="Degree of freedom" v="1" values="1,2,3" dict='1,x,2,y,3,z' help="Degree of freedom"/>
	    <value n="Activating_acceleration_3" pn="Activating acceleration" v="0.0" unit_magnitude="L/T^2" help="Activating acceleration"/>
	    <value n="Time_over_3" pn="Time over" v="0.0" unit_magnitude="T" help="Time over which acceleration must be exceeded"/>
	  </container>
	</container>

	<container n="Sensor_4" pn="Sensor 4" icon="seatbelt16" help="Define Seatbelt sensor 4">
	  <!--         Taken joint points selection tool -->
	  <value n="Automatic_4" pn="Automatic" v="Click to select sensor node from the screen" help="You can both pick the point up from the screen or enter its coordinates manually">
	    <edit_command n="pick_points_4" pn="Pick sensor node 4" proc="pick_points 4" actualize="1" help="Click to pick the fourth sensor node up from the screen" actualize_tree='1' icon="select_point16"/> 
	  </value>
	  <value n="x_4" pn="Sensor4 x" v="0" unit_magnitude="L" editable='1' help="x coordinate of the fourth sensor node" actualize="1" actualize_tree='1'/>
	  <value n="y_4" pn="Sensor4 y" v="0" unit_magnitude="L" editable='1' help="y coordinate of the fourth sensor node" actualize="1" actualize_tree='1'/>
	  <value n="z_4" pn="Sensor4 z" v="0" unit_magnitude="L" editable='1' help="z coordinate of the fourth sensor node" actualize="1" actualize_tree='1'/> 
	  <container n="Sensor_node_4" pn="Sensor Data" icon="seatbelt16" help="Please enter sensor data">
	    <value n="Sensor_type_4" pn="Sensor type" v="1" values="1" dict='1,Acceleration of node' help="Please choose sensor type. Only acceleration of node available at the moment"/> 
	    <value n="Sensor_activation_4" pn="Sensor Activation" v="1" values="1,2" dict='1,Active during dynamic relaxation,2,Triggered during dynamic relaxation' help="Sensor flag for dynamic relaxation activation. If second option selected, sensor can be trigged during dynamic relaxation"/>
	    <value n="Degree_freedom_4" pn="Degree of freedom" v="1" values="1,2,3" dict='1,x,2,y,3,z' help="Degree of freedom"/>
	    <value n="Activating_acceleration_4" pn="Activating acceleration" v="0.0" unit_magnitude="L/T^2" help="Activating acceleration"/>
	    <value n="Time_over_4" pn="Time over" v="0.0" unit_magnitude="T" help="Time over which acceleration must be exceeded"/>
	  </container>
	</container>
      </condition>
      <condition n="Slipring" pn="Slip Ring" ov1="line" ov2="line" ovm1="element" ovm2="element" ov1p="Element 1,Element 2" ov2p="Element 1,Element 2" help="This property must be assigned to two already created seatbelt elements in order to simulate a slip ring" icon="seatbelt16">
	<symbol pos='1' proc='gid_groups_conds::draw_symbol_image slipring16' orientation='global'/>
	<symbol pos='2' proc='gid_groups_conds::draw_symbol_image slipring16' orientation='global'/>
	<!--         Taken joint points selection tool -->
	<edit_command n="draw_points" pn="Draw Slip Ring Node" proc="draw_points" help="Click to draw slip ring nodes. Please press ESC when finished" actualize="1" actualize_tree='1'/>
	<value n="Joint_type" pn="Joint type" v="Spherical" state="hidden"/>
	<value n="Coulomb_coefficient" pn="Coulomb Coefficient" v="0.0" help="Coulomb dynamic friction coefficient"/> 
	<value n="Lockup_time" pn="Lockup Time" v="1.0e+20" unit_magnitude="T" help="Slip ring lockup time. After this time no material is moved from one side of the slip ring to the other. This option is not active during dynamic relaxation"/> 
	<container n="Slipring_node" pn="Slip Ring Node" icon="connections16" help="Please enter slip ring node coordinates">
	  <value n="Automatic" pn="Automatic" v="Click to select slip ring node from the screen" help="You can both pick the point up from the screen or enter its coordinates manually">
	    <edit_command n="pick_points" pn="Pick slip ring node" proc="pick_points 1" actualize="1" help="Click to pick the first point up from the screen" actualize_tree='1' icon="select_point16"/> 
	  </value>
	  <value n="x" pn="X" v="0" unit_magnitude="L" editable='1' help="x coordinate of the slip ring node" actualize="1" actualize_tree='1'/>
	  <value n="y" pn="Y" v="0" unit_magnitude="L" editable='1' help="y coordinate of the slip ring node" actualize="1" actualize_tree='1'/>
	  <value n="z" pn="Z" v="0" unit_magnitude="L" editable='1' help="z coordinate of the slip ring node" actualize="1" actualize_tree='1'/>
	  <!--         WE ADD MESH UNITS INFORMATION (TO PUT IT AS COORDINATE UNITS) -->
	  <value n='units_mesh_auxiliar' pn='Mesh units auxiliar' state="hidden" editable='0' v='{/lsdyna_data/units/unit_mesh}'/>
	  <value n='node_mass' pn="Node mass" v="1.0" unit_magnitude="M" help="Slip Ring node mass"/>
	</container>
	
	  </condition>
      <condition n="Slipring" pn="Slip Ring" ov1="line" ov2="line" ovm1="element" ovm2="element" ov1p="Element 1,Element 2" ov2p="Element 1,Element 2" help="This property must be assigned to two already created seatbelt elements in order to simulate a slip ring" icon="seatbelt16">
	<symbol pos='1' proc='gid_groups_conds::draw_symbol_image slipring16' orientation='global'/>
	<symbol pos='2' proc='gid_groups_conds::draw_symbol_image slipring16' orientation='global'/>
	<!--         Taken joint points selection tool -->
	<edit_command n="draw_points" pn="Draw Slip Ring Node" proc="draw_points" help="Click to draw slip ring nodes. Please press ESC when finished" actualize="1" actualize_tree='1'/>
	<value n="Joint_type" pn="Joint type" v="Spherical" state="hidden"/>
	<value n="Coulomb_coefficient" pn="Coulomb Coefficient" v="0.0" help="Coulomb dynamic friction coefficient"/> 
	<value n="Lockup_time" pn="Lockup Time" v="1.0e+20" unit_magnitude="T" help="Slip ring lockup time. After this time no material is moved from one side of the slip ring to the other. This option is not active during dynamic relaxation"/> 
	<container n="Slipring_node" pn="Slip Ring Node" icon="connections16" help="Please enter slip ring node coordinates">
	  <value n="Automatic" pn="Automatic" v="Click to select slip ring node from the screen" help="You can both pick the point up from the screen or enter its coordinates manually">
	    <edit_command n="pick_points" pn="Pick slip ring node" proc="pick_points 1" actualize="1" help="Click to pick the first point up from the screen" actualize_tree='1' icon="select_point16"/> 
	  </value>
	  <value n="x" pn="X" v="0" unit_magnitude="L" editable='1' help="x coordinate of the slip ring node" actualize="1" actualize_tree='1'/>
	  <value n="y" pn="Y" v="0" unit_magnitude="L" editable='1' help="y coordinate of the slip ring node" actualize="1" actualize_tree='1'/>
	  <value n="z" pn="Z" v="0" unit_magnitude="L" editable='1' help="z coordinate of the slip ring node" actualize="1" actualize_tree='1'/>
	  <!--         WE ADD MESH UNITS INFORMATION (TO PUT IT AS COORDINATE UNITS) -->
	  <value n='units_mesh_auxiliar' pn='Mesh units auxiliar' state="hidden" editable='0' v='{/lsdyna_data/units/unit_mesh}'/>
	  <value n='node_mass' pn="Node mass" v="1.0" unit_magnitude="M" help="Slip Ring node mass"/>
	</container>
	
	  </condition>
    </container>
    <container n="Airbags" pn="Airbags"  icon="airbag16" help="This property must be assigned to surfaces or 2D mesh elements in order to simulate airbags">
      <condition n="Airbag" pn="Airbag" ov1="surface" ov2="surface" ovm1="element" ovm2="element" ov1p="Membrane 1,Mambrane 2" ov2p="Membrane 1,Mambrane 2" help="This property must be assigned to surfaces or 2D mesh elements in order to simulate airbags" icon="airbag16">
	<!--         WAITING FOR LIBRARY UPDATE -->
	<symbol pos='1' proc='gid_groups_conds::draw_symbol_image airbag16' orientation='global'/>
      <symbol pos='2' proc='gid_groups_conds::draw_symbol_image airbag16' orientation='global'/>      
	<container n="Airbag_data" pn="General" icon="airbag16" help="Please define general airbag data">
	  <value n="Airbag_type" pn="Airbag type" values="Hybrid,Wang_Nefske" v="Hybrid" dict='Hybrid,Hybrid,Wang_Nefske,Wang Nefske' help="Please specify your airbag theoretical model">

	    <dependencies node="../value[@n='Atmospheric_temperature']" att1="state" v1="hidden" not_value="Hybrid" actualize="1"/>
	    <dependencies node="../value[@n='Atmospheric_temperature']" att1="state" v1="normal" value="Hybrid" actualize="1"/>
	    <dependencies node="../value[@n='Atmospheric_temperature']" att1="state" v1="normal" default="1" actualize="1"/>   

	    <dependencies node="../value[@n='Gauge_pressure']" att1="state" v1="hidden" not_value="Hybrid" actualize="1"/>
	    <dependencies node="../value[@n='Gauge_pressure']" att1="state" v1="normal" value="Hybrid" actualize="1"/>
	    <dependencies node="../value[@n='Gauge_pressure']" att1="state" v1="normal" default="1" actualize="1"/>   

	    <dependencies node="../../container[@n='Gases']/value[@n='R']" att1="state" v1="hidden" not_value="Hybrid" actualize="1"/>
	    <dependencies node="../../container[@n='Gases']/value[@n='R']" att1="state" v1="normal" value="Hybrid" actualize="1"/>
	    <dependencies node="../../container[@n='Gases']/value[@n='R']" att1="state" v1="normal" default="1" actualize="1"/> 

	    <dependencies node="../../container[@n='Gases']/value[@n='R']" att1="state" v1="hidden" not_value="Hybrid" actualize="1"/>
	    <dependencies node="../../container[@n='Gases']/value[@n='R']" att1="state" v1="normal" value="Hybrid" actualize="1"/>
	    <dependencies node="../../container[@n='Gases']/value[@n='R']" att1="state" v1="normal" default="1" actualize="1"/> 

	    <dependencies node="../../container[@n='Gases']/container[@n='Initial_gas']/value[@n='Initial_weight']" att1="state" v1="hidden" not_value="Hybrid" actualize="1"/>
	    <dependencies node="../../container[@n='Gases']/container[@n='Initial_gas']/value[@n='Initial_weight']" att1="state" v1="normal" value="Hybrid" actualize="1"/>
	    <dependencies node="../../container[@n='Gases']/container[@n='Initial_gas']/value[@n='Initial_weight']" att1="state" v1="normal" default="1" actualize="1"/> 

	    <dependencies node="../../container[@n='Gases']/container[@n='Initial_gas']/value[@n='A0']" att1="state" v1="hidden" not_value="Hybrid" actualize="1"/>
	    <dependencies node="../../container[@n='Gases']/container[@n='Initial_gas']/value[@n='A0']" att1="state" v1="normal" value="Hybrid" actualize="1"/>
	    <dependencies node="../../container[@n='Gases']/container[@n='Initial_gas']/value[@n='A0']" att1="state" v1="normal" default="1" actualize="1"/> 

	    <dependencies node="../../container[@n='Gases']/container[@n='Initial_gas']/container[@n='Venting_gas']/value[@n='Venting_weight']" att1="state" v1="hidden" not_value="Hybrid" actualize="1"/>
	    <dependencies node="../../container[@n='Gases']/container[@n='Initial_gas']/container[@n='Venting_gas']/value[@n='Venting_weight']" att1="state" v1="normal" value="Hybrid" actualize="1"/>
	    <dependencies node="../../container[@n='Gases']/container[@n='Initial_gas']/container[@n='Venting_gas']/value[@n='Venting_weight']" att1="state" v1="normal" default="1" actualize="1"/> 

	    <dependencies node="../../container[@n='Gases']/container[@n='Initial_gas']/container[@n='Venting_gas']/value[@n='A1']" att1="state" v1="hidden" not_value="Hybrid" actualize="1"/>
	    <dependencies node="../../container[@n='Gases']/container[@n='Initial_gas']/container[@n='Venting_gas']/value[@n='A1']" att1="state" v1="normal" value="Hybrid" actualize="1"/>
	    <dependencies node="../../container[@n='Gases']/container[@n='Initial_gas']/container[@n='Venting_gas']/value[@n='A1']" att1="state" v1="normal" default="1" actualize="1"/> 


	    <dependencies node="../../container[@n='Gases']/container[@n='Initial_gas']/container[@n='Venting_gas']/value[@n='Cv']" att1="state" v1="hidden" not_value="Wang_Nefske" actualize="1"/>
	    <dependencies node="../../container[@n='Gases']/container[@n='Initial_gas']/container[@n='Venting_gas']/value[@n='Cv']" att1="state" v1="normal" value="Wang_Nefske" actualize="1"/>
	    <dependencies node="../../container[@n='Gases']/container[@n='Initial_gas']/container[@n='Venting_gas']/value[@n='Cv']" att1="state" v1="normal" default="1" actualize="1"/> 

	    <dependencies node="../../container[@n='Gases']/container[@n='Initial_gas']/container[@n='Venting_gas']/value[@n='Cp']" att1="state" v1="hidden" not_value="Wang_Nefske" actualize="1"/>
	    <dependencies node="../../container[@n='Gases']/container[@n='Initial_gas']/container[@n='Venting_gas']/value[@n='Cp']" att1="state" v1="normal" value="Wang_Nefske" actualize="1"/>
	    <dependencies node="../../container[@n='Gases']/container[@n='Initial_gas']/container[@n='Venting_gas']/value[@n='Cp']" att1="state" v1="normal" default="1" actualize="1"/> 

	    <dependencies node="../../container[@n='Gases']/value[@n='Factor_Exit']" att1="state" v1="hidden" not_value="Wang_Nefske" actualize="1"/>
	    <dependencies node="../../container[@n='Gases']/value[@n='Factor_Exit']" att1="state" v1="normal" value="Wang_Nefske" actualize="1"/>
	    <dependencies node="../../container[@n='Gases']/value[@n='Factor_Exit']" att1="state" v1="normal" default="1" actualize="1"/> 

	    </value>
	  <value n="Material" pn="Material" editable='0' 
	  values_tree='[give_materials_list -user_defined 0 -has_container material_airbag]'>
	  <edit_command n="Edit materials" pn="Edit materials" icon="materialred16"
	  proc='edit_materials_list -has_container material_airbag'/>
	</value>
	  <value n="Vsca" pn="Volume factor" v="1.0" help="Volume scale factor"/>
	  <value n="Psca" pn="Pressure factor" v="1.0" help="Pressure scale factor"/>
	  <value n="Atmospheric_temperature" pn="T atm" v="298" unit_magnitude="Temp" help="Atmospheric Temperature"/>
	  <value n="Atmospheric_pressure" pn="P atm" v="101300" unit_magnitude="F/L^2" help="Atmospheric Pressure"/>
	  <value n="Atmospheric_density" pn="ρ atm" v="1.29" unit_magnitude="F/L^3" help="Atmospheric Density"/>
	  <value n="Gauge_pressure" pn="Gauge pressure" v="0" unit_magnitude="F/L^2" help="Gauge Pressure when venting begins"/>
	</container>  
	<container n="Gases" pn="Gases" icon="airbag16" help="Please specify airbag gases data">         
	  <value n="R" pn="R" v="8.314" help="Universal molar gas constant"/>         
	   <value n="Factor_Exit" pn="Orifice Area" v="" unit_magnitude="L^2" help="Vent orifice area which applies to exit hole. A coefficient or a function of absolute pressure could be entered"
	      function="[loads_function Orifice]" pn_function="A" function_func="lsdyna::function_loads"/> 
	  <container n="Initial_gas" pn="Initial gas" icon="airbag16">
	    <value n="Initial_weight" pn="Molar weight" v="28.97" unit_magnitude="M/Amount_of_substance" units="g/mol" help="Enter initial gas molar weight"/>  
	    <value n="A0" pn="A0" v="29.040001" unit_magnitude="Energy/Amount_of_substance/Temp" help="Coefficient for molar heat capacity of inflator gas at constant pressure. (e.g., Joules/mole/K)"/>
	    <container n="Venting_gas" pn="Venting gas" icon="airbag16">
	      <value n="Cv" pn="Cv" unit_magnitude="Energy/Amount_of_substance/Temp" v="0" help="Heat capacity at constant volume"/>
	      <value n="Cp" pn="Cp" unit_magnitude="Energy/M/Temp" v="0" help="Heat capacity at constant pressure"/>
	      <value n="Venting_weight" pn="Molar weight" v="28.97" unit_magnitude="M/Amount_of_substance" units="g/mol" help="Enter venting gas molar weight"/>
	      <value n="A1" pn="A1" v="35.900002" unit_magnitude="Energy/Amount_of_substance/Temp" help="Coefficient for molar heat capacity of venting gas at constant pressure. (e.g., Joules/mole/K)"/>
	      <value n="Factor" pn="Mass flow" v="" help="Please edit a curve defining inflator mass flow rate"
	      function="[loads_function Airbags]" pn_function="m" function_func="lsdyna::function_loads"/>  
	      <value n="Factor_Temp" pn="Gas temperature" v="" unit_magnitude="Temp" help="Please edit a curve containing inflator gas temperature values. In Wang Nefske airbags a constant coefficient could be entered"
	      function="[loads_function Airbags]" pn_function="T" function_func="lsdyna::function_loads"/> 
	      </container>  
	   </container>
	</container>         
	<container n="Membranes" pn="Membranes" icon="shells16" help="Please define the membranes taht define the airbag">
	  <value n="Damping" pn="Damping" v="" help="Please edit the curve which specifies damping factor vs frequency for each membrane. Left blank if not defined"
	  function="[loads_function Airbag_mass]" pn_function="Damp" function_func="lsdyna::function_loads"/> 
	  <container n="Geometry" pn="Geometry" icon="shells16">
	    <value n="Thickness" pn="Thickness" v="0.25" unit_magnitude="L"/>             
	  </container>        
	  <value n="Element_formulation" pn="Element formulation" v="5" values="5,9" 
	    dict='5,Belytschko-Tsay membrane,9,Fully int. Belytschko-Tsay membrane'
	    help="Specify the element Formulation Option">
	    <dependencies node="../value[@n='2D_solid_element']" att1="state" v1="normal" value="13"/> 
	    <dependencies node="../value[@n='2D_solid_element']" att1="state" v1="normal" value="14"/>
	    <dependencies node="../value[@n='2D_solid_element']" att1="state" v1="normal" value="15"/> 
	    <dependencies node="../value[@n='2D_solid_element']" att1="state" v1="hidden" value="25"/>
	    <dependencies node="../value[@n='2D_solid_element']" att1="state" v1="hidden" value="26"/> 
	    <dependencies node="../value[@n='2D_solid_element']" att1="state" v1="hidden" default="1"/>
	    <dependencies node="../value[@n='Thickness_field']" att1="state" v1="normal" value="25"/>          
	    <dependencies node="../value[@n='Thickness_field']" att1="state" v1="normal" value="26"/> 
	    <dependencies node="../value[@n='Thickness_field']" att1="state" v1="hidden" value="13"/>          
	    <dependencies node="../value[@n='Thickness_field']" att1="state" v1="hidden" value="14"/> 
	    <dependencies node="../value[@n='Thickness_field']" att1="state" v1="hidden" value="15"/>          
	    <dependencies node="../value[@n='Thickness_field']" att1="state" v1="hidden" default="1"/>
	  </value>
	  <value n="Shear_factor" pn="Shear correction factor" v="1.0" help="Shear correction factor which scales the transverse shear stress. A suggested value is 5/6 for isotropic materials"/>
	  <value n="Integration_points" pn="Integration Points" v="2.0" values="1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0" 
	    dict='1.0,1 point,2.0,2 points,3.0,3 points,4.0,4 points,5.0,5 points,6.0,6 points,7.0,7 points,8.0,8 points,9.0,9 points,10.0,10 points'                         
	    help="Number of through Thickness Integration Points"/>  
	    <value n="Reference_surface_factor" pn="Reference surface factor" v="0.0" help="Location of reference surface for 3D shell elements. In nonzero, the offset distance from the plane of the nodal points to the reference surface of the shell in the direction of the shell normal vector is a value offset=-0.5*(Reference surface factor)*(Average shell thickness). In this way we have, 1.0: Top Surface, 0.0: Mid-Surface and -1.0: Bottom Surface"/>
	    <value n="Thickness_field" pn="Thickness Field" v="1" values="1,2" state="hidden"
	      dict='1,Continuous across the element edges,2,Discontinuous across the element edges'                      
	      help="Choose continuous mode for metalforming applications. Discontinous mode is necessary for crashworthiness simulations due to shell intersections, sharp included angles and non-smooth deformations"/> 
	      <value n="2D_solid_element" pn="2D Solid Element" v="1" values="1,2,3" state="hidden"
	      dict='1,Lagrangian,2,Eulerian,3,ALE' help="Specify 2D Solid Element Type"/>
	    </container>         
	  </condition>
	</container>
    <container n="Materials" pn="Materials" icon="material16">
      <container n="materials_types" pn="Elastic" icon="materialblue16">
	<blockdata n='material' name='Elastic1' sequence='1' editable_name='unique' icon="materialblue16"
	  help='A material is a set of material properties that can be aplied to beams, shells or solids'>
	  <container n="material_elastic" pn="Elastic properties">
	    <value n="E" pn="E" v="2.1e11" help="Young modulus"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <!--  HIDDEN IN THIS LD-DYNA VERSION -->
	    <value n="G" pn="G" v="8.1e10" state="hidden" help="Torsion modulus"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <value n='nu' pn='\u03bd' v='0.3' help='Poisson coeficient'/>
	    <value n="Specific_weight" pn="Specific weight" v="76900" help="Specific weight of the material"
	    unit_magnitude="F/L^3" units="N/m^3"/>
	    <!--  HIDDEN IN THIS LD-DYNA VERSION -->
	    <value n="Maximum_stress" pn="Maximum stress" state="hidden" v="235.2e6" help="Maximum acceptable stress for this material"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <!-- HIDDEN AT THE MOMENT IN THIS LS-DYNA VERSION (BEAM TYPE 2 NOT IMPLEMENTED) -->
	    <value n="Axial_factor" pn="Axial Damping Factor" v="0.0" state="hidden" help="Axial Damping factor (used for Belytschko-Schwer beam only)"/>
	    <value n="Bending_factor" pn="Bending Damping Factor" v="0.0" state="hidden" help="Bending Damping factor (used for Belytschko-Schwer beam only)"/>
	  </container>
	</blockdata>
      </container>
      <container n="materials_types" pn="Rigid" icon="materialblue16">
	<blockdata n='material' name='Rigid1' sequence='1' editable_name='unique' icon="materialblue16"
	  help='A material is a set of material properties that can be aplied to beams, shells or solids'>
	  <container n="material_elastic" pn="Elastic properties">
	    <value n="E" pn="E" v="2.1e11" help="Young modulus"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <!--  HIDDEN IN THIS LD-DYNA VERSION -->
	    <value n="G" pn="G" v="8.1e10" state="hidden" help="Torsion modulus"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <value n='nu' pn='\u03bd' v='0.3' help='Poisson coeficient'/>
	    <value n="Specific_weight" pn="Specific weight" v="76900" help="Specific weight of the material"
	    unit_magnitude="F/L^3" units="N/m^3"/>
	    <!--  HIDDEN IN THIS LD-DYNA VERSION -->
	    <value n="Maximum_stress" pn="Maximum stress" state="hidden" v="235.2e6" help="Maximum acceptable stress for this material"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	  </container> 
	</blockdata>
      </container>
      <container n="materials_types" pn="Null" icon="materialblue16">
	<blockdata n='material' name='Null1' sequence='1' editable_name='unique' icon="materialblue16"
	  help='This materials allows equations of state to be considerated without computing deviatronic stresses. Beams and shells that use this material are completely bypassed in the element processing'>
	  <container n="material_elastic" pn="Elastic properties">
	    <value n="E" pn="E" v="2.1e11" help="Young modulus"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <value n='nu' pn='\u03bd' v='0.3' help='Poisson coeficient'/>
	    <value n="Specific_weight" pn="Specific weight" v="76900" help="Specific weight of the material"
	    unit_magnitude="F/L^3" units="N/m^3"/>
	  </container> 
	</blockdata>
      </container>
      <container n="materials_types" pn="Anisotropic Elastic" icon="materialred16">
	<blockdata n='material' name='Anisotropic Elastic1' sequence='1' editable_name='unique' icon="materialred16"
	  help='A material is a set of material properties that can be aplied to beams, shells or solids'>
	  <container n="material_anisotropic_elastic" pn="Anisotropic elastic properties">
	    <value n="Ex" pn="Ex" v="2.1e11" help="Young modulus in X direction"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <value n="Ey" pn="Ey" v="2.1e11" help="Young modulus in Y direction"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <value n="nuXY" pn="Nuxy" v="0.3" help="Poisson coefficient in XY"/>
	    <!-- HIIDEN IN THIS LD-SYNA VERSION -->
	    <value n="nuYX" pn="Nuyx" v="0.3" state="hidden" help="Poisson coefficient in YX"/>
	    <value n="Gxy" pn="Gxy" v="8.1e10" help="Shear modulus XY component"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <value n="Gxz" pn="Gxz" v="8.1e10" help="Shear modulus XZ component"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <value n="Gyz" pn="Gyz" v="8.1e10" help="Shear modulus YZ component"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <value n="Specific_weight" pn="Specific weight" v="76900" help="Specific weight of the material"
	    unit_magnitude="F/L^3" units="N/m^3"/>
	  </container>
	</blockdata>
      </container>
      <container n="materials_types" pn="Fabric" icon="materialred16">
	<blockdata n='material' name='Fabric1' sequence='1' editable_name='unique' icon="materialred16"
	  help='This material is a set of material properties that can be aplied to airbags'>
	  <container n="material_anisotropic_elastic" pn="Anisotropic elastic properties">
	    <value n="Ex" pn="Ex" v="2.1e11" help="Young modulus in X direction"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <value n="Ey" pn="Ey" v="2.1e11" help="Young modulus in Y direction"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <value n="nuXY" pn="Nuxy" v="0.3" help="Poisson coefficient in XY"/>
	    <!-- HIIDEN IN THIS LD-SYNA VERSION -->
	    <value n="nuYX" pn="Nuyx" v="0.3" state="hidden" help="Poisson coefficient in YX"/>
	    <value n="Gxy" pn="Gxy" v="8.1e10" help="Shear modulus XY component"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <value n="Gxz" pn="Gxz" v="8.1e10" help="Shear modulus XZ component"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <value n="Gyz" pn="Gyz" v="8.1e10" help="Shear modulus YZ component"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <value n="Specific_weight" pn="Specific weight" v="76900" help="Specific weight of the material"
	    unit_magnitude="F/L^3" units="N/m^3"/>
	  </container>
	  <container n="material_airbag" pn="Airbag properties">
	    <value n="Compressive_stress" pn="Compressive stress" values="0.0,1.0" v="0.0" dict='0.0,Do not eliminate,1.0,Eliminate' help="Please specify if compressive stress should be eliminiated (does not apply to linear)"/>
	    <value n="E_liner" pn="E liner" v="2.1e11" help="Young modulus for elastic liner (optional). Left blank if not defined"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <value n="nu_liner" pn="Nu liner" v="0.3" help="Poisson coefficient for elastic liner (optional). Left blank if not defined"/>
	    <value n="L_ratio" pn="L ratio" v="0.1" help="Ratio of liner thickness to total fabric thickness"/>
	    <value n="Damping" pn="Damping" v="0.05" help="Rayleigh damping coefficient. (0.05 of critical damping recomended)"/>       
	  </container>
	</blockdata>        
      </container>
      <container n="materials_types" pn="Viscoelastic" icon="materialpurple16">
	<blockdata n='material' name='Viscoelastic1' sequence='1' editable_name='unique' icon="materialpurple16"
	  help='This material allows the user to define viscoelastic behaviour for beams (Hughes-Liu), shells and solids'>
	  <container n="material_viscoelastic" pn="Viscoelastic properties">
	    <value n="K" pn="K" v="1.7e11" help="Elastic bulk modulus"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <value n="G0" pn="G0" v="8.2e10" help="Short-time shear modulus"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <value n="G" pn="G" v="8.2e10" help="Long-time (infinite) shear modulus"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <value n="Specific_weight" pn="Specific weight" v="76900" help="Specific weight of the material"
	    unit_magnitude="F/L^3" units="N/m^3"/>
	    <value n="Decay_constant" pn="Decay constant" v="1.0" help="Please specify decay constant"/>
	  </container> 
	</blockdata>
      </container>
      <container n="materials_types" pn="Piecewise Linear Plasticity" icon="materialgreen16">
	<blockdata n='material' name='Piecewise Linear Plasticity1' sequence='1' editable_name='unique' icon="materialgreen16"
	  help='An elasto-plastic material with an arbitrary stress versus strain curve and arbitrary strain rate dependency can be defined'>
	  <container n="material_elastic" pn="Elastic properties">
	    <value n="E" pn="E" v="1.1e11" help="Young modulus"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <!--  HIDDEN IN THIS LD-DYNA VERSION -->
	    <value n="G" pn="G" v="4.6e10" state="hidden" help="Torsion modulus"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <value n='nu' pn='\u03bd' v='0.2' help='Poisson coeficient'/>
	    <value n="Specific_weight" pn="Specific weight" v="42112" help="Specific weight of the material"
	    unit_magnitude="F/L^3" units="N/m^3"/>
	    <!--  HIDDEN IN THIS LD-DYNA VERSION -->
	    <value n="Maximum_stress" pn="Maximum stress" v="0.0" state="hidden" help="Maximum acceptable stress for this material"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	  </container>
	  <container n="material_plasticity" pn="Plastic properties">
	    <value n="Elastic_limit" pn="Elastic limit" v="150.0e6" unit_magnitude="F/L^2" units="N/m^2" help="Yield Stress (elastic limit)"/>
	    <value n="Tangent_modulus" pn="Tangent modulus" v="2.0" help="Tangent modulus (plastic deformation side of the bilinear curve)"/>
	    <!--  HIDDEN IN THIS LD-DYNA VERSION -->
	    <value n="Isotropic_hardening" pn="Isotropic hardening:" state="hidden" v="NONE" values="NONE,LINEAR,EXPONENTIAL,LINEAR+EXPONENTIAL"
	      dict="NONE,None,LINEAR,Linear,EXPONENTIAL,Exponential,LINEAR+EXPONENTIAL,Linear+Exponential">
	      <dependencies node="../value[@n='Saturation_flow_stress']" att1="state" v1="hidden" value="NONE"/>
	      <dependencies node="../value[@n='Saturation_hardening_law_exponent']" att1="state" v1="hidden" value="NONE"/>
	      <dependencies node="../value[@n='Linear_hardening']" att1="state" v1="hidden" value="NONE"/>
	      <dependencies node="../value[@n='Linear_hardening']" att1="state" v1="normal" value="LINEAR"/>
	      <dependencies node="../value[@n='Saturation_flow_stress']" att1="state" v1="hidden" value="LINEAR"/>
	      <dependencies node="../value[@n='Saturation_hardening_law_exponent']" att1="state" v1="hidden" value="LINEAR"/>
	      <dependencies node="../value[@n='Saturation_flow_stress']" att1="state" v1="normal" value="EXPONENTIAL"/>
	      <dependencies node="../value[@n='Saturation_hardening_law_exponent']" att1="state" v1="normal" value="EXPONENTIAL"/>
	      <dependencies node="../value[@n='Linear_hardening']" att1="state" v1="hidden" value="EXPONENTIAL"/>
	      <dependencies node="../value[@n='Saturation_flow_stress']" att1="state" v1="normal" value="LINEAR+EXPONENTIAL"/>
	      <dependencies node="../value[@n='Saturation_hardening_law_exponent']" att1="state" v1="normal" value="LINEAR+EXPONENTIAL"/>
	      <dependencies node="../value[@n='Linear_hardening']" att1="state" v1="normal" value="LINEAR+EXPONENTIAL"/>
	    </value>
	    <value n="Saturation_flow_stress" pn="Saturation flow stress" v="180.0e6" unit_magnitude="F/L^2" units="N/m^2" state="hidden"/>
	    <value n="Saturation_hardening_law_exponent" pn="Sat. hard. law exp." v="7.0" state="hidden"
	    help="Saturation hardening law exponent"/>
	    <value n="Linear_hardening" pn="Linear hardening" v="100.0e6" unit_magnitude="F/L^2" units="N/m^2" state="hidden"/>
	    <!-- HIDDEN IN THIS LS-DYNA VERSION -->
	    <value n="Kinematic_hardening" pn="Kinematic hardening:" v="NONE" state="hidden" values="NONE,LINEAR"
	      dict="NONE,None,LINEAR,Linear">
	      <dependencies node="../value[@n='Linear_kinematic_hardening']" att1="state" v1="hidden" value="NONE"/>
	      <dependencies node="../value[@n='Linear_kinematic_hardening']" att1="state" v1="normal" value="LINEAR"/>
	      <dependencies node="../value[@n='Linear_kinematic_hardening']" att1="state" v1="normal" value="NON_LINEAR"/>
	    </value>
	    <value n="Linear_kinematic_hardening" pn="Linear kinematic hardening" v="500.0e6" unit_magnitude="F/L^2" units="N/m^2" state="hidden"/>
	  </container>
	</blockdata>
      </container>
       <container n="materials_types" pn="Plastic Kinematic" icon="materialgreen16">
	<blockdata n='material' name='Plastic Kinematic1' sequence='1' editable_name='unique' icon="materialgreen16"
	  help='This model defines isotropic and kinematic hardening plasticity. It is a very cost effective model and it is availbale for beam (Hughes-Liu and Truss), shell and solid elements'>
	  <container n="material_elastic" pn="Elastic properties">
	    <value n="E" pn="E" v="1.1e11" help="Young modulus"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <value n='nu' pn='\u03bd' v='0.2' help='Poisson coeficient'/>
	    <value n="Specific_weight" pn="Specific weight" v="42112" help="Specific weight of the material"
	    unit_magnitude="F/L^3" units="N/m^3"/>
	  </container>
	  <container n="material_plasticity" pn="Plastic properties">
	    <value n="Elastic_limit" pn="Elastic Limit" v="150.0e6" unit_magnitude="F/L^2" units="N/m^2" help="Yield stress (Elastic limit)"/>
	    <value n="Tangent_modulus" pn="Tangent modulus" v="2.0" help="Tangent modulus of plastic deformation"/>
	  </container>
	</blockdata>
      </container>
      <container n="materials_types" pn="Force Limited" icon="materialgreen16">
	<blockdata n='material' name='Force Limited1' sequence='1' editable_name='unique' icon="materialgreen16"
	  help='With this material, available for the Belytschko-Schwer beam only, plastic hinges forming at the ends of a beam can be modeled using curve definitions.'>
	  <container n="material_elastic" pn="Elastic properties">
	    <value n="E" pn="E" v="1.1e11" help="Young modulus"
	    unit_magnitude="F/L^2" units="N/m^2"/>
	    <value n='nu' pn='\u03bd' v='0.2' help='Poisson coeficient'/>
	    <value n="Specific_weight" pn="Specific weight" v="42112" help="Specific weight of the material"
	    unit_magnitude="F/L^3" units="N/m^3"/>
	  </container>
	  <!--           THIS MATERIAL IS ONLY AVAILABLE FOR BEAMS -->
	  <container n="material_plasticity" pn="Plastic properties">
	    <value n="Curves_option" pn="Curves option" v="0.0" values="0.0,1.0" dict='0.0,Force vs Strain,1.0,Force vs change in Lenght' help="Please specify which magnitudes will describe the axial force load curves"/>
	    <value n="End_moment" pn="End moment" v="0.0" help="Applied end moment for force versus (strain/change in lenght) curve" unit_magnitude="F*L" units="N·m"/>
	    <value n="Factor" pn="Axial Force Curve" v="" help="Please edit a function defining axial force (collapse load) versus strain (or change in lenght) for the end moment."
	    function="[loads_function Force_limited]" pn_function="F" function_func="lsdyna::function_loads"/>
	    <value n="Plastic_moment_factor" pn="Plastic moment factor" v="1.0" help="Scale factor for plastic moment versus rotation curve about z and y axis at both beam nodes"/>
	    <value n="Plastic_torsional_moment_factor" pn="Plastic torsional moment factor" v="1.0" help="Scale factor for plastic torsional moment versus rotation"/>
	    <value n="Yield_moment" pn="Yield moment" v="1.0E+20" help="Yield moment about y and z axis at both beam nodes for interaction calculations" unit_magnitude="F*L" units="N·m"/>
	    <value n="Torsional_yield_moment" pn="Torsional yield moment" v="1.0E+20" help="Torsional yield moment for interaction calculations" unit_magnitude="F*L" units="N·m"/>
	    </container>
	</blockdata>
      </container>    
      <container n="materials_types" pn="Damper Viscous" icon="materialyellow16">
	<blockdata n='material' name='Damper Viscous1' sequence='1' editable_name='unique' icon="materialyellow16"
	  help='This material can be applied to discrete elements'>
	  <container n="material_discrete" pn="Spring/damper properties">
	    <value n="DC" pn="DC" v="1.0" help="Force/displacement rate or moment/rotation rate"/>
	  </container>
	</blockdata>
      </container>
      <container n="materials_types" pn="Damper Nonlinear Viscous" icon="materialyellow16">
	<blockdata n='material' name='Damper Nonlinear Viscous1' sequence='1' editable_name='unique' icon="materialyellow16"
	  help='This material can be applied to discrete elements'>
	  <container n="material_discrete" pn="Spring/damper properties">
	    <value n="Factor" pn="Curve" v="1.0" help="This factor must be a curve describing force versus rate-of-displacement relationship or a moment versus rate-of-rotation relationship. It must define the response in the negative and positive quadrants and pass through point (0,0)"
	    function="[loads_function Nonlinear_viscous]" pn_function="F/M" function_func="lsdyna::function_loads"/>
	    <value n="Force_factor" pn="Force Factor" v="1" unit_magnitude="F" editable='1' units="N" help="This coefficient will multiply curve values in translational dampers" actualize='1'/>
	    <value n="Moment_factor" pn="Moment Factor" v="1" unit_magnitude="F*L" editable='1' units="N·m" help="This coefficient will multiply curve values in rotational dampers" actualize='1'/>
	  </container>
	</blockdata>
      </container>
      <container n="materials_types" pn="Spring Elastic" icon="materialyellow16">
	<blockdata n='material' name='Spring Elastic1' sequence='1' editable_name='unique' icon="materialyellow16"
	  help='This material can be applied to discrete elements'>
	  <container n="material_discrete" pn="Spring/damper properties">
	    <value n="Elastic_Stiffness_displacement" pn="Elastic Stiffness displacements" v="1.0"  unit_magnitude="F/L" units="N/m" help="Elastic stiffness in translational springs"/>
	    <value n="Elastic_Stiffness_rotation" pn="Elastic Stiffness rotations" v="1.0" unit_magnitude="F*L/Rotation" units="N·m/rad" help="Elastic stiffness in rotational springs"/>
	  </container>
	</blockdata>
      </container>
      <container n="materials_types" pn="Spring Nonlinear Elastic" icon="materialyellow16">
	<blockdata n='material' name='Spring Nonlinear Elastic1' sequence='1' editable_name='unique' icon="materialyellow16"
	  help='This material can be applied to discrete elements'>
	  <container n="material_discrete" pn="Spring/damper properties">
	    <value n="Factor" pn="Curve" v="1.0" help="This factor must be a curve describing force versus displacement or moment versus rotation"
	    function="[loads_function Nonlinear_elastic]" pn_function="F/M" function_func="lsdyna::function_loads"/>          
	    <value n="Force_factor" pn="Force Factor" v="1" unit_magnitude="F" editable='1' units="N" help="This coefficient will multiply curve ordinate values in translational springs (considering its units)"/>
	    <value n="Moment_factor" pn="Moment Factor" v="1" unit_magnitude="F*L" editable='1' units="N·m" help="This coefficient will multiply curve ordinate values in rotational springs (considering its units)"/>
	    <value n="Displacement_factor" pn="Displacement Factor" v="1" unit_magnitude="L" editable='1' units="m" help="This coefficient will multiply curve abcissa values in translational springs (considering its units)"/>
	    <value n="Rotation_factor" pn="Rotation Factor" v="1" unit_magnitude="Rotation" editable='1' units="rad" help="This coefficient will multiply curve abcissa values in rotational springs (considering its units)"/>
	  </container>
	</blockdata>
      </container>
      <container n="materials_types" pn="Spring Inelastic" icon="materialyellow16">
	<blockdata n='material' name='Spring Inelastic1' sequence='1' editable_name='unique' icon="materialyellow16"
	  help='This material can be applied to discrete elements. It provides an inelastic tension or compression only, translational or rotational spring'>
	  <container n="material_discrete" pn="Spring/damper properties">
	    <value n="Spring_behaviour" pn="Spring Behaviour" v="1.0" values="1.0,-1.0" dict='1.0,Compression only,-1.0,Tension only' help="Please specify spring behaviour"/>
	    <value n="Unloading_translational" pn="Unloading translational stiffness" v="0" unit_magnitude="F/L" editable='1' units="N/m" help="Unloading Stiffness in translational springs. The maximum of this value and the maximum loading stiffness in the entered curve are used for unloading. If zero, not used"/>
	    <value n="Unloading_rotational" pn="Unloading rotational stiffness" v="0" unit_magnitude="F*L/Rotation" editable='1' units="N·m/rad" help="Unloading Stiffness in rotational springs. The maximum of this value and the maximum loading stiffness in the entered curve are used for unloading. If zero, not used"/>
	    <value n="Factor" pn="Loading Stiffness curve" v="1.0" help="This factor must be a curve describing arbitrary force/torque versus displacement/rotation relationship. This curve must be defined in the positive force-displacement quadrant"
	    function="[loads_function Inelastic]" pn_function="F/M" function_func="lsdyna::function_loads"/>          
	    <value n="Force_factor" pn="Force Factor" v="1" unit_magnitude="F" editable='1' units="N" help="This coefficient will multiply curve ordinate values in translational springs (considering its units)"/>
	    <value n="Moment_factor" pn="Moment Factor" v="1" unit_magnitude="F*L" editable='1' units="N·m" help="This coefficient will multiply curve ordinate values in rotational springs (considering its units)"/>
	    <value n="Displacement_factor" pn="Displacement Factor" v="1" unit_magnitude="L" editable='1' units="m" help="This coefficient will multiply curve abcissa values in translational springs (considering its units)"/>
	    <value n="Rotation_factor" pn="Rotation Factor" v="1" unit_magnitude="Rotation" editable='1' units="rad" help="This coefficient will multiply curve abcissa values in rotational springs (considering its units)"/>
	  </container>
	</blockdata>
      </container>
      <container n="materials_types" pn="Seatbelt" icon="materialturquoise16">
	<blockdata n='material' name='Seatbelt1' sequence='1' editable_name='unique' icon="materialturquoise16"
	  help='This material can be applied to seatbelt elements'>
	  <container n="material_seatbelt" pn="Seatbelt properties">
	    <value n="Mass" pn="Mass" v="0.0" unit_magnitude="M/L" units="kg/m" help="Mass per unit length"/>
	    <value n="Factor_load" pn="Load curve" v="" help="Load curve identification for loading (force vs. engineering strain). Left blank if not defined"
	    function="[loads_function Seatbelt]" pn_function="F" unit_magnitude="F" units="N" function_func="lsdyna::function_loads"/>
	    <value n="Factor_unload" pn="Unload curve" v="" help="Load curve identification for unloading (force vs. engineering strain). Left blank if not defined"
	    function="[loads_function Seatbelt]" pn_function="F" unit_magnitude="F" units="N" function_func="lsdyna::function_loads"/>
	    <value n="Length" pn="Minimum length" v="0.0" unit_magnitude="L" units="m" help="Minimum length (for elements connected to slip rings and retractors)"/>
	  </container>
	</blockdata>
      </container>
    </container>
  </container>
  <container n='Loads' pn='Loads' icon="loads16">
    <!--  HIDDEN IN THIS LS-DYNA VERSION -->
    <container n='combined_loadcases' state="hidden" pn='Combined LC' icon="loads16">
      <edit_command n="combined_loadcases_win" proc='combined_loadcases_win' edit_type='exclusive'/>
    </container>
    <condition n="No_self_weight" pn="No self weight" icon="loads16" ov="point,line,surface,volume" ovm="node,face_element,element"
      help="Apply this condition to already created property groups. Gravity effects (defined in General Data) will affect all defined elements except those specified in this section">
	<symbol proc='lsdyna::draw_symbol_self_weight' orientation='global'/>
      </condition>
    <condition n="Punctual_Load" pn="Punctual Load" icon="loads16" ov="point" ovm="node"
      help="A static force and momentum applied to the selected points or nodes of the model. Units in International System for values are:\n\t (N) for the forces.\n\t (N*m) for the momentum.">
      <symbol proc='lsdyna::draw_symbol_punctual_load' orientation='global'/>
      <value n="Factor" pn="Factor" v="1.0" help="This factor, that can be a number or a formula, multiplies the vector load"
      function="[loads_function Punctual_Load]" function_func="lsdyna::function_loads"/>
      <!--                       USED FOR SYMBOL WRITING IN LS-DYNA  -->
      <value n="X_Force" pn="X force" v="0.0" unit_magnitude="F" state="[check_state_inv Plates]"/>
      <value n="Y_Force" pn="Y force" v="0.0" unit_magnitude="F" state="[check_state_inv Plates]"/>
      <value n="Z_Force" pn="Z force" v="0.0" unit_magnitude="F" state="[check_state_inv {Plane_strain Plane_stress}]"/>
      <value n="Mx_Force" pn="Mx force" v="0.0" unit_magnitude="F*L" state="[check_state_inv {Plane_strain Plane_stress Plates Solids}]"/>
      <value n="My_Force" pn="My force" v="0.0" unit_magnitude="F*L" state="[check_state_inv {Plane_strain Plane_stress Solids}]"/>
      <value n="Mz_Force" pn="Mz force" v="0.0" unit_magnitude="F*L" state="[check_state_inv {Plane_strain Plane_stress Solids}]"/>
    </condition>
    <condition n="pressure_load" pn="Pressure load" ov="line,surface"
      ovm="face_element,element" icon="loads16" 
      help="Apply a distributed pressure load over selected entities (1D or 2D).Volume faces can be selected as well (in geometry and mesh). Units in International System for values are:\n\t (N/m2) for the pressures.">
      <symbol proc='gid_groups_conds::draw_symbol_image loads16' orientation='global'/>
      <!--                         A specific SYMBOL MAY BE NEEDED FOR THIS LOAD -->
      <!--                         <symbol proc='lsdyna::draw_symbol_loads_lines' orientation='free'/> -->
      <!--HIDDEN IN THIS LS-DYNA VERSION-->
      <value n="load_type" pn="Load type" v="global" state="hidden" values="global,global projected,local"
	dict="global,global,global projected,global projected,local,local" editable="0"
	help="The load can be applied in global axes, in global axes but projected as if the length of the beam was the projected length over the pressure vector or in the Local Axes defined for the beam">
	<dependencies node="../value[@n='Mx_Pressure']" att1="state" v1="hidden" value="global" att2="v" v2="0.0"/>
	<dependencies node="../value[@n='Mx_Pressure']" att1="state" v1="hidden" value="global projected" att2="v" v2="0.0"/>
	<dependencies node="../value[@n='Mx_Pressure']" att1="state" v1="normal" default="1"/>
      </value>
      <value n="Factor" pn="Factor" v="1.0" help="This factor, that can be a number or a formula, multiplies pressure value"
      function="[loads_function pressure_load]" function_func="lsdyna::function_loads"/>
      <value n="Pressure" pn="Pressure" v="0.0" unit_magnitude="F/L^2"  help="Select distributed pressure load value"/>
      <value n="Arrival_time" pn="Arrival Time" unit_magnitude="T" v="0.0" units="s" help="Times during the solution that the pressure begins to act. Until this time, the pressure is ignored. The function value of the load curves will be evaluated at the offset time given by the difference of the solution time and the arrival time. Only relative displacements that occur after the Arrival Time are prescribed"/>
    </condition>
    <condition n="Solid_load" pn="Solid Load" icon="loads16" ov="volume" ovm="element" help="Apply a concentrated nodal force to a rigid body. This force is applied at the center of mass or a moment is applied around a global axis. Please select an already created property group to apply this condition" >
      <!--A SYMBOL MAY BE NEEDED FOR THIS CONDITION-->
      <symbol proc='gid_groups_conds::draw_symbol_image loads_rigid16' orientation='global'/>
      <value n="Factor" pn="Factor" v="1.0" help="This factor, that can be a number or a formula, multiplies the vector load"
      function="[loads_function Solid_Load]" function_func="lsdyna::function_loads"/>
      <value n="X_Force" pn="X force" v="0.0" unit_magnitude="F" state="[check_state_inv Plates]"/>
      <value n="Y_Force" pn="Y force" v="0.0" unit_magnitude="F" state="[check_state_inv Plates]"/>
      <value n="Z_Force" pn="Z force" v="0.0" unit_magnitude="F" state="[check_state_inv {Plane_strain Plane_stress}]"/>
      <value n="Mx_Force" pn="Mx force" v="0.0" unit_magnitude="F*L" state="[check_state_inv {Plane_strain Plane_stress Plates Solids}]"/>
      <value n="My_Force" pn="My force" v="0.0" unit_magnitude="F*L" state="[check_state_inv {Plane_strain Plane_stress Solids}]"/>
      <value n="Mz_Force" pn="Mz force" v="0.0" unit_magnitude="F*L" state="[check_state_inv {Plane_strain Plane_stress Solids}]"/>
    </condition> 
    <!-- IMPLEMENTED IN LS-DYNA BUT HIDDEN AT THE MOMENT -->
    <condition n="Temperature_fixed" pn="Fixed Temperature" state="hidden" icon="loads16" ov="point" ovm="node"
      help="Define temperature boundary conditions for a coupled or thermal/structural analisys">
      <value n="Temperature" pn="Temperature" v="40" unit_magnitude="Temp" units="ºC"/>
    </condition>
    <!--  HIDDEN IN THIS LS-DYNA VERSION -->
    <container n="Beams" state="hidden" pn="Beams" icon="loads16">
      <!--HIDDEN IN THIS LS-DYNA VERSION-->
      <condition n="Self_weight_Beam" pn="Self weight" state="hidden" icon="loads16" ov="line"
	ovm="element" help="If this condition is applied to beams, a load is calculated and assigned, depending on the self-weight of the material, the area of the section and the direction of the gravity.">
	<symbol proc='lsdyna::draw_symbol_self_weight' orientation='global'/>
      </condition>
      <!--HIDDEN IN THIS LS-DYNA VERSION-->
      <condition n="Temperature_beam" pn="Temperature" state="hidden" icon="loads16" ov="line"
	ovm="element" help="This condition considers the deformation supported by the beam when there is a uniform temperature change in all the beam. ">
	<value n="alphaX" pn="α" unit_magnitude="1/DeltaTemp" v="0.000012" units="1/Δ°C"/>
	<value n="deltaT" pn="ΔT" v="0.0" unit_magnitude="DeltaTemp"/>
      </condition>
      <condition n="morison_load_beam" pn="Morison Loads" state="[check_state {Naval}]"  icon="loads16" ov="line"
	ovm="element" help="Morison loads applying to beams.">
	<value n="MorisonTclCodeB" pn="TCL code" v="" fieldtype="long text" state="hidden"/>
	<value n="MorUnits" pn="Units"  v="N-m-kg" state="hidden"/>
	<symbol proc='lsdyna::draw_symbol_self_weight' orientation='global'/>
	<edit_command n="Edit" pn="Edit" proc='morisonBeam_window'/>
      </condition>
    </container>
    <!-- HIDDEN IN THIS LS-DYNA VERSION -->
    <container n="Shells" pn="Shells" state="hidden" icon="loads16">
      <!-- OLD STATE: state="[check_state {Naval Beams_and_shells Shells Plane_strain Plane_stress Plates}]" -->
      <!--HIDDEN IN THIS LS DYNA VERSION-->
      <condition n="shell_face_load" pn="Contour pressure" icon="loads16" ov="line" ovm="face_element" state="hidden" help="A static pressure load over the contour of the shell given in global axes or in user defined axes. Units in International System for values are:\n\t (N/m) for the shell contour pressures.">
	<symbol proc='lsdyna::draw_symbol_loads_lines' orientation='free'/>
	<value n="load_type" pn="Load type" v="global" values="global,global projected,local"
	  dict="global,global,global projected,global projected,local,local" editable="0"
	  help="The load can be applied in global axes, in global axes but projected as if the length of the shell boundary was the projected length over the pressure vector or in the Local Axes defined for the boundary">
	</value>
	<value n="Factor" pn="Factor" v="1.0" help="This factor, that can be a number or a formula, multiplies the vector load"
	function="[loads_function shell_face_load]" function_func="lsdyna::function_loads"/>
	<value n="X_Pressure" pn="X pressure" v="0.0" unit_magnitude="F/L"/>
	<value n="Y_Pressure" pn="Y pressure" v="0.0" unit_magnitude="F/L"/>
	<value n="Z_Pressure" pn="Z pressure" v="0.0" unit_magnitude="F/L"/>
      </condition>
      <!--HIDDEN IN THIS LS DYNA VERSION-->
      <condition n="Self_weight_shell" pn="Self weight" icon="loads16" ov="surface" state="hidden"
	ovm="element" help="If this condition is applied to shells, a load is calculated and assigned, depending on the self-weight of the material, the thickness of the shell and the direction of the gravity.">
	<symbol proc='lsdyna::draw_symbol_self_weight' orientation='global'/>
      </condition>
      <condition n="morison_load_shell" pn="Morison Loads" state="[check_state {Naval}]"  icon="loads16" ov="surface"
	ovm="element" help="Morison loads applying to shells.">
	<value n="WaveHeight" pn="Height" v="0.0" unit_magnitude="L" units="m" state="disabled"/>
	<value n="InitialT" pn="Period" v="0.0" unit_magnitude="T" units="s" state="disabled"/>
	<value n="WaveDir" pn="Direction" v="0.0" unit_magnitude="Rotation" units="rad" state="disabled"/>
	<value n="Draught" pn="Draught" v="0.0" unit_magnitude="L" units="m" state="disabled"/>
	<value n="Displac" pn="Displacement" v="0.0" unit_magnitude="L" units="m" state="disabled"/>
	<value n="LongMetRad" pn="Long Metacentric Radius" v="0.0" state="hidden"/>
	<value n="TransMetRad" pn="Transv. Metacentric Radius" v="0.0" state="hidden"/>
	<value n="RadGyrX" pn="Radius og Gyration X" v="0.0" state="hidden"/>
	<value n="RadGyrY" pn="Radius og Gyration Y" v="0.0" state="hidden"/>
	<value n="RadGyrZ" pn="Radius og Gyration Z" v="0.0" state="hidden"/>
	<value n="WindVel" pn="Wind Velocity" v="0.0" state="hidden"/>
	<value n="WindDir" pn="Wind Direction" v="0.0" state="hidden"/>
	<value n="CurrDir" pn="Current Direction" v="0.0" state="hidden"/>
	<value n="TubDiam" pn="Diameter of the tubular" v="0.0" state="hidden"/>
	<value n="TubLength" pn="Length of the tubular" v="0.0" state="hidden"/>
	<value n="CofGx" pn="Centre of Gravity X" v="0.0" state="hidden"/>
	<value n="CofGy" pn="Centre of Gravity Y" v="0.0" state="hidden"/>
	<value n="CofGz" pn="Centre of Gravity Z" v="0.0" state="hidden"/>
	<value n="LmovX" pn="Lin. Movement X" v="0.0" state="hidden"/>
	<value n="LmovY" pn="Lin. Movement Y" v="0.0" state="hidden"/>
	<value n="LmovZ" pn="Lin. Movement Z" v="0.0" state="hidden"/>
	<value n="RotX" pn="Rotation X" v="0.0" state="hidden"/>
	<value n="RotY" pn="Rotation Y" v="0.0" state="hidden"/>
	<value n="RotZ" pn="rotation Z" v="0.0" state="hidden"/>
	<value n="MorisonTclCodeS" pn="TCL code" v="" fieldtype="long text" state="hidden"/>
	<value n="MorUnits" pn="Units"  v="N-m-kg" state="hidden"/>
	<symbol proc='lsdyna::draw_symbol_self_weight' orientation='global'/>
	<edit_command n="Edit" pn="Edit" proc='morisonSurf_window'/>
      </condition>
      <!--HIDDEN IN THIS LS DYNA VERSION-->
      <condition n="Temperature_shell" pn="Temperature" icon="loads16" ov="surface" state="hidden"
	ovm="element" help="This condition considers the deformation supported by the shell when there is a uniform temperature change in all the shell. ">
	<value n="alphaX" pn="αx" unit_magnitude="1/DeltaTemp" v="0.000012" units="1/Δ°C"/>
	<value n="alphaY" pn="αy" unit_magnitude="1/DeltaTemp" v="0.000012" units="1/Δ°C"/>
	<value n="deltaT" pn="ΔT" v="0.0" unit_magnitude="DeltaTemp"/>
      </condition>
      <!--HIDDEN IN THIS LS DYNA VERSION-->
      <condition n="WaveLoad_shell" pn="Wave load" icon="loads16" ov="surface" state="hidden"
	ovm="element" help="This condition considers laods the shells with a global pressure coming from a user-defined wave. ">
	<symbol proc='lsdyna::draw_symbol_waveLoads' orientation='global'/>
	<value n="WaveAmplitude" pn="Amplitude" unit_magnitude="L" v="0.0" units="m" state="disabled" />
	<value n="WavePhase" pn="Phase Angle" unit_magnitude="Rotation" v="0.0" units="rad" state="disabled" />
	<value n="WaveLength" pn="Wave Length" unit_magnitude="L" v="0.0" units="m" state="disabled" />
	<value n="WaveShipLength" pn="Wave Ship Length" unit_magnitude="L" v="0.0" units="m" state="hidden"/>
	<value n="WaveRefpoint" pn="wave refpoint" unit_magnitude="L" v="" units="m" state="hidden"/> 
	<value n="WaveStern" pn="Wave stern point" unit_magnitude="L" v="" units="m" state="hidden"/>
	<value n="WaveType" pn="Wave Profile" v="-" state="disabled"/>
	<value n="WaveUnits" pn="Units"  v="N-m-kg" state="hidden"/>
	<value n="WaveTclCode" pn="TCL code" v="" fieldtype="long text" state="hidden"/>
	<edit_command n="Edit" pn="Edit" proc='waveloads_window'/>
      </condition>      
    </container>
    <!--  HIDDEN IN THIS LS-DYNA VERSION -->
    <container n="Solids" pn="Solids" state="hidden" icon="loads16">
      <!--NOT IMPLEMENTED IN THIS LSDYNA VERSION-->
      <condition n="Self_weight_solid" pn="Self weight" state="hidden" icon="loads16" ov="volume"
	ovm="element" help="If this condition is applied to solids, a load is calculated and assigned, depending on the self-weight of the material, the volume of the solid and the direction of the gravity.">
	<symbol proc='lsdyna::draw_symbol_self_weight' orientation='global'/>
      </condition>
    </container>
    <!--  HIDDEN IN THIS LS-DYNA VERSION -->
    <condition n="custom_load" pn="Custom load" state="hidden" icon="loads16" ov="point,line,surface,volume" ovm=""
      help="A load defined by using the TCL extension language">
      <value n="units" pn="Units set"  v="N-m-kg" values="N-m-kg,N-cm-kg,N-mm-kg,Kp-cm-utm"/>
      <value n="tcl_code" pn="TCL code" v="" fieldtype="long text"/>
      <edit_command n="edit_custom_data" pn="Edit" proc='edit_custom_data'/>
    </condition>
  </container>
  <blockdata n="Database" pn="Post Process" icon="post16" help="Allows the user to define both GiD and LS-DYNA post process options">
    <value n="DT" pn="Interval" v="0.02" unit_magnitude="T" units="s" help="Time interval between GiD outputs"/>
      <container n="Nodal" pn="Nodal" icon="post16" help="Allows the user to activate nodal quantities writing">
	<value n="Activate_Displacements" pn="Write displacements" v="yes" values="yes,no" help="Indicate if Displacements are required in the GiD postprocess"/>
	<value n="Activate_Velocities" pn="Write velocities" v="no" values="yes,no" help="Indicate if Velocities are required in the GiD postprocess"/>
	<value n="Activate_Accelerations" pn="Write accelerations" v="no" values="yes,no" help="Indicate if Accelerations are required in the GiD postprocess"/>  
	<container n="Brick_Elements" pn="Brick Elements" icon="post16" helps="Allows the user to activate brick element quantities writing">  
	  <value n="Activate_Brick_Stresses" pn="Write brick elements stress" v="no" values="yes,no" help="Indicate if brick element stresses are required in the GiD postprocess"/>
	  <value n="Activate_Brick_Plastic_Strain" pn="Write brick elements plastic strain" v="no" values="yes,no" help="Indicate if brick element strains are required in the GiD postprocess"/>
	  <container n="Shell" pn="Shells" icon="post16" help="Allows the user to activate shell and thick shell element quantities writing">
	    <value n="Activate_Stresses" pn="Write shell stresses" v="no" values="yes,no" help="Indicate if midsurface,inner surface and outer surface stresses are required in the GiD postprocess"/>
	    <value n="Activate_Strains" pn="Write shell strains" v="no" values="yes,no" help="Indicate if midsurface,inner surface, outer surface, upper surface, lower surface and through thickness strains are required in the GiD postprocess"/>
	    <value n="Activate_Quadratic" pn="Write 4-node shell data" v="no" values="yes,no" help="Indicate if bending moment, shear resultant,normal resultant and thickness are required for 4-node shells in the GiD postprocess"/>
	    <!-- IN THIS LS-DYNA VERSION, D3PLOT DATA IS AUTOMATICALLY SET -->
	      <container n="d3plot" pn="d3plot" state="hidden" icon="post16" help="Configuration options of d3plot LS-DYNA output file">
		<value n="Output_Steps_Time" pn="Step Time" v="0.002" unit_magnitude="T" units="s" help="Time interval between LS-DYNA d3plot file outputs"/>
		<value n="Output_Steps_Number" pn="Steps Number" v="" help="Number of total steps in LS-DYNA d3plot file (it overrides Output Step)"/>   
	      </container> 
	  </container>
	</container>
    </container>
	<container n="Elements" pn="Elements" icon="post16" help="Allows the user to activate element quantities writing">
	  <container n="Solids" pn="Solids" icon="post16" help="Allows the user to activate solid element quantities writing">
	<value n="Activate_Solid_Stress" pn="Write solid stresses" v="no" values="yes,no" help="Indicate if solid stresses are required in the GiD postprocess"/>
	<value n="Activate_Yield_Function" pn="Write solid yield functions" v="no" values="yes,no" help="Indicate if solid yield functions are required in the GiD postprocess"/>
	  </container>
      <container n="Beams" pn="Beams" icon="post16" help="Allows the user to activate beam element quantities writing">
	<value n="Activate_Beam_Resultant" pn="Write beam resultants" v="no" values="yes,no" help="Indicate if beam resultants are required in the GiD postprocess"/>
	<value n="Activate_Beam_Integration" pn="Write integration point stresses" v="no" values="yes,no" help="Indicate if integration point stresses are required in the GiD postprocess"/>
	</container>
      </container>
  </blockdata>
  <postprocess>
    <!-- NODAL QUANTITIES -->
    <result n="Velocities" rex="^Velocities" pn="Velocities" view_modes="Contour_Fill"/>
    <result n="Accelerations" rex="^Accelerations" pn="Accelerations" view_modes="Contour_Fill"/>
    <result n="Displacements" rex="^Displacements" pn="Displacements" view_modes="Deformation"/>
    <!-- SHELL STRESSES/STRAINS -->
    <container n="MidSurface" pn="MidSurface" view_modes="Contour_Fill">
      <result n="X_Stress_Midsurface" rex="^X_Stress_Midsurface" pn="X Stress" components="none" view_modes="Contour_Fill"/>
      <result n="Y_Stress_Midsurface" rex="^Y_Stress_Midsurface" pn="Y Stress" components="none" view_modes="Contour_Fill"/>
      <result n="Z_Stress_Midsurface" rex="^Z_Stress_Midsurface" pn="Z Stress" components="none" view_modes="Contour_Fill"/>
      <result n="XY_Stress_Midsurface" rex="^XY_Stress_Midsurface" pn="XY Stress" components="none" view_modes="Contour_Fill"/>
      <result n="YZ_Stress_Midsurface" rex="^YZ_Stress_Midsurface" pn="YZ Stress" components="none" view_modes="Contour_Fill"/>
      <result n="XZ_Stress_Midsurface" rex="^XZ_Stress_Midsurface" pn="XZ Stress" components="none" view_modes="Contour_Fill"/>
      <result n="Effective_Stress_Midsurface" rex="^Effective_Stress_Midsurface" pn="Effective Stress" components="none" view_modes="Contour_Fill"/>
      <result n="Effective_plastic_Strain_Midsurface" rex="^Effective_plastic_Strain_Midsurface" pn="Effective plastic Strain" components="none" view_modes="Contour_Fill"/>
    </container>
    <container n="Inner_Surface" pn="Inner Surface" view_modes="Contour_Fill">
      <result n="X_Stress_Inner_Surface" rex="^X_Stress_Inner_Surface" pn="X Stress" components="none" view_modes="Contour_Fill"/>
      <result n="Y_Stress_Inner_Surface" rex="^Y_Stress_Inner_Surface" pn="Y Stress" components="none" view_modes="Contour_Fill"/>
      <result n="Z_Stress_Inner_Surface" rex="^Z_Stress_Inner_Surface" pn="Z Stress" components="none" view_modes="Contour_Fill"/>
      <result n="XY_Stress_Inner_Surface" rex="^XY_Stress_Inner_Surface" pn="XY Stress" components="none" view_modes="Contour_Fill"/>
      <result n="YZ_Stress_Inner_Surface" rex="^YZ_Stress_Inner_Surface" pn="YZ Stress" components="none" view_modes="Contour_Fill"/>
      <result n="XZ_Stress_Inner_Surface" rex="^XZ_Stress_Inner_Surface" pn="XZ Stress" components="none" view_modes="Contour_Fill"/>
      <result n="Effective_Stress_Inner_Surface" rex="^Effective_Stress_Inner_Surface" pn="Effective Stress" components="none" view_modes="Contour_Fill"/>
      <result n="X_Strain_Inner_Surface" rex="^X_Strain_Inner_Surface" pn="X Strain" components="none" view_modes="Contour_Fill"/>
      <result n="Y_Strain_Inner_Surface" rex="^Y_Strain_Inner_Surface" pn="Y Strain" components="none" view_modes="Contour_Fill"/>
      <result n="Z_Strain_Inner_Surface" rex="^Z_Strain_Inner_Surface" pn="Z Strain" components="none" view_modes="Contour_Fill"/>
      <result n="XY_Strain_Inner_Surface" rex="^XY_Strain_Inner_Surface" pn="XY Strain" components="none" view_modes="Contour_Fill"/>
      <result n="YZ_Strain_Inner_Surface" rex="^YZ_Strain_Inner_Surface" pn="YZ Strain" components="none" view_modes="Contour_Fill"/>
      <result n="XZ_Strain_Inner_Surface" rex="^XZ_Strain_Inner_Surface" pn="XZ Strain" components="none" view_modes="Contour_Fill"/>
      <result n="Effective_plastic_Strain_Inner_Surface" rex="^Effective_plastic_Strain_Inner_Surface" pn="Effective plastic Strain" components="none" view_modes="Contour_Fill"/>
    </container>
    <container n="Outer_Surface" pn="Outer Surface" view_modes="Contour_Fill">
      <result n="X_Stress_Outer_Surface" rex="^X_Stress_Outer_Surface" pn="X Stress" components="none" view_modes="Contour_Fill"/>
      <result n="Y_Stress_Outer_Surface" rex="^Y_Stress_Outer_Surface" pn="Y Stress" components="none" view_modes="Contour_Fill"/>
      <result n="Z_Stress_Outer_Surface" rex="^Z_Stress_Outer_Surface" pn="Z Stress" components="none" view_modes="Contour_Fill"/>
      <result n="XY_Stress_Outer_Surface" rex="^XY_Stress_Outer_Surface" pn="XY Stress" components="none" view_modes="Contour_Fill"/>
      <result n="YZ_Stress_Outer_Surface" rex="^YZ_Stress_Outer_Surface" pn="YZ Stress" components="none" view_modes="Contour_Fill"/>
      <result n="XZ_Stress_Outer_Surface" rex="^XZ_Stress_Outer_Surface" pn="XZ Stress" components="none" view_modes="Contour_Fill"/>
      <result n="Effective_Stress_Outer_Surface" rex="^Effective_Stress_Outer_Surface" pn="Effective Stress" components="none" view_modes="Contour_Fill"/>
      <result n="X_Strain_Outer_Surface" rex="^X_Strain_Outer_Surface" pn="X Strain" components="none" view_modes="Contour_Fill"/>
      <result n="Y_Strain_Outer_Surface" rex="^Y_Strain_Outer_Surface" pn="Y Strain" components="none" view_modes="Contour_Fill"/>
      <result n="Z_Strain_Outer_Surface" rex="^Z_Strain_Outer_Surface" pn="Z Strain" components="none" view_modes="Contour_Fill"/>
      <result n="XY_Strain_Outer_Surface" rex="^XY_Strain_Outer_Surface" pn="XY Strain" components="none" view_modes="Contour_Fill"/>
      <result n="YZ_Strain_Outer_Surface" rex="^YZ_Strain_Outer_Surface" pn="YZ Strain" components="none" view_modes="Contour_Fill"/>
      <result n="XZ_Strain_Outer_Surface" rex="^XZ_Strain_Outer_Surface" pn="XZ Strain" components="none" view_modes="Contour_Fill"/>
      <result n="Effective_plastic_Strain_Outer_Surface" rex="^Effective_plastic_Strain_Outer_Surface" pn="Effective plastic Strain" components="none" view_modes="Contour_Fill"/>
    </container>
    <!-- 4-NODE SHELL DATA -->
    <container n="Bending_Moment" pn="Bending Moment" view_modes="Contour_Fill">
      <result n="Bending_Moment-mxx" rex="^Bending_Moment-mxx" pn="Bending Moment Mxx" components="none" view_modes="Contour_Fill"/>
      <result n="Bending_Moment-myy" rex="^Bending_Moment-myy" pn="Bending Moment Myy" components="none" view_modes="Contour_Fill"/>
      <result n="Bending_Moment-mxy" rex="^Bending_Moment-mxy" pn="Bending Moment Mxy" components="none" view_modes="Contour_Fill"/>
    </container>
    <container n="Shear_Resultant" pn="Shear Resultant" view_modes="Contour_Fill">
      <result n="Shear_resultant-qxx" rex="^Shear_resultant-qxx" pn="Shear Resultant Qxx" components="none" view_modes="Contour_Fill"/>
      <result n="Shear_resultant-qyy" rex="^Shear_resultant-qyy" pn="Shear Resultant Qyy" components="none" view_modes="Contour_Fill"/>
    </container>
    <container n="Normal_Resultant" pn="Normal Resultant" view_modes="Contour_Fill">
      <result n="Normal_resultant-nxx" rex="^Normal_resultant-nxx" pn="Normal Resultant Nxx" components="none" view_modes="Contour_Fill"/>
      <result n="Normal_resultant-nyy" rex="^Normal_resultant-nyy" pn="Normal Resultant Nyy" components="none" view_modes="Contour_Fill"/>
      <result n="Normal_resultant-nxy" rex="^Normal_resultant-nxy" pn="Normal Resultant Nxy" components="none" view_modes="Contour_Fill"/>
    </container>
    <result n="Thickness" rex="^Thickness" pn="Thickness" components="none" view_modes="Contour_Fill"/>
    <!-- BRICK ELEMENTS DATA -->
    <result n="X_Stress_Brick_Elements" rex="^X_Stress_Brick_Elements" pn="X Stress" components="none" view_modes="Contour_Fill"/>
    <result n="Y_Stress_Brick_Elements" rex="^Y_Stress_Brick_Elements" pn="Y Stress" components="none" view_modes="Contour_Fill"/>
    <result n="Z_Stress_Brick_Elementse" rex="^Z_Stress_Brick_Elements" pn="Z Stress" components="none" view_modes="Contour_Fill"/>
    <result n="XY_Stress_Brick_Elements" rex="^XY_Stress_Brick_Elements" pn="XY Stress" components="none" view_modes="Contour_Fill"/>
    <result n="YZ_Stress_Brick_Elements" rex="^YZ_Stress_Brick_Elements" pn="YZ Stress" components="none" view_modes="Contour_Fill"/>
    <result n="XZ_Stress_Brick_Elements" rex="^XZ_Stress_Brick_Elements" pn="XZ Stress" components="none" view_modes="Contour_Fill"/>
    <result n="Effective_Plastic_Strain_Brick_Elements" rex="^Effective_Plastic_Strain_Brick_Elements" pn="Effective plastic Strain" components="none" view_modes="Contour_Fill"/>
    <!-- BEAM ELEMENTS DATA NODAL QUANTITIES (NOT SUPPORTED BY LS-DYNA SOLVER AT THE MOMENT) -->
    <result n="X_Force_Resultant" rex="^X_Force_Resultant" pn="X Force Resultant" components="none" view_modes="Contour_Fill"/>
    <result n="Y_Force_Resultant" rex="^Y_Force_Resultant" pn="Y Force Resultant" components="none" view_modes="Contour_Fill"/>
    <result n="Z_Force_Resultant" rex="^Z_Force_Resultant" pn="Z Force Resultant" components="none" view_modes="Contour_Fill"/>
    <result n="X_Moment_Resultant" rex="^X_Moment_Resultant" pn="X Moment Resultant" components="none" view_modes="Contour_Fill"/>
    <result n="Y_Moment_Resultant" rex="^Y_Moment_Resultant" pn="Y Moment Resultant" components="none" view_modes="Contour_Fill"/>
    <result n="Z_Moment_Resultant" rex="^Z_Moment_Resultant" pn="Z Moment Resultant" components="none" view_modes="Contour_Fill"/>
    <!-- SOLID ELEMENTS DATA ELEMENT QUANTITIES -->
    <container n="Solid_Stress" pn="Solid Stress" view_modes="Contour_Fill">
      <result n="Stress_xx" rex="^Stress_xx" pn="Stress xx" components="none" view_modes="Contour_Fill"/>
      <result n="Stress_yy" rex="^Stress_yy" pn="Stress yy" components="none" view_modes="Contour_Fill"/>
      <result n="Stress_zz" rex="^Stress_zz" pn="Stress zz" components="none" view_modes="Contour_Fill"/>
      <result n="Stress_xy" rex="^Stress_xy" pn="Stress xy" components="none" view_modes="Contour_Fill"/>
      <result n="Stress_yz" rex="^Stress_yz" pn="Stress yz" components="none" view_modes="Contour_Fill"/>
      <result n="Stress_zx" rex="^Stress_zx" pn="Stress zx" components="none" view_modes="Contour_Fill"/>
      <result n="Effective_Stress" rex="^Effective_Stress" pn="Effective Stress" components="none" view_modes="Contour_Fill"/>     
    </container>
      <result n="Yield_Function" rex="^Yield_Function" pn="Yield Function" components="none" view_modes="Contour_Fill"/>
      <!--     BEAM ELEMENTS DATA ELEMENT QUANTITIES -->
      <container n="Beam_resultant" pn="Beam Resultant" view_modes="Vector_Line_Diagram">
	<result n="Axial" rex="^Axial" pn="Axial" components="none" view_modes="Vector_Line_Diagram"/>    
	<result n="Shear_y" rex="^Shear_y" pn="Shear y" components="none" view_modes="Vector_Line_Diagram"/> 
	<result n="Shear_z" rex="^Shear_z" pn="Shear z" components="none" view_modes="Vector_Line_Diagram"/> 
	<result n="Moment_y" rex="^Moment_y" pn="Moment y" components="none" view_modes="Vector_Line_Diagram"/> 
	<result n="Moment_z" rex="^Moment_z" pn="Moment z" components="none" view_modes="Vector_Line_Diagram"/> 
	<result n="Torsion" rex="^Torsion" pn="Torsion" components="none" view_modes="Vector_Line_Diagram"/>
    </container>
	<container n="Beam_integration" pn="Beam Integration Points" view_modes="Contour_Fill">
	  <container n="Point_1" pn="Point 1" view_modes="Contour_Fill">
	    <result n="Stress_11_P1" rex="^Stress_11_P1" pn="Stress 11" components="none" view_modes="Contour_Fill"/>
	    <result n="Stress_12_P1" rex="^Stress_12_P1" pn="Stress 12" components="none" view_modes="Contour_Fill"/>
	    <result n="Stress_31_P1" rex="^Stress_31_P1" pn="Stress 31" components="none" view_modes="Contour_Fill"/>
	    <result n="Effective_Plastic_Stress_P1" rex="^Effective_Plastic_Stress_P1" pn="Effective Plastic Stress" components="none" view_modes="Contour_Fill"/>
	    </container>
	    <container n="Point_2" pn="Point 2" view_modes="Contour_Fill">
	      <result n="Stress_11_P2" rex="^Stress_11_P2" pn="Stress 11" components="none" view_modes="Contour_Fill"/>
	      <result n="Stress_12_P2" rex="^Stress_12_P2" pn="Stress 12" components="none" view_modes="Contour_Fill"/>
	      <result n="Stress_31_P2" rex="^Stress_31_P2" pn="Stress 31" components="none" view_modes="Contour_Fill"/>
	      <result n="Effective_Plastic_Stress_P2" rex="^Effective_Plastic_Stress_P2" pn="Effective Plastic Stress" components="none" view_modes="Contour_Fill"/>
	      </container>
	      <container n="Point_3" pn="Point 3" view_modes="Contour_Fill">
		<result n="Stress_11_P3" rex="^Stress_11_P3" pn="Stress 11" components="none" view_modes="Contour_Fill"/>
		<result n="Stress_12_P3" rex="^Stress_12_P3" pn="Stress 12" components="none" view_modes="Contour_Fill"/>
		<result n="Stress_31_P3" rex="^Stress_31_P3" pn="Stress 31" components="none" view_modes="Contour_Fill"/>
		<result n="Effective_Plastic_Stress_P3" rex="^Effective_Plastic_Stress_P3" pn="Effective Plastic Stress" components="none" view_modes="Contour_Fill"/>
		</container>
		<container n="Point_4" pn="Point 4" view_modes="Contour_Fill">
		  <result n="Stress_11_P4" rex="^Stress_11_P4" pn="Stress 11" components="none" view_modes="Contour_Fill"/>
		  <result n="Stress_12_P4" rex="^Stress_12_P4" pn="Stress 12" components="none" view_modes="Contour_Fill"/>
		  <result n="Stress_31_P4" rex="^Stress_31_P4" pn="Stress 31" components="none" view_modes="Contour_Fill"/>
		  <result n="Effective_Plastic_Stress_P4" rex="^Effective_Plastic_Stress_P4" pn="Effective Plastic Stress" components="none" view_modes="Contour_Fill"/>
		  </container>
  
	  
    </container>
    <!--++++++++++RAMSERIES POST PROCESS DATA++++++++++++ -->
    <container n="Beams" pn="Beams">
      <result n="BDisplacements" rex="^BDisplacements" pn="Displacements" view_modes="Vector_Line_Diagram"/>
      <result n="B_Axial_Force" rex="^B_Axial_Force" pn="Axial force" view_modes="Vector_Line_Diagram"/>
      <result n="Y'_Shear" rex="^Y'_Shear" pn="Y' shear" view_modes="Vector_Line_Diagram"/>
      <result n="Z'_Shear" rex="^Z'_Shear" pn="Z' shear" view_modes="Vector_Line_Diagram"/>
      <result n="Y'_Momentus" rex="^Y'_Momentus" pn="Y' momentus" view_modes="Vector_Line_Diagram"/>
      <result n="Z'_Momentus" rex="^Z'_Momentus" pn="Z' momentus" view_modes="Vector_Line_Diagram"/>
      <result n="Torsor" rex="^Torsor" pn="Torsor" view_modes="Vector_Line_Diagram"/>
      <result n="Local_Axes_Beam" rex="^Local_Axes_Beam" pn="Local axes" view_modes="Display_Vectors"/>
    </container>
    <container n="Shells" pn="Shells">
      <result n="Axial_Force" rex="^Axial_Force" pn="Axial force" view_modes="Contour_Fill" main_component="none">
	<component n="|Axial_Force|" state="hidden"/>
      </result>
      <result n="Shear" rex="^Shear_\(" pn="Shear" view_modes="Contour_Fill">
	<component n="|Shear|" state="hidden"/>
      </result>
      <result n="Momentus" rex="^Momentus" pn="Momentus" view_modes="Contour_Fill">
	<component n="|Momentus|" state="hidden"/>
      </result>
      <container n="Main_axial_force" pn="Main ax. force">
	<result n="Main_Ax._Force" rex="^Main_Ax._Force" pn="N11" view_modes="Contour_Fill"
	main_component="N11" components="none"/>
	<result n="Main_Ax._Force" rex="^Main_Ax._Force" pn="N22" view_modes="Contour_Fill"
	main_component="N22" components="none"/>
	<result n="Mat_Ax._Force" rex="^Mat_Ax._Force" pn="Both" view_modes="Display_Vectors"
	  components="Sxx-Mat_Ax._Force,Syy-Mat_Ax._Force">
	  <component n="Sxx-Mat_Ax._Force" pn="N11"/>
	  <component n="Syy-Mat_Ax._Force" pn="N22"/>
	</result>
      </container>
      <container n="Main_momentus" pn="Main momentus">
	<result n="Main_Momentus" rex="^Main_Momentus" pn="M11" view_modes="Contour_Fill"
	main_component="M11" components="none"/>
	<result n="Main_Momentus" rex="^Main_Momentus" pn="M22" view_modes="Contour_Fill"
	main_component="M22" components="none"/>
	<result n="L_Axes_Momentus" rex="^L_Axes_Momentus" pn="Local axes" view_modes="Display_Vectors"/>
	<result n="Shear_in_Main" rex="^Shear_in_Main" pn="QM1" view_modes="Contour_Fill" main_component="Qm1"
	components="none"/>
	<result n="Shear_in_Main" rex="^Shear_in_Main" pn="QM2" view_modes="Contour_Fill" main_component="Qm2"
	components="none"/>
      </container>
      <container n="Von_Misses" pn="Von Mises">
	<result n="Von_Misses_Up" rex="^Von_Misses_Up" pn="Up" view_modes="Contour_Fill" components="none"/>
	<result n="Von_Misses_Down" rex="^Von_Misses_Down" pn="Down" view_modes="Contour_Fill" components="none"/>
      </container>
    </container>
    <result n="Local_Axes" rex="^Local_Axes" pn="Local axes" view_modes="Display_Vectors"/>
    <result n="Reactions" rex="^Reactions" pn="Reactions" view_modes="Display_Vectors"/>
    <result n="M_Reactions" rex="^M_Reactions" pn="M reactions" view_modes="Display_Vectors"/>
  </postprocess>
  <procs>
    <proc n='beam_section_window'>
      <![CDATA[
      if { $dict ne "" } {
      set ::beam_section_window $dict
      } else {
      foreach node [$domNode selectNodes value|container/value] {
      dict set ::beam_section_window [$node @n] [get_domnode_attribute $node v]
      }
      }
      dict set ::beam_section_window Units N-mm-kg
      dict set ::beam_section_window numchanges 0
      set units [dict create L^2 mm^2 L^3 mm^3 L^4 mm^4 F/L^2 N/mm^2 F/L^3 N/mm^3]
      rename ::DWLocalGetValue DWLocalGetValue_save
      rename ::DWLocalSetValue DWLocalSetValue_save
      
      proc ::DWLocalGetValue { var dummy n } {
      upvar #0 $var d
      return [dict get $d $n]
      }
      proc ::DWLocalSetValue { var dummy n v } {
      upvar #0 $var d
      dict set d $n $v
      dict incr d numchanges
      }
      catch {
      set w [sections::initwindowsections ::beam_section_window ""]
      tkwait visibility $w
      grab $w
      tkwait window $w
      } err
      
      rename ::DWLocalGetValue {}
      rename ::DWLocalSetValue {}
      rename DWLocalGetValue_save ::DWLocalGetValue
      rename DWLocalSetValue_save ::DWLocalSetValue
      
      if { ![dict get $::beam_section_window numchanges] } {
      return ""
      }
      dict unset ::beam_section_window numchanges
      
      set units_dict ""
      foreach node [$domNode selectNodes value|container/value] {
      if { [dict exists $units [$node @unit_magnitude ""]] } {
      dict set units_dict [$node @n] [dict get $units [$node @unit_magnitude]]
      }
      }
      return [list $::beam_section_window $units_dict]
      ]]>
    </proc>
    <proc n='library_section_window'>
      <![CDATA[
      if { $dict eq "" } {
      foreach node [$domNode selectNodes value|container/value] {
      dict set dict [$node @n] [get_domnode_attribute $node v]
      dict set dict_units [$node @n] [get_domnode_attribute $node units]
      }
      }
      return [SteelSections::create_window $boundary_conds $dict $dict_units]
      ]]>
    </proc>
    <proc n='composites_window'>
      <![CDATA[
      if { $dict eq "" } {
      foreach node [$domNode selectNodes value|container/value] {
      dict set dict [$node @n] [get_domnode_attribute $node v]
      dict set dict_units [$node @n] [get_domnode_attribute $node units]
      }
      }
      return [Composite::create_window $boundary_conds $dict $dict_units]
      ]]>
    </proc>
    <proc n='stiffeners_window'>
      <![CDATA[
      if { $dict eq "" } {
      foreach node [$domNode selectNodes value|container/value] {
      dict set dict [$node @n] [get_domnode_attribute $node v]
      dict set dict_units [$node @n] [get_domnode_attribute $node units]
      }
      }
      return [compStiff::create_window $boundary_conds $dict $dict_units]
      ]]>
    </proc>
    <proc n='stiffshell_window'>
      <![CDATA[
      if { $dict eq "" } {
      foreach node [$domNode selectNodes value|container/value] {
      dict set dict [$node @n] [get_domnode_attribute $node v]
      dict set dict_units [$node @n] [get_domnode_attribute $node units]
      }
      }
      return [stiff::create_window $boundary_conds $dict $dict_units]
      ]]>
    </proc>
    <proc n='waveloads_window'>
      <![CDATA[
      if { $dict eq "" } {
      foreach node [$domNode selectNodes value|container/value] {
      dict set dict [$node @n] [get_domnode_attribute $node v]
      dict set dict_units [$node @n] [get_domnode_attribute $node units]
      }
      }
      return [wave::create_window $boundary_conds $dict $dict_units $domNode]
      ]]>
    </proc>
    <proc n='morisonBeam_window'>
      <![CDATA[
      if { $dict eq "" } {
      foreach node [$domNode selectNodes value|container/value] {
      dict set dict [$node @n] [get_domnode_attribute $node v]
      dict set dict_units [$node @n] [get_domnode_attribute $node units]
      }
      }
      return [morison::create_window $boundary_conds $dict $dict_units $domNode]
      ]]>
    </proc>
    <proc n='morisonSurf_window'>
      <![CDATA[
      if { $dict eq "" } {
      foreach node [$domNode selectNodes value|container/value] {
      dict set dict [$node @n] [get_domnode_attribute $node v]
      dict set dict_units [$node @n] [get_domnode_attribute $node units]
      }
      }
      return [morisonSurf::create_window $boundary_conds $dict $dict_units $domNode]
      ]]>
    </proc>
    <proc n='give_units_set_active'>
      <![CDATA[
      # not used by now
      set u ""
      foreach umNode [$domNode selectNodes /*/units/unit_magnitude] {
      if { $u ne "" } { append u "-" }
      append u [$umNode @active]
      }
      return $u
      ]]>
    </proc>
    <proc n='give_units_set'>
      <![CDATA[
      # not used by now
      set xp {string(/*/units/units_system[@active='1']/@n)}
      set units_system [$domNode selectNodes $xp]
      
      set list0 ""
      foreach umNode [$domNode selectNodes /*/units/unit_magnitude] {
      set xp [format_xpath {unit[@units_system=%s]} $units_system]
      set list ""
      foreach uNode [$umNode selectNodes $xp] {
      if { $list0 eq "" } {
      lappend list [$uNode @n]
      } else {
      foreach l $list0 {
      append l "-[$uNode @n]"
      lappend list $l
      }
      }
      }
      set list0 $list
      }
      return [join $list ,]
      ]]>
    </proc>
    <proc n='edit_custom_data'>
      <![CDATA[
      return [lsdyna::custom_data_edit $domNode $dict]
      ]]>
    </proc>
    <proc n='combined_loadcases_win'>
      <![CDATA[
      if { [winfo exists .gid.combined_loadcases] } {
      raise .gid.combined_loadcases
      } else {
      combined_loadcases::win .gid.combined_loadcases \
      -doc [$domNode ownerDocument] -boundary_conds \
      $boundary_conds -item $item
      }
      ]]>
    </proc>
    <proc n='combined_loadcases_win_update'>
      <![CDATA[
      combined_loadcases::update [$domNode ownerDocument] $boundary_conds
      if { [winfo exists .gid.combined_loadcases] } {
      .gid.combined_loadcases update
      }
      ]]>
    </proc>
    <proc n='Tdyn_coupling_win'>
      <![CDATA[
      if { [winfo exists .gid.tdyn_coupling_win] } {
      raise .gid.tdyn_coupling_win
      } else {
      tdyn_coupling::win .gid.tdyn_coupling_win \
      -doc [$domNode ownerDocument] -boundary_conds \
      $boundary_conds -item $item
      }
      ]]>
    </proc>
    <proc n='give_materials_list' args='args'>
      <![CDATA[
      set optional {
      { -user_defined boolean 1 }
      { -has_container container_name "" }
      }
      set compulsory ""
      parse_args $optional $compulsory $args
      
      set restList ""
      if { $user_defined } {
      set xp {string(/*/translations/translation[@pn="User defined"]/@pn)}
      set n [$domNode selectNodes $xp]
      lappend resList [list 0 $n $n appuser16 1]
      }
      proc materials_append_list { parentNode level container_name } {
      set l ""
      foreach domNode [$parentNode childNodes] {
      set name [$domNode @pn ""]
      if { $name eq "" } { set name [$domNode @name] }
      switch [$domNode @n] {
      materials_types {
      set ret [materials_append_list $domNode [expr {$level+1}] \
      $container_name]
      if { [llength $ret] } {
      lappend l [list $level $name $name "" 0]
      eval lappend l $ret
      }
      }
      material {
      set good 1
      if { $container_name ne "" } {
      set xp [format_xpath {container[@n=%s]} $container_name]
      if { [$domNode selectNodes $xp] eq "" } { set good 0 }
      }
      if { $good } {
      lappend l [list $level $name $name material16 1]
      }
      }
      }
      }
      return $l
      }
      set xp {/*/container[@n="Properties"]/container[@n="Materials"]}
      eval lappend resList [materials_append_list [$domNode selectNodes $xp] 0 \
      $has_container]
      return [join $resList ","]
      ]]>
    </proc>
    <proc n='edit_materials_list' args='args'>
      <![CDATA[
      set optional {
      { -has_container container_name "" }
      }
      set compulsory ""
      set correct_args [lrange $args 0 1]

      parse_args $optional $compulsory $correct_args

      set xp {string(/*/translations/translation[@pn="Edit materials"]/@pn)}
      set title [$domNode selectNodes $xp]
      set xp {/*/container[@n="Properties"]/container[@n="Materials"]/} 
      append xp [format_xpath {container[@n="materials_types" and .//container[@n=%s]]} $has_container]

      if { [dict exists $dict Material] } {
      set xps {/*/container[@n="Properties"]/container[@n="Materials"]/} 
      append xps [format_xpath {container[@n="materials_types" and .//container[@n=%s]]/} $has_container]
      append xps [format_xpath {blockdata[@n="material" and @name=%s]} [dict get $dict Material]]
      } else { set xps "" }

      set domNodes [gid_groups_conds::edit_tree_parts_window $boundary_conds $title $xp $xps]
      set dict ""

      if { [llength $domNodes] } {
	
      set domNode [lindex $domNodes 0]
      
      if { [$domNode @n] eq "material" } { 
	 if { [lsearch $args "-position" ]!="-1" } {
	    if { [lsearch $args "array_1" ]!="-1" } {
		dict set dict Material_1 [$domNode @name]
	    } elseif { [lsearch $args "array_2" ]!="-1" } {
		dict set dict Material_2 [$domNode @name]
	    } elseif { [lsearch $args "array_3" ]!="-1" } {
		dict set dict Material_3 [$domNode @name]
	    } 
	 } else {            
		dict set dict Material [$domNode @name]            
	 }
      }
    }
    return [list $dict ""]
      ]]>
    </proc>
    <proc n='give_library_sections_list'>
      <![CDATA[
      return [SteelSections::give_values_tree]
      ]]>
    </proc>
    
    <proc n='check_state' args='types'>
      <![CDATA[
      set xp {string(/*/blockdata[@n="General data"]/container[@n="Analysis"]/value[@n="Problem_type"]/@v)}
      set problem_type [$domNode selectNodes $xp]
      if { [lsearch -exact $types $problem_type] == -1 } {
      return hidden
      } else {
      return normal
      }
      ]]>
    </proc>
    <proc n='check_state_inv' args='types'>
      <![CDATA[
      set xp {string(/*/blockdata[@n="General data"]/container[@n="Analysis"]/value[@n="Problem_type"]/@v)}
      set problem_type [$domNode selectNodes $xp]
      if { [lsearch -exact $types $problem_type] == -1 } {
      return normal
      } else {
      return hidden
      }
      ]]>
    </proc>
    <proc n='analysis_types_state' args='args'>
      <![CDATA[
      set xp {string(/*/blockdata[@n="General data"]/container[@n="Analysis"]/value[@n="Analysis_Type"]/@v)}
      set Analysis_Type [$domNode selectNodes $xp]
      if { [lsearch -exact $args $Analysis_Type] != -1 } { return normal }
      return hidden
      ]]>
    </proc>
    <proc n='loads_function' args='load_name'>
      <![CDATA[
      set loads [list \
      [list scalar] \
      ]
      if { [lsearch "Nonlinear_viscous" $load_name] != -1 } {
      lappend loads \
      [list interpolator_func Material x/θ Adimensional]
      } elseif { [lsearch "Force_limited" $load_name] != -1 } {
      lappend loads \
      [list interpolator_func Material ɛ-Δl Adimensional]
      } elseif { [lsearch "Seatbelt" $load_name] != -1 } {
      lappend loads \
      [list interpolator_func Material ɛ Adimensional]
      } elseif { [lsearch "Seatbelt_retractor" $load_name] != -1 } {
      lappend loads \
      [list interpolator_func Material Pull-Out L]
      } elseif { [lsearch "Nonlinear_elastic" $load_name] != -1 || [lsearch "Inelastic" $load_name] != -1 } {
      lappend loads \
      [list interpolator_func Material x/θ Adimensional]
      } elseif { [lsearch "Rigid" $load_name] != -1 } {
      lappend loads \
      [list interpolator_func Material Penetr. L]
      } elseif { [lsearch "Joint_stiffness_displacement" $load_name] != -1 } {
      lappend loads \
      [list interpolator_func Moment θ Rotation]
      } elseif { [lsearch "Joint_stiffness_velocity" $load_name] != -1 } {
      lappend loads \
      [list interpolator_func Moment ω Rotation/T]
      } elseif { [lsearch "Airbags" $load_name] != -1 } {
      lappend loads \
      [list interpolator_func t t T]
      } elseif { [lsearch "Orifice" $load_name] != -1 } {
      lappend loads \
      [list interpolator_func P P F/L^2]
      } elseif { [lsearch "Airbag_mass" $load_name] != -1 } {
      lappend loads \
      [list interpolator_func Material ω Rotation/T]
      } else {
      lappend loads \
      [list sinusoidal_load t] \
      [list interpolator_func t t T]
      }
      if { [lsearch "shell_face_load shell_pressure_load" $load_name] != -1 } {
      lappend loads \
      [list triangular_load xyz G] \
      [list hydrostatic_load xyz G]
      }
      return [join $loads ,]
      ]]>
    </proc>
    <proc n='constraints_NL_function' args='var pvar magnitude'>
      <![CDATA[
      set constraints [list \
      [list scalar] \
      ]
      set xp {string(/*/blockdata[@n="General data"]/container[@n="Analysis"]/value[@n="Analysis_Type"]/@v)}
      set Analysis_Type [$domNode selectNodes $xp]
      if { [lsearch "Non-Linear_Static Non-Linear_Dynamic" $Analysis_Type] != -1 } {
      lappend constraints [list NL_elastic_constraints $var $pvar] \
      [list interpolator_func $var $pvar $magnitude]
      }
      return [join $constraints ,]
      ]]>
    </proc>
    <proc n='give_gravity_vector' args='axe'>
      <![CDATA[
      
      set xp {string(/*/blockdata[@n="General data"]/container[@n="Gravity"]/value[@n="Active_gravity"]/@v)}
      set activation [$domNode selectNodes $xp] 
      
      if  { $activation=="1" } { 
      set xp {string(/*/blockdata[@n="General data"]/container[@n="Gravity"]/value[@n="Gravity_Direction"]/@v)}
      set direction [$domNode selectNodes $xp]
      
      set xp {string(/*/blockdata[@n="General data"]/container[@n="Gravity"]/value[@n="Gravity_Magnitude"]/@v)}
      set magnitude [$domNode selectNodes $xp]
      
      if {$direction=="$axe+"} { return $magnitude}
      if {$direction=="$axe-"} {return "-$magnitude"}  
      }   
      return 0  
      ]]>
    </proc>
    <proc n='give_mat_prop' args='args'>
      <![CDATA[
      set name [$domNode selectNodes {string(@v)}]
      set xp0 {/*/container[@n="Properties"]/container[@n="Materials"]//}
      append xp0 {blockdata[@n="material" and @name=%s]//value[@n=%s]/@v}
      set xp [format_xpath "string($xp0)" $name [lindex $args 0]]
      return [$domNode selectNodes $xp]
      ]]>
    </proc>
    <proc n='give_mat_units' args='args'>
      <![CDATA[
      set name [$domNode selectNodes {string(@v)}]
      set xp0 {/*/container[@n="Properties"]/container[@n="Materials"]//}
      append xp0 {blockdata[@n="material" and @name=%s]//value[@n=%s]/@units}
      set xp [format_xpath "string($xp0)" $name [lindex $args 0]]
      return [$domNode selectNodes $xp]
      ]]>
    </proc>
    <proc n='draw_points'>
      <![CDATA[
      if { $dict eq "" } {
      foreach node [$domNode selectNodes value|container/value] {
      dict set dict [$node @n] [get_domnode_attribute $node v]
      dict set dict_units [$node @n] [get_domnode_attribute $node units]   
      }       
      }       
      return [lsdyna::draw_joint_points $boundary_conds $dict $dict_units $domNode]   
      ]]>
    </proc>
    <proc n="pick_points" args="pos"><![CDATA[
      if { $dict eq "" } {
      foreach node [$domNode selectNodes value|container/value] {
      dict set dict [$node @n] [get_domnode_attribute $node v]
      dict set dict_units [$node @n] [get_domnode_attribute $node units]   
      }       
      }   
      return [lsdyna::pick_joint_points $boundary_conds $dict $dict_units $domNode $pos]    
    ]]></proc> 
    <proc n="pick_coordinate_system" args="entity"><![CDATA[
      if { $dict eq "" } {
      foreach node [$domNode selectNodes value|container/value] {
      dict set dict [$node @n] [get_domnode_attribute $node v]
      dict set dict_units [$node @n] [get_domnode_attribute $node units]   
      }       
      }   
      return [lsdyna::pick_joint_coordinate_system $boundary_conds $dict $dict_units $domNode $entity]    
    ]]></proc>     
  </procs>
  <translations>
    <translation pn="User defined"/>
  </translations>
  <display_options frame_width="186"/>
  <blockdata n="Internal data" state="hidden">
    <value n="lognoter_file" v=""/>
  </blockdata>
</lsdyna_data>